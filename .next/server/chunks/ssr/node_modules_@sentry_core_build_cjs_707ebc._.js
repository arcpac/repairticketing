module.exports = {

"[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
/**
 * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.
 *
 * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.
 */ const DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__;
exports.DEBUG_BUILD = DEBUG_BUILD; //# sourceMappingURL=debug-build.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/version.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
// This is a magic string replaced by rollup
const SDK_VERSION = "8.47.0";
exports.SDK_VERSION = SDK_VERSION; //# sourceMappingURL=version.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const version = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/version.js [app-ssr] (ecmascript)");
/** Get's the global object for the current JavaScript runtime */ const GLOBAL_OBJ = globalThis;
/**
 * Returns a global singleton contained in the global `__SENTRY__[]` object.
 *
 * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory
 * function and added to the `__SENTRY__` object.
 *
 * @param name name of the global singleton on __SENTRY__
 * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`
 * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value
 * @returns the singleton
 */ function getGlobalSingleton(name, creator, obj) {
    const gbl = obj || GLOBAL_OBJ;
    const __SENTRY__ = gbl.__SENTRY__ = gbl.__SENTRY__ || {};
    const versionedCarrier = __SENTRY__[version.SDK_VERSION] = __SENTRY__[version.SDK_VERSION] || {};
    return versionedCarrier[name] || (versionedCarrier[name] = creator());
}
exports.GLOBAL_OBJ = GLOBAL_OBJ;
exports.getGlobalSingleton = getGlobalSingleton; //# sourceMappingURL=worldwide.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
/**
 * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.
 *
 * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.
 */ const DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__;
exports.DEBUG_BUILD = DEBUG_BUILD; //# sourceMappingURL=debug-build.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js [app-ssr] (ecmascript)");
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
/** Prefix for logging strings */ const PREFIX = 'Sentry Logger ';
const CONSOLE_LEVELS = [
    'debug',
    'info',
    'warn',
    'error',
    'log',
    'assert',
    'trace'
];
/** This may be mutated by the console instrumentation. */ const originalConsoleMethods = {};
/** JSDoc */ /**
 * Temporarily disable sentry console instrumentations.
 *
 * @param callback The function to run against the original `console` messages
 * @returns The results of the callback
 */ function consoleSandbox(callback) {
    if (!('console' in worldwide.GLOBAL_OBJ)) {
        return callback();
    }
    const console = worldwide.GLOBAL_OBJ.console;
    const wrappedFuncs = {};
    const wrappedLevels = Object.keys(originalConsoleMethods);
    // Restore all wrapped console methods
    wrappedLevels.forEach((level)=>{
        const originalConsoleMethod = originalConsoleMethods[level];
        wrappedFuncs[level] = console[level];
        console[level] = originalConsoleMethod;
    });
    try {
        return callback();
    } finally{
        // Revert restoration to wrapped state
        wrappedLevels.forEach((level)=>{
            console[level] = wrappedFuncs[level];
        });
    }
}
function makeLogger() {
    let enabled = false;
    const logger = {
        enable: ()=>{
            enabled = true;
        },
        disable: ()=>{
            enabled = false;
        },
        isEnabled: ()=>enabled
    };
    if (debugBuild.DEBUG_BUILD) {
        CONSOLE_LEVELS.forEach((name)=>{
            logger[name] = (...args)=>{
                if (enabled) {
                    consoleSandbox(()=>{
                        worldwide.GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);
                    });
                }
            };
        });
    } else {
        CONSOLE_LEVELS.forEach((name)=>{
            logger[name] = ()=>undefined;
        });
    }
    return logger;
}
/**
 * This is a logger singleton which either logs things or no-ops if logging is not enabled.
 * The logger is a singleton on the carrier, to ensure that a consistent logger is used throughout the SDK.
 */ const logger = worldwide.getGlobalSingleton('logger', makeLogger);
exports.CONSOLE_LEVELS = CONSOLE_LEVELS;
exports.consoleSandbox = consoleSandbox;
exports.logger = logger;
exports.originalConsoleMethods = originalConsoleMethods; //# sourceMappingURL=logger.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const STACKTRACE_FRAME_LIMIT = 50;
const UNKNOWN_FUNCTION = '?';
// Used to sanitize webpack (error: *) wrapped stack errors
const WEBPACK_ERROR_REGEXP = /\(error: (.*)\)/;
const STRIP_FRAME_REGEXP = /captureMessage|captureException/;
/**
 * Creates a stack parser with the supplied line parsers
 *
 * StackFrames are returned in the correct order for Sentry Exception
 * frames and with Sentry SDK internal frames removed from the top and bottom
 *
 */ function createStackParser(...parsers) {
    const sortedParsers = parsers.sort((a, b)=>a[0] - b[0]).map((p)=>p[1]);
    return (stack, skipFirstLines = 0, framesToPop = 0)=>{
        const frames = [];
        const lines = stack.split('\n');
        for(let i = skipFirstLines; i < lines.length; i++){
            const line = lines[i];
            // Ignore lines over 1kb as they are unlikely to be stack frames.
            // Many of the regular expressions use backtracking which results in run time that increases exponentially with
            // input size. Huge strings can result in hangs/Denial of Service:
            // https://github.com/getsentry/sentry-javascript/issues/2286
            if (line.length > 1024) {
                continue;
            }
            // https://github.com/getsentry/sentry-javascript/issues/5459
            // Remove webpack (error: *) wrappers
            const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;
            // https://github.com/getsentry/sentry-javascript/issues/7813
            // Skip Error: lines
            if (cleanedLine.match(/\S*Error: /)) {
                continue;
            }
            for (const parser of sortedParsers){
                const frame = parser(cleanedLine);
                if (frame) {
                    frames.push(frame);
                    break;
                }
            }
            if (frames.length >= STACKTRACE_FRAME_LIMIT + framesToPop) {
                break;
            }
        }
        return stripSentryFramesAndReverse(frames.slice(framesToPop));
    };
}
/**
 * Gets a stack parser implementation from Options.stackParser
 * @see Options
 *
 * If options contains an array of line parsers, it is converted into a parser
 */ function stackParserFromStackParserOptions(stackParser) {
    if (Array.isArray(stackParser)) {
        return createStackParser(...stackParser);
    }
    return stackParser;
}
/**
 * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.
 * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the
 * function that caused the crash is the last frame in the array.
 * @hidden
 */ function stripSentryFramesAndReverse(stack) {
    if (!stack.length) {
        return [];
    }
    const localStack = Array.from(stack);
    // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)
    if (/sentryWrapped/.test(getLastStackFrame(localStack).function || '')) {
        localStack.pop();
    }
    // Reversing in the middle of the procedure allows us to just pop the values off the stack
    localStack.reverse();
    // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)
    if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {
        localStack.pop();
        // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`
        // is produced within the hub itself, making it:
        //
        //   Sentry.captureException()
        //   getCurrentHub().captureException()
        //
        // instead of just the top `Sentry` call itself.
        // This forces us to possibly strip an additional frame in the exact same was as above.
        if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {
            localStack.pop();
        }
    }
    return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map((frame)=>({
            ...frame,
            filename: frame.filename || getLastStackFrame(localStack).filename,
            function: frame.function || UNKNOWN_FUNCTION
        }));
}
function getLastStackFrame(arr) {
    return arr[arr.length - 1] || {};
}
const defaultFunctionName = '<anonymous>';
/**
 * Safely extract function name from itself
 */ function getFunctionName(fn) {
    try {
        if (!fn || typeof fn !== 'function') {
            return defaultFunctionName;
        }
        return fn.name || defaultFunctionName;
    } catch (e) {
        // Just accessing custom props in some Selenium environments
        // can cause a "Permission denied" exception (see raven-js#495).
        return defaultFunctionName;
    }
}
/**
 * Get's stack frames from an event without needing to check for undefined properties.
 */ function getFramesFromEvent(event) {
    const exception = event.exception;
    if (exception) {
        const frames = [];
        try {
            // @ts-expect-error Object could be undefined
            exception.values.forEach((value)=>{
                // @ts-expect-error Value could be undefined
                if (value.stacktrace.frames) {
                    // @ts-expect-error Value could be undefined
                    frames.push(...value.stacktrace.frames);
                }
            });
            return frames;
        } catch (_oO) {
            return undefined;
        }
    }
    return undefined;
}
exports.UNKNOWN_FUNCTION = UNKNOWN_FUNCTION;
exports.createStackParser = createStackParser;
exports.getFramesFromEvent = getFramesFromEvent;
exports.getFunctionName = getFunctionName;
exports.stackParserFromStackParserOptions = stackParserFromStackParserOptions;
exports.stripSentryFramesAndReverse = stripSentryFramesAndReverse; //# sourceMappingURL=stacktrace.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const stacktrace = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js [app-ssr] (ecmascript)");
// We keep the handlers globally
const handlers = {};
const instrumented = {};
/** Add a handler function. */ function addHandler(type, handler) {
    handlers[type] = handlers[type] || [];
    handlers[type].push(handler);
}
/**
 * Reset all instrumentation handlers.
 * This can be used by tests to ensure we have a clean slate of instrumentation handlers.
 */ function resetInstrumentationHandlers() {
    Object.keys(handlers).forEach((key)=>{
        handlers[key] = undefined;
    });
}
/** Maybe run an instrumentation function, unless it was already called. */ function maybeInstrument(type, instrumentFn) {
    if (!instrumented[type]) {
        instrumented[type] = true;
        try {
            instrumentFn();
        } catch (e) {
            debugBuild.DEBUG_BUILD && logger.logger.error(`Error while instrumenting ${type}`, e);
        }
    }
}
/** Trigger handlers for a given instrumentation type. */ function triggerHandlers(type, data) {
    const typeHandlers = type && handlers[type];
    if (!typeHandlers) {
        return;
    }
    for (const handler of typeHandlers){
        try {
            handler(data);
        } catch (e) {
            debugBuild.DEBUG_BUILD && logger.logger.error(`Error while triggering instrumentation handler.\nType: ${type}\nName: ${stacktrace.getFunctionName(handler)}\nError:`, e);
        }
    }
}
exports.addHandler = addHandler;
exports.maybeInstrument = maybeInstrument;
exports.resetInstrumentationHandlers = resetInstrumentationHandlers;
exports.triggerHandlers = triggerHandlers; //# sourceMappingURL=handlers.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalError.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
const handlers = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js [app-ssr] (ecmascript)");
let _oldOnErrorHandler = null;
/**
 * Add an instrumentation handler for when an error is captured by the global error handler.
 *
 * Use at your own risk, this might break without changelog notice, only used internally.
 * @hidden
 */ function addGlobalErrorInstrumentationHandler(handler) {
    const type = 'error';
    handlers.addHandler(type, handler);
    handlers.maybeInstrument(type, instrumentError);
}
function instrumentError() {
    _oldOnErrorHandler = worldwide.GLOBAL_OBJ.onerror;
    // Note: The reason we are doing window.onerror instead of window.addEventListener('error')
    // is that we are using this handler in the Loader Script, to handle buffered errors consistently
    worldwide.GLOBAL_OBJ.onerror = function(msg, url, line, column, error) {
        const handlerData = {
            column,
            error,
            line,
            msg,
            url
        };
        handlers.triggerHandlers('error', handlerData);
        if (_oldOnErrorHandler) {
            // eslint-disable-next-line prefer-rest-params
            return _oldOnErrorHandler.apply(this, arguments);
        }
        return false;
    };
    worldwide.GLOBAL_OBJ.onerror.__SENTRY_INSTRUMENTED__ = true;
}
exports.addGlobalErrorInstrumentationHandler = addGlobalErrorInstrumentationHandler; //# sourceMappingURL=globalError.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalUnhandledRejection.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
const handlers = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js [app-ssr] (ecmascript)");
let _oldOnUnhandledRejectionHandler = null;
/**
 * Add an instrumentation handler for when an unhandled promise rejection is captured.
 *
 * Use at your own risk, this might break without changelog notice, only used internally.
 * @hidden
 */ function addGlobalUnhandledRejectionInstrumentationHandler(handler) {
    const type = 'unhandledrejection';
    handlers.addHandler(type, handler);
    handlers.maybeInstrument(type, instrumentUnhandledRejection);
}
function instrumentUnhandledRejection() {
    _oldOnUnhandledRejectionHandler = worldwide.GLOBAL_OBJ.onunhandledrejection;
    // Note: The reason we are doing window.onunhandledrejection instead of window.addEventListener('unhandledrejection')
    // is that we are using this handler in the Loader Script, to handle buffered rejections consistently
    worldwide.GLOBAL_OBJ.onunhandledrejection = function(e) {
        const handlerData = e;
        handlers.triggerHandlers('unhandledrejection', handlerData);
        if (_oldOnUnhandledRejectionHandler) {
            // eslint-disable-next-line prefer-rest-params
            return _oldOnUnhandledRejectionHandler.apply(this, arguments);
        }
        return true;
    };
    worldwide.GLOBAL_OBJ.onunhandledrejection.__SENTRY_INSTRUMENTED__ = true;
}
exports.addGlobalUnhandledRejectionInstrumentationHandler = addGlobalUnhandledRejectionInstrumentationHandler; //# sourceMappingURL=globalUnhandledRejection.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/carrier.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const version = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/version.js [app-ssr] (ecmascript)");
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
/**
 * An object that contains globally accessible properties and maintains a scope stack.
 * @hidden
 */ /**
 * Returns the global shim registry.
 *
 * FIXME: This function is problematic, because despite always returning a valid Carrier,
 * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check
 * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.
 **/ function getMainCarrier() {
    // This ensures a Sentry carrier exists
    getSentryCarrier(worldwide.GLOBAL_OBJ);
    return worldwide.GLOBAL_OBJ;
}
/** Will either get the existing sentry carrier, or create a new one. */ function getSentryCarrier(carrier) {
    const __SENTRY__ = carrier.__SENTRY__ = carrier.__SENTRY__ || {};
    // For now: First SDK that sets the .version property wins
    __SENTRY__.version = __SENTRY__.version || version.SDK_VERSION;
    // Intentionally populating and returning the version of "this" SDK instance
    // rather than what's set in .version so that "this" SDK always gets its carrier
    return __SENTRY__[version.SDK_VERSION] = __SENTRY__[version.SDK_VERSION] || {};
}
exports.getMainCarrier = getMainCarrier;
exports.getSentryCarrier = getSentryCarrier; //# sourceMappingURL=carrier.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
// eslint-disable-next-line @typescript-eslint/unbound-method
const objectToString = Object.prototype.toString;
/**
 * Checks whether given value's type is one of a few Error or Error-like
 * {@link isError}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ function isError(wat) {
    switch(objectToString.call(wat)){
        case '[object Error]':
        case '[object Exception]':
        case '[object DOMException]':
        case '[object WebAssembly.Exception]':
            return true;
        default:
            return isInstanceOf(wat, Error);
    }
}
/**
 * Checks whether given value is an instance of the given built-in class.
 *
 * @param wat The value to be checked
 * @param className
 * @returns A boolean representing the result.
 */ function isBuiltin(wat, className) {
    return objectToString.call(wat) === `[object ${className}]`;
}
/**
 * Checks whether given value's type is ErrorEvent
 * {@link isErrorEvent}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ function isErrorEvent(wat) {
    return isBuiltin(wat, 'ErrorEvent');
}
/**
 * Checks whether given value's type is DOMError
 * {@link isDOMError}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ function isDOMError(wat) {
    return isBuiltin(wat, 'DOMError');
}
/**
 * Checks whether given value's type is DOMException
 * {@link isDOMException}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ function isDOMException(wat) {
    return isBuiltin(wat, 'DOMException');
}
/**
 * Checks whether given value's type is a string
 * {@link isString}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ function isString(wat) {
    return isBuiltin(wat, 'String');
}
/**
 * Checks whether given string is parameterized
 * {@link isParameterizedString}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ function isParameterizedString(wat) {
    return typeof wat === 'object' && wat !== null && '__sentry_template_string__' in wat && '__sentry_template_values__' in wat;
}
/**
 * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)
 * {@link isPrimitive}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ function isPrimitive(wat) {
    return wat === null || isParameterizedString(wat) || typeof wat !== 'object' && typeof wat !== 'function';
}
/**
 * Checks whether given value's type is an object literal, or a class instance.
 * {@link isPlainObject}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ function isPlainObject(wat) {
    return isBuiltin(wat, 'Object');
}
/**
 * Checks whether given value's type is an Event instance
 * {@link isEvent}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ function isEvent(wat) {
    return typeof Event !== 'undefined' && isInstanceOf(wat, Event);
}
/**
 * Checks whether given value's type is an Element instance
 * {@link isElement}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ function isElement(wat) {
    return typeof Element !== 'undefined' && isInstanceOf(wat, Element);
}
/**
 * Checks whether given value's type is an regexp
 * {@link isRegExp}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ function isRegExp(wat) {
    return isBuiltin(wat, 'RegExp');
}
/**
 * Checks whether given value has a then function.
 * @param wat A value to be checked.
 */ function isThenable(wat) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    return Boolean(wat && wat.then && typeof wat.then === 'function');
}
/**
 * Checks whether given value's type is a SyntheticEvent
 * {@link isSyntheticEvent}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ function isSyntheticEvent(wat) {
    return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;
}
/**
 * Checks whether given value's type is an instance of provided constructor.
 * {@link isInstanceOf}.
 *
 * @param wat A value to be checked.
 * @param base A constructor to be used in a check.
 * @returns A boolean representing the result.
 */ function isInstanceOf(wat, base) {
    try {
        return wat instanceof base;
    } catch (_e) {
        return false;
    }
}
/**
 * Checks whether given value's type is a Vue ViewModel.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */ function isVueViewModel(wat) {
    // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.
    return !!(typeof wat === 'object' && wat !== null && (wat.__isVue || wat._isVue));
}
exports.isDOMError = isDOMError;
exports.isDOMException = isDOMException;
exports.isElement = isElement;
exports.isError = isError;
exports.isErrorEvent = isErrorEvent;
exports.isEvent = isEvent;
exports.isInstanceOf = isInstanceOf;
exports.isParameterizedString = isParameterizedString;
exports.isPlainObject = isPlainObject;
exports.isPrimitive = isPrimitive;
exports.isRegExp = isRegExp;
exports.isString = isString;
exports.isSyntheticEvent = isSyntheticEvent;
exports.isThenable = isThenable;
exports.isVueViewModel = isVueViewModel; //# sourceMappingURL=is.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/browser.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
const WINDOW = worldwide.GLOBAL_OBJ;
const DEFAULT_MAX_STRING_LENGTH = 80;
/**
 * Given a child DOM element, returns a query-selector statement describing that
 * and its ancestors
 * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]
 * @returns generated DOM path
 */ function htmlTreeAsString(elem, options = {}) {
    if (!elem) {
        return '<unknown>';
    }
    // try/catch both:
    // - accessing event.target (see getsentry/raven-js#838, #768)
    // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly
    // - can throw an exception in some circumstances.
    try {
        let currentElem = elem;
        const MAX_TRAVERSE_HEIGHT = 5;
        const out = [];
        let height = 0;
        let len = 0;
        const separator = ' > ';
        const sepLength = separator.length;
        let nextStr;
        const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;
        const maxStringLength = !Array.isArray(options) && options.maxStringLength || DEFAULT_MAX_STRING_LENGTH;
        while(currentElem && height++ < MAX_TRAVERSE_HEIGHT){
            nextStr = _htmlElementAsString(currentElem, keyAttrs);
            // bail out if
            // - nextStr is the 'html' element
            // - the length of the string that would be created exceeds maxStringLength
            //   (ignore this limit if we are on the first iteration)
            if (nextStr === 'html' || height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength) {
                break;
            }
            out.push(nextStr);
            len += nextStr.length;
            currentElem = currentElem.parentNode;
        }
        return out.reverse().join(separator);
    } catch (_oO) {
        return '<unknown>';
    }
}
/**
 * Returns a simple, query-selector representation of a DOM element
 * e.g. [HTMLElement] => input#foo.btn[name=baz]
 * @returns generated DOM path
 */ function _htmlElementAsString(el, keyAttrs) {
    const elem = el;
    const out = [];
    if (!elem || !elem.tagName) {
        return '';
    }
    // @ts-expect-error WINDOW has HTMLElement
    if (WINDOW.HTMLElement) {
        // If using the component name annotation plugin, this value may be available on the DOM node
        if (elem instanceof HTMLElement && elem.dataset) {
            if (elem.dataset['sentryComponent']) {
                return elem.dataset['sentryComponent'];
            }
            if (elem.dataset['sentryElement']) {
                return elem.dataset['sentryElement'];
            }
        }
    }
    out.push(elem.tagName.toLowerCase());
    // Pairs of attribute keys defined in `serializeAttribute` and their values on element.
    const keyAttrPairs = keyAttrs && keyAttrs.length ? keyAttrs.filter((keyAttr)=>elem.getAttribute(keyAttr)).map((keyAttr)=>[
            keyAttr,
            elem.getAttribute(keyAttr)
        ]) : null;
    if (keyAttrPairs && keyAttrPairs.length) {
        keyAttrPairs.forEach((keyAttrPair)=>{
            out.push(`[${keyAttrPair[0]}="${keyAttrPair[1]}"]`);
        });
    } else {
        if (elem.id) {
            out.push(`#${elem.id}`);
        }
        const className = elem.className;
        if (className && is.isString(className)) {
            const classes = className.split(/\s+/);
            for (const c of classes){
                out.push(`.${c}`);
            }
        }
    }
    const allowedAttrs = [
        'aria-label',
        'type',
        'name',
        'title',
        'alt'
    ];
    for (const k of allowedAttrs){
        const attr = elem.getAttribute(k);
        if (attr) {
            out.push(`[${k}="${attr}"]`);
        }
    }
    return out.join('');
}
/**
 * A safe form of location.href
 */ function getLocationHref() {
    try {
        return WINDOW.document.location.href;
    } catch (oO) {
        return '';
    }
}
/**
 * Gets a DOM element by using document.querySelector.
 *
 * This wrapper will first check for the existence of the function before
 * actually calling it so that we don't have to take care of this check,
 * every time we want to access the DOM.
 *
 * Reason: DOM/querySelector is not available in all environments.
 *
 * We have to cast to any because utils can be consumed by a variety of environments,
 * and we don't want to break TS users. If you know what element will be selected by
 * `document.querySelector`, specify it as part of the generic call. For example,
 * `const element = getDomElement<Element>('selector');`
 *
 * @param selector the selector string passed on to document.querySelector
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
function getDomElement(selector) {
    if (WINDOW.document && WINDOW.document.querySelector) {
        return WINDOW.document.querySelector(selector);
    }
    return null;
}
/**
 * Given a DOM element, traverses up the tree until it finds the first ancestor node
 * that has the `data-sentry-component` or `data-sentry-element` attribute with `data-sentry-component` taking
 * precedence. This attribute is added at build-time by projects that have the component name annotation plugin installed.
 *
 * @returns a string representation of the component for the provided DOM element, or `null` if not found
 */ function getComponentName(elem) {
    // @ts-expect-error WINDOW has HTMLElement
    if (!WINDOW.HTMLElement) {
        return null;
    }
    let currentElem = elem;
    const MAX_TRAVERSE_HEIGHT = 5;
    for(let i = 0; i < MAX_TRAVERSE_HEIGHT; i++){
        if (!currentElem) {
            return null;
        }
        if (currentElem instanceof HTMLElement) {
            if (currentElem.dataset['sentryComponent']) {
                return currentElem.dataset['sentryComponent'];
            }
            if (currentElem.dataset['sentryElement']) {
                return currentElem.dataset['sentryElement'];
            }
        }
        currentElem = currentElem.parentNode;
    }
    return null;
}
exports.getComponentName = getComponentName;
exports.getDomElement = getDomElement;
exports.getLocationHref = getLocationHref;
exports.htmlTreeAsString = htmlTreeAsString; //# sourceMappingURL=browser.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/string.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
/**
 * Truncates given string to the maximum characters count
 *
 * @param str An object that contains serializable values
 * @param max Maximum number of characters in truncated string (0 = unlimited)
 * @returns string Encoded
 */ function truncate(str, max = 0) {
    if (typeof str !== 'string' || max === 0) {
        return str;
    }
    return str.length <= max ? str : `${str.slice(0, max)}...`;
}
/**
 * This is basically just `trim_line` from
 * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67
 *
 * @param str An object that contains serializable values
 * @param max Maximum number of characters in truncated string
 * @returns string Encoded
 */ function snipLine(line, colno) {
    let newLine = line;
    const lineLength = newLine.length;
    if (lineLength <= 150) {
        return newLine;
    }
    if (colno > lineLength) {
        // eslint-disable-next-line no-param-reassign
        colno = lineLength;
    }
    let start = Math.max(colno - 60, 0);
    if (start < 5) {
        start = 0;
    }
    let end = Math.min(start + 140, lineLength);
    if (end > lineLength - 5) {
        end = lineLength;
    }
    if (end === lineLength) {
        start = Math.max(end - 140, 0);
    }
    newLine = newLine.slice(start, end);
    if (start > 0) {
        newLine = `'{snip} ${newLine}`;
    }
    if (end < lineLength) {
        newLine += ' {snip}';
    }
    return newLine;
}
/**
 * Join values in array
 * @param input array of values to be joined together
 * @param delimiter string to be placed in-between values
 * @returns Joined values
 */ function safeJoin(input, delimiter) {
    if (!Array.isArray(input)) {
        return '';
    }
    const output = [];
    // eslint-disable-next-line @typescript-eslint/prefer-for-of
    for(let i = 0; i < input.length; i++){
        const value = input[i];
        try {
            // This is a hack to fix a Vue3-specific bug that causes an infinite loop of
            // console warnings. This happens when a Vue template is rendered with
            // an undeclared variable, which we try to stringify, ultimately causing
            // Vue to issue another warning which repeats indefinitely.
            // see: https://github.com/getsentry/sentry-javascript/pull/8981
            if (is.isVueViewModel(value)) {
                output.push('[VueViewModel]');
            } else {
                output.push(String(value));
            }
        } catch (e) {
            output.push('[value cannot be serialized]');
        }
    }
    return output.join(delimiter);
}
/**
 * Checks if the given value matches a regex or string
 *
 * @param value The string to test
 * @param pattern Either a regex or a string against which `value` will be matched
 * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match
 * `pattern` if it contains `pattern`. Only applies to string-type patterns.
 */ function isMatchingPattern(value, pattern, requireExactStringMatch = false) {
    if (!is.isString(value)) {
        return false;
    }
    if (is.isRegExp(pattern)) {
        return pattern.test(value);
    }
    if (is.isString(pattern)) {
        return requireExactStringMatch ? value === pattern : value.includes(pattern);
    }
    return false;
}
/**
 * Test the given string against an array of strings and regexes. By default, string matching is done on a
 * substring-inclusion basis rather than a strict equality basis
 *
 * @param testString The string to test
 * @param patterns The patterns against which to test the string
 * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to
 * count. If false, `testString` will match a string pattern if it contains that pattern.
 * @returns
 */ function stringMatchesSomePattern(testString, patterns = [], requireExactStringMatch = false) {
    return patterns.some((pattern)=>isMatchingPattern(testString, pattern, requireExactStringMatch));
}
exports.isMatchingPattern = isMatchingPattern;
exports.safeJoin = safeJoin;
exports.snipLine = snipLine;
exports.stringMatchesSomePattern = stringMatchesSomePattern;
exports.truncate = truncate; //# sourceMappingURL=string.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const browser = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/browser.js [app-ssr] (ecmascript)");
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js [app-ssr] (ecmascript)");
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const string = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/string.js [app-ssr] (ecmascript)");
/**
 * Replace a method in an object with a wrapped version of itself.
 *
 * @param source An object that contains a method to be wrapped.
 * @param name The name of the method to be wrapped.
 * @param replacementFactory A higher-order function that takes the original version of the given method and returns a
 * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to
 * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other
 * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.
 * @returns void
 */ function fill(source, name, replacementFactory) {
    if (!(name in source)) {
        return;
    }
    const original = source[name];
    const wrapped = replacementFactory(original);
    // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work
    // otherwise it'll throw "TypeError: Object.defineProperties called on non-object"
    if (typeof wrapped === 'function') {
        markFunctionWrapped(wrapped, original);
    }
    try {
        source[name] = wrapped;
    } catch (e) {
        debugBuild.DEBUG_BUILD && logger.logger.log(`Failed to replace method "${name}" in object`, source);
    }
}
/**
 * Defines a non-enumerable property on the given object.
 *
 * @param obj The object on which to set the property
 * @param name The name of the property to be set
 * @param value The value to which to set the property
 */ function addNonEnumerableProperty(obj, name, value) {
    try {
        Object.defineProperty(obj, name, {
            // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it
            value: value,
            writable: true,
            configurable: true
        });
    } catch (o_O) {
        debugBuild.DEBUG_BUILD && logger.logger.log(`Failed to add non-enumerable property "${name}" to object`, obj);
    }
}
/**
 * Remembers the original function on the wrapped function and
 * patches up the prototype.
 *
 * @param wrapped the wrapper function
 * @param original the original function that gets wrapped
 */ function markFunctionWrapped(wrapped, original) {
    try {
        const proto = original.prototype || {};
        wrapped.prototype = original.prototype = proto;
        addNonEnumerableProperty(wrapped, '__sentry_original__', original);
    } catch (o_O) {} // eslint-disable-line no-empty
}
/**
 * This extracts the original function if available.  See
 * `markFunctionWrapped` for more information.
 *
 * @param func the function to unwrap
 * @returns the unwrapped version of the function if available.
 */ // eslint-disable-next-line @typescript-eslint/ban-types
function getOriginalFunction(func) {
    return func.__sentry_original__;
}
/**
 * Encodes given object into url-friendly format
 *
 * @param object An object that contains serializable values
 * @returns string Encoded
 *
 * @deprecated This function is deprecated and will be removed in the next major version of the SDK.
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
function urlEncode(object) {
    return Object.entries(object).map(([key, value])=>`${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join('&');
}
/**
 * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their
 * non-enumerable properties attached.
 *
 * @param value Initial source that we have to transform in order for it to be usable by the serializer
 * @returns An Event or Error turned into an object - or the value argument itself, when value is neither an Event nor
 *  an Error.
 */ function convertToPlainObject(value) {
    if (is.isError(value)) {
        return {
            message: value.message,
            name: value.name,
            stack: value.stack,
            ...getOwnProperties(value)
        };
    } else if (is.isEvent(value)) {
        const newObj = {
            type: value.type,
            target: serializeEventTarget(value.target),
            currentTarget: serializeEventTarget(value.currentTarget),
            ...getOwnProperties(value)
        };
        if (typeof CustomEvent !== 'undefined' && is.isInstanceOf(value, CustomEvent)) {
            newObj.detail = value.detail;
        }
        return newObj;
    } else {
        return value;
    }
}
/** Creates a string representation of the target of an `Event` object */ function serializeEventTarget(target) {
    try {
        return is.isElement(target) ? browser.htmlTreeAsString(target) : Object.prototype.toString.call(target);
    } catch (_oO) {
        return '<unknown>';
    }
}
/** Filters out all but an object's own properties */ function getOwnProperties(obj) {
    if (typeof obj === 'object' && obj !== null) {
        const extractedProps = {};
        for(const property in obj){
            if (Object.prototype.hasOwnProperty.call(obj, property)) {
                extractedProps[property] = obj[property];
            }
        }
        return extractedProps;
    } else {
        return {};
    }
}
/**
 * Given any captured exception, extract its keys and create a sorted
 * and truncated list that will be used inside the event message.
 * eg. `Non-error exception captured with keys: foo, bar, baz`
 */ function extractExceptionKeysForMessage(exception, maxLength = 40) {
    const keys = Object.keys(convertToPlainObject(exception));
    keys.sort();
    const firstKey = keys[0];
    if (!firstKey) {
        return '[object has no keys]';
    }
    if (firstKey.length >= maxLength) {
        return string.truncate(firstKey, maxLength);
    }
    for(let includedKeys = keys.length; includedKeys > 0; includedKeys--){
        const serialized = keys.slice(0, includedKeys).join(', ');
        if (serialized.length > maxLength) {
            continue;
        }
        if (includedKeys === keys.length) {
            return serialized;
        }
        return string.truncate(serialized, maxLength);
    }
    return '';
}
/**
 * Given any object, return a new object having removed all fields whose value was `undefined`.
 * Works recursively on objects and arrays.
 *
 * Attention: This function keeps circular references in the returned object.
 */ function dropUndefinedKeys(inputValue) {
    // This map keeps track of what already visited nodes map to.
    // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular
    // references as the input object.
    const memoizationMap = new Map();
    // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API
    return _dropUndefinedKeys(inputValue, memoizationMap);
}
function _dropUndefinedKeys(inputValue, memoizationMap) {
    if (isPojo(inputValue)) {
        // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object
        const memoVal = memoizationMap.get(inputValue);
        if (memoVal !== undefined) {
            return memoVal;
        }
        const returnValue = {};
        // Store the mapping of this value in case we visit it again, in case of circular data
        memoizationMap.set(inputValue, returnValue);
        for (const key of Object.getOwnPropertyNames(inputValue)){
            if (typeof inputValue[key] !== 'undefined') {
                returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);
            }
        }
        return returnValue;
    }
    if (Array.isArray(inputValue)) {
        // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object
        const memoVal = memoizationMap.get(inputValue);
        if (memoVal !== undefined) {
            return memoVal;
        }
        const returnValue = [];
        // Store the mapping of this value in case we visit it again, in case of circular data
        memoizationMap.set(inputValue, returnValue);
        inputValue.forEach((item)=>{
            returnValue.push(_dropUndefinedKeys(item, memoizationMap));
        });
        return returnValue;
    }
    return inputValue;
}
function isPojo(input) {
    if (!is.isPlainObject(input)) {
        return false;
    }
    try {
        const name = Object.getPrototypeOf(input).constructor.name;
        return !name || name === 'Object';
    } catch (e2) {
        return true;
    }
}
/**
 * Ensure that something is an object.
 *
 * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper
 * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.
 *
 * @param wat The subject of the objectification
 * @returns A version of `wat` which can safely be used with `Object` class methods
 */ function objectify(wat) {
    let objectified;
    switch(true){
        // this will catch both undefined and null
        case wat == undefined:
            objectified = new String(wat);
            break;
        // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason
        // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as
        // an object in order to wrap it.
        case typeof wat === 'symbol' || typeof wat === 'bigint':
            objectified = Object(wat);
            break;
        // this will catch the remaining primitives: `String`, `Number`, and `Boolean`
        case is.isPrimitive(wat):
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            objectified = new wat.constructor(wat);
            break;
        // by process of elimination, at this point we know that `wat` must already be an object
        default:
            objectified = wat;
            break;
    }
    return objectified;
}
exports.addNonEnumerableProperty = addNonEnumerableProperty;
exports.convertToPlainObject = convertToPlainObject;
exports.dropUndefinedKeys = dropUndefinedKeys;
exports.extractExceptionKeysForMessage = extractExceptionKeysForMessage;
exports.fill = fill;
exports.getOriginalFunction = getOriginalFunction;
exports.markFunctionWrapped = markFunctionWrapped;
exports.objectify = objectify;
exports.urlEncode = urlEncode; //# sourceMappingURL=object.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
const ONE_SECOND_IN_MS = 1000;
/**
 * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}
 * for accessing a high-resolution monotonic clock.
 */ /**
 * Returns a timestamp in seconds since the UNIX epoch using the Date API.
 *
 * TODO(v8): Return type should be rounded.
 */ function dateTimestampInSeconds() {
    return Date.now() / ONE_SECOND_IN_MS;
}
/**
 * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not
 * support the API.
 *
 * Wrapping the native API works around differences in behavior from different browsers.
 */ function createUnixTimestampInSecondsFunc() {
    const { performance } = worldwide.GLOBAL_OBJ;
    if (!performance || !performance.now) {
        return dateTimestampInSeconds;
    }
    // Some browser and environments don't have a timeOrigin, so we fallback to
    // using Date.now() to compute the starting time.
    const approxStartingTimeOrigin = Date.now() - performance.now();
    const timeOrigin = performance.timeOrigin == undefined ? approxStartingTimeOrigin : performance.timeOrigin;
    // performance.now() is a monotonic clock, which means it starts at 0 when the process begins. To get the current
    // wall clock time (actual UNIX timestamp), we need to add the starting time origin and the current time elapsed.
    //
    // TODO: This does not account for the case where the monotonic clock that powers performance.now() drifts from the
    // wall clock time, which causes the returned timestamp to be inaccurate. We should investigate how to detect and
    // correct for this.
    // See: https://github.com/getsentry/sentry-javascript/issues/2590
    // See: https://github.com/mdn/content/issues/4713
    // See: https://dev.to/noamr/when-a-millisecond-is-not-a-millisecond-3h6
    return ()=>{
        return (timeOrigin + performance.now()) / ONE_SECOND_IN_MS;
    };
}
/**
 * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the
 * availability of the Performance API.
 *
 * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is
 * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The
 * skew can grow to arbitrary amounts like days, weeks or months.
 * See https://github.com/getsentry/sentry-javascript/issues/2590.
 */ const timestampInSeconds = createUnixTimestampInSecondsFunc();
/**
 * Internal helper to store what is the source of browserPerformanceTimeOrigin below. For debugging only.
 *
 * @deprecated This variable will be removed in the next major version.
 */ exports._browserPerformanceTimeOriginMode = void 0;
/**
 * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the
 * performance API is available.
 */ const browserPerformanceTimeOrigin = (()=>{
    // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or
    // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin
    // data as reliable if they are within a reasonable threshold of the current time.
    const { performance } = worldwide.GLOBAL_OBJ;
    if (!performance || !performance.now) {
        // eslint-disable-next-line deprecation/deprecation
        exports._browserPerformanceTimeOriginMode = 'none';
        return undefined;
    }
    const threshold = 3600 * 1000;
    const performanceNow = performance.now();
    const dateNow = Date.now();
    // if timeOrigin isn't available set delta to threshold so it isn't used
    const timeOriginDelta = performance.timeOrigin ? Math.abs(performance.timeOrigin + performanceNow - dateNow) : threshold;
    const timeOriginIsReliable = timeOriginDelta < threshold;
    // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin
    // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.
    // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always
    // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the
    // Date API.
    // eslint-disable-next-line deprecation/deprecation
    const navigationStart = performance.timing && performance.timing.navigationStart;
    const hasNavigationStart = typeof navigationStart === 'number';
    // if navigationStart isn't available set delta to threshold so it isn't used
    const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;
    const navigationStartIsReliable = navigationStartDelta < threshold;
    if (timeOriginIsReliable || navigationStartIsReliable) {
        // Use the more reliable time origin
        if (timeOriginDelta <= navigationStartDelta) {
            // eslint-disable-next-line deprecation/deprecation
            exports._browserPerformanceTimeOriginMode = 'timeOrigin';
            return performance.timeOrigin;
        } else {
            // eslint-disable-next-line deprecation/deprecation
            exports._browserPerformanceTimeOriginMode = 'navigationStart';
            return navigationStart;
        }
    }
    // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.
    // eslint-disable-next-line deprecation/deprecation
    exports._browserPerformanceTimeOriginMode = 'dateNow';
    return dateNow;
})();
exports.browserPerformanceTimeOrigin = browserPerformanceTimeOrigin;
exports.dateTimestampInSeconds = dateTimestampInSeconds;
exports.timestampInSeconds = timestampInSeconds; //# sourceMappingURL=time.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/misc.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
const string = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/string.js [app-ssr] (ecmascript)");
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
/**
 * UUID4 generator
 *
 * @returns string Generated UUID4.
 */ function uuid4() {
    const gbl = worldwide.GLOBAL_OBJ;
    const crypto = gbl.crypto || gbl.msCrypto;
    let getRandomByte = ()=>Math.random() * 16;
    try {
        if (crypto && crypto.randomUUID) {
            return crypto.randomUUID().replace(/-/g, '');
        }
        if (crypto && crypto.getRandomValues) {
            getRandomByte = ()=>{
                // crypto.getRandomValues might return undefined instead of the typed array
                // in old Chromium versions (e.g. 23.0.1235.0 (151422))
                // However, `typedArray` is still filled in-place.
                // @see https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues#typedarray
                const typedArray = new Uint8Array(1);
                crypto.getRandomValues(typedArray);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                return typedArray[0];
            };
        }
    } catch (_) {
    // some runtimes can crash invoking crypto
    // https://github.com/getsentry/sentry-javascript/issues/8935
    }
    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523
    // Concatenating the following numbers as strings results in '10000000100040008000100000000000'
    return ([
        1e7
    ] + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, (c)=>// eslint-disable-next-line no-bitwise
        (c ^ (getRandomByte() & 15) >> c / 4).toString(16));
}
function getFirstException(event) {
    return event.exception && event.exception.values ? event.exception.values[0] : undefined;
}
/**
 * Extracts either message or type+value from an event that can be used for user-facing logs
 * @returns event's description
 */ function getEventDescription(event) {
    const { message, event_id: eventId } = event;
    if (message) {
        return message;
    }
    const firstException = getFirstException(event);
    if (firstException) {
        if (firstException.type && firstException.value) {
            return `${firstException.type}: ${firstException.value}`;
        }
        return firstException.type || firstException.value || eventId || '<unknown>';
    }
    return eventId || '<unknown>';
}
/**
 * Adds exception values, type and value to an synthetic Exception.
 * @param event The event to modify.
 * @param value Value of the exception.
 * @param type Type of the exception.
 * @hidden
 */ function addExceptionTypeValue(event, value, type) {
    const exception = event.exception = event.exception || {};
    const values = exception.values = exception.values || [];
    const firstException = values[0] = values[0] || {};
    if (!firstException.value) {
        firstException.value = value || '';
    }
    if (!firstException.type) {
        firstException.type = type || 'Error';
    }
}
/**
 * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.
 *
 * @param event The event to modify.
 * @param newMechanism Mechanism data to add to the event.
 * @hidden
 */ function addExceptionMechanism(event, newMechanism) {
    const firstException = getFirstException(event);
    if (!firstException) {
        return;
    }
    const defaultMechanism = {
        type: 'generic',
        handled: true
    };
    const currentMechanism = firstException.mechanism;
    firstException.mechanism = {
        ...defaultMechanism,
        ...currentMechanism,
        ...newMechanism
    };
    if (newMechanism && 'data' in newMechanism) {
        const mergedData = {
            ...currentMechanism && currentMechanism.data,
            ...newMechanism.data
        };
        firstException.mechanism.data = mergedData;
    }
}
// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
const SEMVER_REGEXP = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;
/**
 * Represents Semantic Versioning object
 */ function _parseInt(input) {
    return parseInt(input || '', 10);
}
/**
 * Parses input into a SemVer interface
 * @param input string representation of a semver version
 */ function parseSemver(input) {
    const match = input.match(SEMVER_REGEXP) || [];
    const major = _parseInt(match[1]);
    const minor = _parseInt(match[2]);
    const patch = _parseInt(match[3]);
    return {
        buildmetadata: match[5],
        major: isNaN(major) ? undefined : major,
        minor: isNaN(minor) ? undefined : minor,
        patch: isNaN(patch) ? undefined : patch,
        prerelease: match[4]
    };
}
/**
 * This function adds context (pre/post/line) lines to the provided frame
 *
 * @param lines string[] containing all lines
 * @param frame StackFrame that will be mutated
 * @param linesOfContext number of context lines we want to add pre/post
 */ function addContextToFrame(lines, frame, linesOfContext = 5) {
    // When there is no line number in the frame, attaching context is nonsensical and will even break grouping
    if (frame.lineno === undefined) {
        return;
    }
    const maxLines = lines.length;
    const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);
    frame.pre_context = lines.slice(Math.max(0, sourceLine - linesOfContext), sourceLine).map((line)=>string.snipLine(line, 0));
    // We guard here to ensure this is not larger than the existing number of lines
    const lineIndex = Math.min(maxLines - 1, sourceLine);
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    frame.context_line = string.snipLine(lines[lineIndex], frame.colno || 0);
    frame.post_context = lines.slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext).map((line)=>string.snipLine(line, 0));
}
/**
 * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object
 * in question), and marks it captured if not.
 *
 * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and
 * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so
 * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because
 * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not
 * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This
 * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we
 * see it.
 *
 * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on
 * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent
 * object wrapper forms so that this check will always work. However, because we need to flag the exact object which
 * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification
 * must be done before the exception captured.
 *
 * @param A thrown exception to check or flag as having been seen
 * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)
 */ function checkOrSetAlreadyCaught(exception) {
    if (isAlreadyCaptured(exception)) {
        return true;
    }
    try {
        // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the
        // `ExtraErrorData` integration
        object.addNonEnumerableProperty(exception, '__sentry_captured__', true);
    } catch (err) {
    // `exception` is a primitive, so we can't mark it seen
    }
    return false;
}
function isAlreadyCaptured(exception) {
    try {
        return exception.__sentry_captured__;
    } catch (e) {} // eslint-disable-line no-empty
}
/**
 * Checks whether the given input is already an array, and if it isn't, wraps it in one.
 *
 * @param maybeArray Input to turn into an array, if necessary
 * @returns The input, if already an array, or an array with the input as the only element, if not
 *
 * @deprecated This function has been deprecated and will not be replaced.
 */ function arrayify(maybeArray) {
    return Array.isArray(maybeArray) ? maybeArray : [
        maybeArray
    ];
}
exports.addContextToFrame = addContextToFrame;
exports.addExceptionMechanism = addExceptionMechanism;
exports.addExceptionTypeValue = addExceptionTypeValue;
exports.arrayify = arrayify;
exports.checkOrSetAlreadyCaught = checkOrSetAlreadyCaught;
exports.getEventDescription = getEventDescription;
exports.parseSemver = parseSemver;
exports.uuid4 = uuid4; //# sourceMappingURL=misc.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
/* eslint-disable @typescript-eslint/explicit-function-return-type */ /* eslint-disable @typescript-eslint/no-explicit-any */ /** SyncPromise internal states */ var States;
(function(States) {
    /** Pending */ const PENDING = 0;
    States[States["PENDING"] = PENDING] = "PENDING";
    /** Resolved / OK */ const RESOLVED = 1;
    States[States["RESOLVED"] = RESOLVED] = "RESOLVED";
    /** Rejected / Error */ const REJECTED = 2;
    States[States["REJECTED"] = REJECTED] = "REJECTED";
})(States || (States = {}));
// Overloads so we can call resolvedSyncPromise without arguments and generic argument
/**
 * Creates a resolved sync promise.
 *
 * @param value the value to resolve the promise with
 * @returns the resolved sync promise
 */ function resolvedSyncPromise(value) {
    return new SyncPromise((resolve)=>{
        resolve(value);
    });
}
/**
 * Creates a rejected sync promise.
 *
 * @param value the value to reject the promise with
 * @returns the rejected sync promise
 */ function rejectedSyncPromise(reason) {
    return new SyncPromise((_, reject)=>{
        reject(reason);
    });
}
/**
 * Thenable class that behaves like a Promise and follows it's interface
 * but is not async internally
 */ class SyncPromise {
    constructor(executor){
        SyncPromise.prototype.__init.call(this);
        SyncPromise.prototype.__init2.call(this);
        SyncPromise.prototype.__init3.call(this);
        SyncPromise.prototype.__init4.call(this);
        this._state = States.PENDING;
        this._handlers = [];
        try {
            executor(this._resolve, this._reject);
        } catch (e) {
            this._reject(e);
        }
    }
    /** JSDoc */ then(onfulfilled, onrejected) {
        return new SyncPromise((resolve, reject)=>{
            this._handlers.push([
                false,
                (result)=>{
                    if (!onfulfilled) {
                        // TODO: ¯\_(ツ)_/¯
                        // TODO: FIXME
                        resolve(result);
                    } else {
                        try {
                            resolve(onfulfilled(result));
                        } catch (e) {
                            reject(e);
                        }
                    }
                },
                (reason)=>{
                    if (!onrejected) {
                        reject(reason);
                    } else {
                        try {
                            resolve(onrejected(reason));
                        } catch (e) {
                            reject(e);
                        }
                    }
                }
            ]);
            this._executeHandlers();
        });
    }
    /** JSDoc */ catch(onrejected) {
        return this.then((val)=>val, onrejected);
    }
    /** JSDoc */ finally(onfinally) {
        return new SyncPromise((resolve, reject)=>{
            let val;
            let isRejected;
            return this.then((value)=>{
                isRejected = false;
                val = value;
                if (onfinally) {
                    onfinally();
                }
            }, (reason)=>{
                isRejected = true;
                val = reason;
                if (onfinally) {
                    onfinally();
                }
            }).then(()=>{
                if (isRejected) {
                    reject(val);
                    return;
                }
                resolve(val);
            });
        });
    }
    /** JSDoc */ __init() {
        this._resolve = (value)=>{
            this._setResult(States.RESOLVED, value);
        };
    }
    /** JSDoc */ __init2() {
        this._reject = (reason)=>{
            this._setResult(States.REJECTED, reason);
        };
    }
    /** JSDoc */ __init3() {
        this._setResult = (state, value)=>{
            if (this._state !== States.PENDING) {
                return;
            }
            if (is.isThenable(value)) {
                void value.then(this._resolve, this._reject);
                return;
            }
            this._state = state;
            this._value = value;
            this._executeHandlers();
        };
    }
    /** JSDoc */ __init4() {
        this._executeHandlers = ()=>{
            if (this._state === States.PENDING) {
                return;
            }
            const cachedHandlers = this._handlers.slice();
            this._handlers = [];
            cachedHandlers.forEach((handler)=>{
                if (handler[0]) {
                    return;
                }
                if (this._state === States.RESOLVED) {
                    handler[1](this._value);
                }
                if (this._state === States.REJECTED) {
                    handler[2](this._value);
                }
                handler[0] = true;
            });
        };
    }
}
exports.SyncPromise = SyncPromise;
exports.rejectedSyncPromise = rejectedSyncPromise;
exports.resolvedSyncPromise = resolvedSyncPromise; //# sourceMappingURL=syncpromise.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/session.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/version.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
const time = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)");
const misc = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/misc.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js [app-ssr] (ecmascript)");
/**
 * Creates a new `Session` object by setting certain default parameters. If optional @param context
 * is passed, the passed properties are applied to the session object.
 *
 * @param context (optional) additional properties to be applied to the returned session object
 *
 * @returns a new `Session` object
 */ function makeSession(context) {
    // Both timestamp and started are in seconds since the UNIX epoch.
    const startingTime = time.timestampInSeconds();
    const session = {
        sid: misc.uuid4(),
        init: true,
        timestamp: startingTime,
        started: startingTime,
        duration: 0,
        status: 'ok',
        errors: 0,
        ignoreDuration: false,
        toJSON: ()=>sessionToJSON(session)
    };
    if (context) {
        updateSession(session, context);
    }
    return session;
}
/**
 * Updates a session object with the properties passed in the context.
 *
 * Note that this function mutates the passed object and returns void.
 * (Had to do this instead of returning a new and updated session because closing and sending a session
 * makes an update to the session after it was passed to the sending logic.
 * @see BaseClient.captureSession )
 *
 * @param session the `Session` to update
 * @param context the `SessionContext` holding the properties that should be updated in @param session
 */ // eslint-disable-next-line complexity
function updateSession(session, context = {}) {
    if (context.user) {
        if (!session.ipAddress && context.user.ip_address) {
            session.ipAddress = context.user.ip_address;
        }
        if (!session.did && !context.did) {
            session.did = context.user.id || context.user.email || context.user.username;
        }
    }
    session.timestamp = context.timestamp || time.timestampInSeconds();
    if (context.abnormal_mechanism) {
        session.abnormal_mechanism = context.abnormal_mechanism;
    }
    if (context.ignoreDuration) {
        session.ignoreDuration = context.ignoreDuration;
    }
    if (context.sid) {
        // Good enough uuid validation. — Kamil
        session.sid = context.sid.length === 32 ? context.sid : misc.uuid4();
    }
    if (context.init !== undefined) {
        session.init = context.init;
    }
    if (!session.did && context.did) {
        session.did = `${context.did}`;
    }
    if (typeof context.started === 'number') {
        session.started = context.started;
    }
    if (session.ignoreDuration) {
        session.duration = undefined;
    } else if (typeof context.duration === 'number') {
        session.duration = context.duration;
    } else {
        const duration = session.timestamp - session.started;
        session.duration = duration >= 0 ? duration : 0;
    }
    if (context.release) {
        session.release = context.release;
    }
    if (context.environment) {
        session.environment = context.environment;
    }
    if (!session.ipAddress && context.ipAddress) {
        session.ipAddress = context.ipAddress;
    }
    if (!session.userAgent && context.userAgent) {
        session.userAgent = context.userAgent;
    }
    if (typeof context.errors === 'number') {
        session.errors = context.errors;
    }
    if (context.status) {
        session.status = context.status;
    }
}
/**
 * Closes a session by setting its status and updating the session object with it.
 * Internally calls `updateSession` to update the passed session object.
 *
 * Note that this function mutates the passed session (@see updateSession for explanation).
 *
 * @param session the `Session` object to be closed
 * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,
 *               this function will keep the previously set status, unless it was `'ok'` in which case
 *               it is changed to `'exited'`.
 */ function closeSession(session, status) {
    let context = {};
    if (status) {
        context = {
            status
        };
    } else if (session.status === 'ok') {
        context = {
            status: 'exited'
        };
    }
    updateSession(session, context);
}
/**
 * Serializes a passed session object to a JSON object with a slightly different structure.
 * This is necessary because the Sentry backend requires a slightly different schema of a session
 * than the one the JS SDKs use internally.
 *
 * @param session the session to be converted
 *
 * @returns a JSON object of the passed session
 */ function sessionToJSON(session) {
    return object.dropUndefinedKeys({
        sid: `${session.sid}`,
        init: session.init,
        // Make sure that sec is converted to ms for date constructor
        started: new Date(session.started * 1000).toISOString(),
        timestamp: new Date(session.timestamp * 1000).toISOString(),
        status: session.status,
        errors: session.errors,
        did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,
        duration: session.duration,
        abnormal_mechanism: session.abnormal_mechanism,
        attrs: {
            release: session.release,
            environment: session.environment,
            ip_address: session.ipAddress,
            user_agent: session.userAgent
        }
    });
}
exports.closeSession = closeSession;
exports.makeSession = makeSession;
exports.updateSession = updateSession; //# sourceMappingURL=session.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const misc = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/misc.js [app-ssr] (ecmascript)");
/**
 * Returns a new minimal propagation context.
 *
 * @deprecated Use `generateTraceId` and `generateSpanId` instead.
 */ function generatePropagationContext() {
    return {
        traceId: generateTraceId(),
        spanId: generateSpanId()
    };
}
/**
 * Generate a random, valid trace ID.
 */ function generateTraceId() {
    return misc.uuid4();
}
/**
 * Generate a random, valid span ID.
 */ function generateSpanId() {
    return misc.uuid4().substring(16);
}
exports.generatePropagationContext = generatePropagationContext;
exports.generateSpanId = generateSpanId;
exports.generateTraceId = generateTraceId; //# sourceMappingURL=propagationContext.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils/merge.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
/**
 * Shallow merge two objects.
 * Does not mutate the passed in objects.
 * Undefined/empty values in the merge object will overwrite existing values.
 *
 * By default, this merges 2 levels deep.
 */ function merge(initialObj, mergeObj, levels = 2) {
    // If the merge value is not an object, or we have no merge levels left,
    // we just set the value to the merge value
    if (!mergeObj || typeof mergeObj !== 'object' || levels <= 0) {
        return mergeObj;
    }
    // If the merge object is an empty object, and the initial object is not undefined, we return the initial object
    if (initialObj && mergeObj && Object.keys(mergeObj).length === 0) {
        return initialObj;
    }
    // Clone object
    const output = {
        ...initialObj
    };
    // Merge values into output, resursively
    for(const key in mergeObj){
        if (Object.prototype.hasOwnProperty.call(mergeObj, key)) {
            output[key] = merge(output[key], mergeObj[key], levels - 1);
        }
    }
    return output;
}
exports.merge = merge; //# sourceMappingURL=merge.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils/spanOnScope.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
const SCOPE_SPAN_FIELD = '_sentrySpan';
/**
 * Set the active span for a given scope.
 * NOTE: This should NOT be used directly, but is only used internally by the trace methods.
 */ function _setSpanForScope(scope, span) {
    if (span) {
        object.addNonEnumerableProperty(scope, SCOPE_SPAN_FIELD, span);
    } else {
        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
        delete scope[SCOPE_SPAN_FIELD];
    }
}
/**
 * Get the active span for a given scope.
 * NOTE: This should NOT be used directly, but is only used internally by the trace methods.
 */ function _getSpanForScope(scope) {
    return scope[SCOPE_SPAN_FIELD];
}
exports._getSpanForScope = _getSpanForScope;
exports._setSpanForScope = _setSpanForScope; //# sourceMappingURL=spanOnScope.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/scope.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const session = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/session.js [app-ssr] (ecmascript)");
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const misc = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/misc.js [app-ssr] (ecmascript)");
const propagationContext = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js [app-ssr] (ecmascript)");
const time = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)");
const merge = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/merge.js [app-ssr] (ecmascript)");
const spanOnScope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanOnScope.js [app-ssr] (ecmascript)");
/**
 * Default value for maximum number of breadcrumbs added to an event.
 */ const DEFAULT_MAX_BREADCRUMBS = 100;
/**
 * Holds additional event information.
 */ class ScopeClass {
    /** Flag if notifying is happening. */ /** Callback for client to receive scope changes. */ /** Callback list that will be called during event processing. */ /** Array of breadcrumbs. */ /** User */ /** Tags */ /** Extra */ /** Contexts */ /** Attachments */ /** Propagation Context for distributed tracing */ /**
   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get
   * sent to Sentry
   */ /** Fingerprint */ /** Severity */ /**
   * Transaction Name
   *
   * IMPORTANT: The transaction name on the scope has nothing to do with root spans/transaction objects.
   * It's purpose is to assign a transaction to the scope that's added to non-transaction events.
   */ /** Session */ /** Request Mode Session Status */ // eslint-disable-next-line deprecation/deprecation
    /** The client on this scope */ /** Contains the last event id of a captured event.  */ // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.
    constructor(){
        this._notifyingListeners = false;
        this._scopeListeners = [];
        this._eventProcessors = [];
        this._breadcrumbs = [];
        this._attachments = [];
        this._user = {};
        this._tags = {};
        this._extra = {};
        this._contexts = {};
        this._sdkProcessingMetadata = {};
        this._propagationContext = {
            traceId: propagationContext.generateTraceId(),
            spanId: propagationContext.generateSpanId()
        };
    }
    /**
   * @inheritDoc
   */ clone() {
        const newScope = new ScopeClass();
        newScope._breadcrumbs = [
            ...this._breadcrumbs
        ];
        newScope._tags = {
            ...this._tags
        };
        newScope._extra = {
            ...this._extra
        };
        newScope._contexts = {
            ...this._contexts
        };
        if (this._contexts.flags) {
            // We need to copy the `values` array so insertions on a cloned scope
            // won't affect the original array.
            newScope._contexts.flags = {
                values: [
                    ...this._contexts.flags.values
                ]
            };
        }
        newScope._user = this._user;
        newScope._level = this._level;
        newScope._session = this._session;
        newScope._transactionName = this._transactionName;
        newScope._fingerprint = this._fingerprint;
        newScope._eventProcessors = [
            ...this._eventProcessors
        ];
        newScope._requestSession = this._requestSession;
        newScope._attachments = [
            ...this._attachments
        ];
        newScope._sdkProcessingMetadata = {
            ...this._sdkProcessingMetadata
        };
        newScope._propagationContext = {
            ...this._propagationContext
        };
        newScope._client = this._client;
        newScope._lastEventId = this._lastEventId;
        spanOnScope._setSpanForScope(newScope, spanOnScope._getSpanForScope(this));
        return newScope;
    }
    /**
   * @inheritDoc
   */ setClient(client) {
        this._client = client;
    }
    /**
   * @inheritDoc
   */ setLastEventId(lastEventId) {
        this._lastEventId = lastEventId;
    }
    /**
   * @inheritDoc
   */ getClient() {
        return this._client;
    }
    /**
   * @inheritDoc
   */ lastEventId() {
        return this._lastEventId;
    }
    /**
   * @inheritDoc
   */ addScopeListener(callback) {
        this._scopeListeners.push(callback);
    }
    /**
   * @inheritDoc
   */ addEventProcessor(callback) {
        this._eventProcessors.push(callback);
        return this;
    }
    /**
   * @inheritDoc
   */ setUser(user) {
        // If null is passed we want to unset everything, but still define keys,
        // so that later down in the pipeline any existing values are cleared.
        this._user = user || {
            email: undefined,
            id: undefined,
            ip_address: undefined,
            username: undefined
        };
        if (this._session) {
            session.updateSession(this._session, {
                user
            });
        }
        this._notifyScopeListeners();
        return this;
    }
    /**
   * @inheritDoc
   */ getUser() {
        return this._user;
    }
    /**
   * @inheritDoc
   */ // eslint-disable-next-line deprecation/deprecation
    getRequestSession() {
        return this._requestSession;
    }
    /**
   * @inheritDoc
   */ // eslint-disable-next-line deprecation/deprecation
    setRequestSession(requestSession) {
        this._requestSession = requestSession;
        return this;
    }
    /**
   * @inheritDoc
   */ setTags(tags) {
        this._tags = {
            ...this._tags,
            ...tags
        };
        this._notifyScopeListeners();
        return this;
    }
    /**
   * @inheritDoc
   */ setTag(key, value) {
        this._tags = {
            ...this._tags,
            [key]: value
        };
        this._notifyScopeListeners();
        return this;
    }
    /**
   * @inheritDoc
   */ setExtras(extras) {
        this._extra = {
            ...this._extra,
            ...extras
        };
        this._notifyScopeListeners();
        return this;
    }
    /**
   * @inheritDoc
   */ setExtra(key, extra) {
        this._extra = {
            ...this._extra,
            [key]: extra
        };
        this._notifyScopeListeners();
        return this;
    }
    /**
   * @inheritDoc
   */ setFingerprint(fingerprint) {
        this._fingerprint = fingerprint;
        this._notifyScopeListeners();
        return this;
    }
    /**
   * @inheritDoc
   */ setLevel(level) {
        this._level = level;
        this._notifyScopeListeners();
        return this;
    }
    /**
   * @inheritDoc
   */ setTransactionName(name) {
        this._transactionName = name;
        this._notifyScopeListeners();
        return this;
    }
    /**
   * @inheritDoc
   */ setContext(key, context) {
        if (context === null) {
            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
            delete this._contexts[key];
        } else {
            this._contexts[key] = context;
        }
        this._notifyScopeListeners();
        return this;
    }
    /**
   * @inheritDoc
   */ setSession(session) {
        if (!session) {
            delete this._session;
        } else {
            this._session = session;
        }
        this._notifyScopeListeners();
        return this;
    }
    /**
   * @inheritDoc
   */ getSession() {
        return this._session;
    }
    /**
   * @inheritDoc
   */ update(captureContext) {
        if (!captureContext) {
            return this;
        }
        const scopeToMerge = typeof captureContext === 'function' ? captureContext(this) : captureContext;
        const [scopeInstance, requestSession] = scopeToMerge instanceof Scope ? [
            scopeToMerge.getScopeData(),
            scopeToMerge.getRequestSession()
        ] : is.isPlainObject(scopeToMerge) ? [
            captureContext,
            captureContext.requestSession
        ] : [];
        const { tags, extra, user, contexts, level, fingerprint = [], propagationContext } = scopeInstance || {};
        this._tags = {
            ...this._tags,
            ...tags
        };
        this._extra = {
            ...this._extra,
            ...extra
        };
        this._contexts = {
            ...this._contexts,
            ...contexts
        };
        if (user && Object.keys(user).length) {
            this._user = user;
        }
        if (level) {
            this._level = level;
        }
        if (fingerprint.length) {
            this._fingerprint = fingerprint;
        }
        if (propagationContext) {
            this._propagationContext = propagationContext;
        }
        if (requestSession) {
            this._requestSession = requestSession;
        }
        return this;
    }
    /**
   * @inheritDoc
   */ clear() {
        // client is not cleared here on purpose!
        this._breadcrumbs = [];
        this._tags = {};
        this._extra = {};
        this._user = {};
        this._contexts = {};
        this._level = undefined;
        this._transactionName = undefined;
        this._fingerprint = undefined;
        this._requestSession = undefined;
        this._session = undefined;
        spanOnScope._setSpanForScope(this, undefined);
        this._attachments = [];
        this.setPropagationContext({
            traceId: propagationContext.generateTraceId()
        });
        this._notifyScopeListeners();
        return this;
    }
    /**
   * @inheritDoc
   */ addBreadcrumb(breadcrumb, maxBreadcrumbs) {
        const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;
        // No data has been changed, so don't notify scope listeners
        if (maxCrumbs <= 0) {
            return this;
        }
        const mergedBreadcrumb = {
            timestamp: time.dateTimestampInSeconds(),
            ...breadcrumb
        };
        const breadcrumbs = this._breadcrumbs;
        breadcrumbs.push(mergedBreadcrumb);
        this._breadcrumbs = breadcrumbs.length > maxCrumbs ? breadcrumbs.slice(-maxCrumbs) : breadcrumbs;
        this._notifyScopeListeners();
        return this;
    }
    /**
   * @inheritDoc
   */ getLastBreadcrumb() {
        return this._breadcrumbs[this._breadcrumbs.length - 1];
    }
    /**
   * @inheritDoc
   */ clearBreadcrumbs() {
        this._breadcrumbs = [];
        this._notifyScopeListeners();
        return this;
    }
    /**
   * @inheritDoc
   */ addAttachment(attachment) {
        this._attachments.push(attachment);
        return this;
    }
    /**
   * @inheritDoc
   */ clearAttachments() {
        this._attachments = [];
        return this;
    }
    /** @inheritDoc */ getScopeData() {
        return {
            breadcrumbs: this._breadcrumbs,
            attachments: this._attachments,
            contexts: this._contexts,
            tags: this._tags,
            extra: this._extra,
            user: this._user,
            level: this._level,
            fingerprint: this._fingerprint || [],
            eventProcessors: this._eventProcessors,
            propagationContext: this._propagationContext,
            sdkProcessingMetadata: this._sdkProcessingMetadata,
            transactionName: this._transactionName,
            span: spanOnScope._getSpanForScope(this)
        };
    }
    /**
   * @inheritDoc
   */ setSDKProcessingMetadata(newData) {
        this._sdkProcessingMetadata = merge.merge(this._sdkProcessingMetadata, newData, 2);
        return this;
    }
    /**
   * @inheritDoc
   */ setPropagationContext(context) {
        this._propagationContext = {
            // eslint-disable-next-line deprecation/deprecation
            spanId: propagationContext.generateSpanId(),
            ...context
        };
        return this;
    }
    /**
   * @inheritDoc
   */ getPropagationContext() {
        return this._propagationContext;
    }
    /**
   * @inheritDoc
   */ captureException(exception, hint) {
        const eventId = hint && hint.event_id ? hint.event_id : misc.uuid4();
        if (!this._client) {
            logger.logger.warn('No client configured on scope - will not capture exception!');
            return eventId;
        }
        const syntheticException = new Error('Sentry syntheticException');
        this._client.captureException(exception, {
            originalException: exception,
            syntheticException,
            ...hint,
            event_id: eventId
        }, this);
        return eventId;
    }
    /**
   * @inheritDoc
   */ captureMessage(message, level, hint) {
        const eventId = hint && hint.event_id ? hint.event_id : misc.uuid4();
        if (!this._client) {
            logger.logger.warn('No client configured on scope - will not capture message!');
            return eventId;
        }
        const syntheticException = new Error(message);
        this._client.captureMessage(message, level, {
            originalException: message,
            syntheticException,
            ...hint,
            event_id: eventId
        }, this);
        return eventId;
    }
    /**
   * @inheritDoc
   */ captureEvent(event, hint) {
        const eventId = hint && hint.event_id ? hint.event_id : misc.uuid4();
        if (!this._client) {
            logger.logger.warn('No client configured on scope - will not capture event!');
            return eventId;
        }
        this._client.captureEvent(event, {
            ...hint,
            event_id: eventId
        }, this);
        return eventId;
    }
    /**
   * This will be called on every set call.
   */ _notifyScopeListeners() {
        // We need this check for this._notifyingListeners to be able to work on scope during updates
        // If this check is not here we'll produce endless recursion when something is done with the scope
        // during the callback.
        if (!this._notifyingListeners) {
            this._notifyingListeners = true;
            this._scopeListeners.forEach((callback)=>{
                callback(this);
            });
            this._notifyingListeners = false;
        }
    }
}
/**
 * Holds additional event information.
 */ const Scope = ScopeClass;
/**
 * Holds additional event information.
 */ exports.Scope = Scope; //# sourceMappingURL=scope.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/defaultScopes.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const scope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/scope.js [app-ssr] (ecmascript)");
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
/** Get the default current scope. */ function getDefaultCurrentScope() {
    return worldwide.getGlobalSingleton('defaultCurrentScope', ()=>new scope.Scope());
}
/** Get the default isolation scope. */ function getDefaultIsolationScope() {
    return worldwide.getGlobalSingleton('defaultIsolationScope', ()=>new scope.Scope());
}
exports.getDefaultCurrentScope = getDefaultCurrentScope;
exports.getDefaultIsolationScope = getDefaultIsolationScope; //# sourceMappingURL=defaultScopes.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/asyncContext/stackStrategy.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const defaultScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/defaultScopes.js [app-ssr] (ecmascript)");
const scope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/scope.js [app-ssr] (ecmascript)");
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
const carrier = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/carrier.js [app-ssr] (ecmascript)");
/**
 * This is an object that holds a stack of scopes.
 */ class AsyncContextStack {
    constructor(scope$1, isolationScope){
        let assignedScope;
        if (!scope$1) {
            assignedScope = new scope.Scope();
        } else {
            assignedScope = scope$1;
        }
        let assignedIsolationScope;
        if (!isolationScope) {
            assignedIsolationScope = new scope.Scope();
        } else {
            assignedIsolationScope = isolationScope;
        }
        // scope stack for domains or the process
        this._stack = [
            {
                scope: assignedScope
            }
        ];
        this._isolationScope = assignedIsolationScope;
    }
    /**
   * Fork a scope for the stack.
   */ withScope(callback) {
        const scope = this._pushScope();
        let maybePromiseResult;
        try {
            maybePromiseResult = callback(scope);
        } catch (e) {
            this._popScope();
            throw e;
        }
        if (is.isThenable(maybePromiseResult)) {
            // @ts-expect-error - isThenable returns the wrong type
            return maybePromiseResult.then((res)=>{
                this._popScope();
                return res;
            }, (e)=>{
                this._popScope();
                throw e;
            });
        }
        this._popScope();
        return maybePromiseResult;
    }
    /**
   * Get the client of the stack.
   */ getClient() {
        return this.getStackTop().client;
    }
    /**
   * Returns the scope of the top stack.
   */ getScope() {
        return this.getStackTop().scope;
    }
    /**
   * Get the isolation scope for the stack.
   */ getIsolationScope() {
        return this._isolationScope;
    }
    /**
   * Returns the topmost scope layer in the order domain > local > process.
   */ getStackTop() {
        return this._stack[this._stack.length - 1];
    }
    /**
   * Push a scope to the stack.
   */ _pushScope() {
        // We want to clone the content of prev scope
        const scope = this.getScope().clone();
        this._stack.push({
            client: this.getClient(),
            scope
        });
        return scope;
    }
    /**
   * Pop a scope from the stack.
   */ _popScope() {
        if (this._stack.length <= 1) return false;
        return !!this._stack.pop();
    }
}
/**
 * Get the global async context stack.
 * This will be removed during the v8 cycle and is only here to make migration easier.
 */ function getAsyncContextStack() {
    const registry = carrier.getMainCarrier();
    const sentry = carrier.getSentryCarrier(registry);
    return sentry.stack = sentry.stack || new AsyncContextStack(defaultScopes.getDefaultCurrentScope(), defaultScopes.getDefaultIsolationScope());
}
function withScope(callback) {
    return getAsyncContextStack().withScope(callback);
}
function withSetScope(scope, callback) {
    const stack = getAsyncContextStack();
    return stack.withScope(()=>{
        stack.getStackTop().scope = scope;
        return callback(scope);
    });
}
function withIsolationScope(callback) {
    return getAsyncContextStack().withScope(()=>{
        return callback(getAsyncContextStack().getIsolationScope());
    });
}
/**
 * Get the stack-based async context strategy.
 */ function getStackAsyncContextStrategy() {
    return {
        withIsolationScope,
        withScope,
        withSetScope,
        withSetIsolationScope: (_isolationScope, callback)=>{
            return withIsolationScope(callback);
        },
        getCurrentScope: ()=>getAsyncContextStack().getScope(),
        getIsolationScope: ()=>getAsyncContextStack().getIsolationScope()
    };
}
exports.AsyncContextStack = AsyncContextStack;
exports.getStackAsyncContextStrategy = getStackAsyncContextStrategy; //# sourceMappingURL=stackStrategy.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/asyncContext/index.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const carrier = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/carrier.js [app-ssr] (ecmascript)");
const stackStrategy = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/asyncContext/stackStrategy.js [app-ssr] (ecmascript)");
/**
 * @private Private API with no semver guarantees!
 *
 * Sets the global async context strategy
 */ function setAsyncContextStrategy(strategy) {
    // Get main carrier (global for every environment)
    const registry = carrier.getMainCarrier();
    const sentry = carrier.getSentryCarrier(registry);
    sentry.acs = strategy;
}
/**
 * Get the current async context strategy.
 * If none has been setup, the default will be used.
 */ function getAsyncContextStrategy(carrier$1) {
    const sentry = carrier.getSentryCarrier(carrier$1);
    if (sentry.acs) {
        return sentry.acs;
    }
    // Otherwise, use the default one (stack)
    return stackStrategy.getStackAsyncContextStrategy();
}
exports.getAsyncContextStrategy = getAsyncContextStrategy;
exports.setAsyncContextStrategy = setAsyncContextStrategy; //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const index = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/asyncContext/index.js [app-ssr] (ecmascript)");
const carrier = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/carrier.js [app-ssr] (ecmascript)");
const scope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/scope.js [app-ssr] (ecmascript)");
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
/**
 * Get the currently active scope.
 */ function getCurrentScope() {
    const carrier$1 = carrier.getMainCarrier();
    const acs = index.getAsyncContextStrategy(carrier$1);
    return acs.getCurrentScope();
}
/**
 * Get the currently active isolation scope.
 * The isolation scope is active for the current execution context.
 */ function getIsolationScope() {
    const carrier$1 = carrier.getMainCarrier();
    const acs = index.getAsyncContextStrategy(carrier$1);
    return acs.getIsolationScope();
}
/**
 * Get the global scope.
 * This scope is applied to _all_ events.
 */ function getGlobalScope() {
    return worldwide.getGlobalSingleton('globalScope', ()=>new scope.Scope());
}
/**
 * Creates a new scope with and executes the given operation within.
 * The scope is automatically removed once the operation
 * finishes or throws.
 */ /**
 * Either creates a new active scope, or sets the given scope as active scope in the given callback.
 */ function withScope(...rest) {
    const carrier$1 = carrier.getMainCarrier();
    const acs = index.getAsyncContextStrategy(carrier$1);
    // If a scope is defined, we want to make this the active scope instead of the default one
    if (rest.length === 2) {
        const [scope, callback] = rest;
        if (!scope) {
            return acs.withScope(callback);
        }
        return acs.withSetScope(scope, callback);
    }
    return acs.withScope(rest[0]);
}
/**
 * Attempts to fork the current isolation scope and the current scope based on the current async context strategy. If no
 * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the
 * case, for example, in the browser).
 *
 * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.
 *
 * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in "normal"
 * applications directly because it comes with pitfalls. Use at your own risk!
 */ /**
 * Either creates a new active isolation scope, or sets the given isolation scope as active scope in the given callback.
 */ function withIsolationScope(...rest) {
    const carrier$1 = carrier.getMainCarrier();
    const acs = index.getAsyncContextStrategy(carrier$1);
    // If a scope is defined, we want to make this the active scope instead of the default one
    if (rest.length === 2) {
        const [isolationScope, callback] = rest;
        if (!isolationScope) {
            return acs.withIsolationScope(callback);
        }
        return acs.withSetIsolationScope(isolationScope, callback);
    }
    return acs.withIsolationScope(rest[0]);
}
/**
 * Get the currently active client.
 */ function getClient() {
    return getCurrentScope().getClient();
}
/**
 * Get a trace context for the given scope.
 */ function getTraceContextFromScope(scope) {
    const propagationContext = scope.getPropagationContext();
    // TODO(v9): Use generateSpanId() instead of spanId
    // eslint-disable-next-line deprecation/deprecation
    const { traceId, spanId, parentSpanId } = propagationContext;
    const traceContext = object.dropUndefinedKeys({
        trace_id: traceId,
        span_id: spanId,
        parent_span_id: parentSpanId
    });
    return traceContext;
}
exports.getClient = getClient;
exports.getCurrentScope = getCurrentScope;
exports.getGlobalScope = getGlobalScope;
exports.getIsolationScope = getIsolationScope;
exports.getTraceContextFromScope = getTraceContextFromScope;
exports.withIsolationScope = withIsolationScope;
exports.withScope = withScope; //# sourceMappingURL=currentScopes.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/metrics/metric-summary.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
/**
 * key: bucketKey
 * value: [exportKey, MetricSummary]
 */ const METRICS_SPAN_FIELD = '_sentryMetrics';
/**
 * Fetches the metric summary if it exists for the passed span
 */ function getMetricSummaryJsonForSpan(span) {
    const storage = span[METRICS_SPAN_FIELD];
    if (!storage) {
        return undefined;
    }
    const output = {};
    for (const [, [exportKey, summary]] of storage){
        const arr = output[exportKey] || (output[exportKey] = []);
        arr.push(object.dropUndefinedKeys(summary));
    }
    return output;
}
/**
 * Updates the metric summary on a span.
 */ function updateMetricSummaryOnSpan(span, metricType, sanitizedName, value, unit, tags, bucketKey) {
    const existingStorage = span[METRICS_SPAN_FIELD];
    const storage = existingStorage || (span[METRICS_SPAN_FIELD] = new Map());
    const exportKey = `${metricType}:${sanitizedName}@${unit}`;
    const bucketItem = storage.get(bucketKey);
    if (bucketItem) {
        const [, summary] = bucketItem;
        storage.set(bucketKey, [
            exportKey,
            {
                min: Math.min(summary.min, value),
                max: Math.max(summary.max, value),
                count: summary.count += 1,
                sum: summary.sum += value,
                tags: summary.tags
            }
        ]);
    } else {
        storage.set(bucketKey, [
            exportKey,
            {
                min: value,
                max: value,
                count: 1,
                sum: value,
                tags
            }
        ]);
    }
}
exports.getMetricSummaryJsonForSpan = getMetricSummaryJsonForSpan;
exports.updateMetricSummaryOnSpan = updateMetricSummaryOnSpan; //# sourceMappingURL=metric-summary.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/semanticAttributes.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
/**
 * Use this attribute to represent the source of a span.
 * Should be one of: custom, url, route, view, component, task, unknown
 *
 */ const SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = 'sentry.source';
/**
 * Use this attribute to represent the sample rate used for a span.
 */ const SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = 'sentry.sample_rate';
/**
 * Use this attribute to represent the operation of a span.
 */ const SEMANTIC_ATTRIBUTE_SENTRY_OP = 'sentry.op';
/**
 * Use this attribute to represent the origin of a span.
 */ const SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = 'sentry.origin';
/** The reason why an idle span finished. */ const SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = 'sentry.idle_span_finish_reason';
/** The unit of a measurement, which may be stored as a TimedEvent. */ const SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = 'sentry.measurement_unit';
/** The value of a measurement, which may be stored as a TimedEvent. */ const SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = 'sentry.measurement_value';
/**
 * A custom span name set by users guaranteed to be taken over any automatically
 * inferred name. This attribute is removed before the span is sent.
 *
 * @internal only meant for internal SDK usage
 * @hidden
 */ const SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = 'sentry.custom_span_name';
/**
 * The id of the profile that this span occurred in.
 */ const SEMANTIC_ATTRIBUTE_PROFILE_ID = 'sentry.profile_id';
const SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = 'sentry.exclusive_time';
const SEMANTIC_ATTRIBUTE_CACHE_HIT = 'cache.hit';
const SEMANTIC_ATTRIBUTE_CACHE_KEY = 'cache.key';
const SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = 'cache.item_size';
/** TODO: Remove these once we update to latest semantic conventions */ const SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = 'http.request.method';
const SEMANTIC_ATTRIBUTE_URL_FULL = 'url.full';
exports.SEMANTIC_ATTRIBUTE_CACHE_HIT = SEMANTIC_ATTRIBUTE_CACHE_HIT;
exports.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE;
exports.SEMANTIC_ATTRIBUTE_CACHE_KEY = SEMANTIC_ATTRIBUTE_CACHE_KEY;
exports.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME;
exports.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD;
exports.SEMANTIC_ATTRIBUTE_PROFILE_ID = SEMANTIC_ATTRIBUTE_PROFILE_ID;
exports.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME;
exports.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON;
exports.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT;
exports.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE;
exports.SEMANTIC_ATTRIBUTE_SENTRY_OP = SEMANTIC_ATTRIBUTE_SENTRY_OP;
exports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;
exports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;
exports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;
exports.SEMANTIC_ATTRIBUTE_URL_FULL = SEMANTIC_ATTRIBUTE_URL_FULL; //# sourceMappingURL=semanticAttributes.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/tracing/spanstatus.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const SPAN_STATUS_UNSET = 0;
const SPAN_STATUS_OK = 1;
const SPAN_STATUS_ERROR = 2;
/**
 * Converts a HTTP status code into a sentry status with a message.
 *
 * @param httpStatus The HTTP response status code.
 * @returns The span status or unknown_error.
 */ // https://develop.sentry.dev/sdk/event-payloads/span/
function getSpanStatusFromHttpCode(httpStatus) {
    if (httpStatus < 400 && httpStatus >= 100) {
        return {
            code: SPAN_STATUS_OK
        };
    }
    if (httpStatus >= 400 && httpStatus < 500) {
        switch(httpStatus){
            case 401:
                return {
                    code: SPAN_STATUS_ERROR,
                    message: 'unauthenticated'
                };
            case 403:
                return {
                    code: SPAN_STATUS_ERROR,
                    message: 'permission_denied'
                };
            case 404:
                return {
                    code: SPAN_STATUS_ERROR,
                    message: 'not_found'
                };
            case 409:
                return {
                    code: SPAN_STATUS_ERROR,
                    message: 'already_exists'
                };
            case 413:
                return {
                    code: SPAN_STATUS_ERROR,
                    message: 'failed_precondition'
                };
            case 429:
                return {
                    code: SPAN_STATUS_ERROR,
                    message: 'resource_exhausted'
                };
            case 499:
                return {
                    code: SPAN_STATUS_ERROR,
                    message: 'cancelled'
                };
            default:
                return {
                    code: SPAN_STATUS_ERROR,
                    message: 'invalid_argument'
                };
        }
    }
    if (httpStatus >= 500 && httpStatus < 600) {
        switch(httpStatus){
            case 501:
                return {
                    code: SPAN_STATUS_ERROR,
                    message: 'unimplemented'
                };
            case 503:
                return {
                    code: SPAN_STATUS_ERROR,
                    message: 'unavailable'
                };
            case 504:
                return {
                    code: SPAN_STATUS_ERROR,
                    message: 'deadline_exceeded'
                };
            default:
                return {
                    code: SPAN_STATUS_ERROR,
                    message: 'internal_error'
                };
        }
    }
    return {
        code: SPAN_STATUS_ERROR,
        message: 'unknown_error'
    };
}
/**
 * Sets the Http status attributes on the current span based on the http code.
 * Additionally, the span's status is updated, depending on the http code.
 */ function setHttpStatus(span, httpStatus) {
    span.setAttribute('http.response.status_code', httpStatus);
    const spanStatus = getSpanStatusFromHttpCode(httpStatus);
    if (spanStatus.message !== 'unknown_error') {
        span.setStatus(spanStatus);
    }
}
exports.SPAN_STATUS_ERROR = SPAN_STATUS_ERROR;
exports.SPAN_STATUS_OK = SPAN_STATUS_OK;
exports.SPAN_STATUS_UNSET = SPAN_STATUS_UNSET;
exports.getSpanStatusFromHttpCode = getSpanStatusFromHttpCode;
exports.setHttpStatus = setHttpStatus; //# sourceMappingURL=spanstatus.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js [app-ssr] (ecmascript)");
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
/**
 * @deprecated Use a `"baggage"` string directly
 */ const BAGGAGE_HEADER_NAME = 'baggage';
const SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';
const SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;
/**
 * Max length of a serialized baggage string
 *
 * https://www.w3.org/TR/baggage/#limits
 */ const MAX_BAGGAGE_STRING_LENGTH = 8192;
/**
 * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the "sentry-" prefixed values
 * from it.
 *
 * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.
 * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.
 */ function baggageHeaderToDynamicSamplingContext(// Very liberal definition of what any incoming header might look like
baggageHeader) {
    const baggageObject = parseBaggageHeader(baggageHeader);
    if (!baggageObject) {
        return undefined;
    }
    // Read all "sentry-" prefixed values out of the baggage object and put it onto a dynamic sampling context object.
    const dynamicSamplingContext = Object.entries(baggageObject).reduce((acc, [key, value])=>{
        if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {
            const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);
            acc[nonPrefixedKey] = value;
        }
        return acc;
    }, {});
    // Only return a dynamic sampling context object if there are keys in it.
    // A keyless object means there were no sentry values on the header, which means that there is no DSC.
    if (Object.keys(dynamicSamplingContext).length > 0) {
        return dynamicSamplingContext;
    } else {
        return undefined;
    }
}
/**
 * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with "sentry-".
 *
 * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility
 * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is
 * `undefined` the function will return `undefined`.
 * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`
 * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.
 */ function dynamicSamplingContextToSentryBaggageHeader(// this also takes undefined for convenience and bundle size in other places
dynamicSamplingContext) {
    if (!dynamicSamplingContext) {
        return undefined;
    }
    // Prefix all DSC keys with "sentry-" and put them into a new object
    const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce((acc, [dscKey, dscValue])=>{
        if (dscValue) {
            acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;
        }
        return acc;
    }, {});
    return objectToBaggageHeader(sentryPrefixedDSC);
}
/**
 * Take a baggage header and parse it into an object.
 */ function parseBaggageHeader(baggageHeader) {
    if (!baggageHeader || !is.isString(baggageHeader) && !Array.isArray(baggageHeader)) {
        return undefined;
    }
    if (Array.isArray(baggageHeader)) {
        // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it
        return baggageHeader.reduce((acc, curr)=>{
            const currBaggageObject = baggageHeaderToObject(curr);
            Object.entries(currBaggageObject).forEach(([key, value])=>{
                acc[key] = value;
            });
            return acc;
        }, {});
    }
    return baggageHeaderToObject(baggageHeader);
}
/**
 * Will parse a baggage header, which is a simple key-value map, into a flat object.
 *
 * @param baggageHeader The baggage header to parse.
 * @returns a flat object containing all the key-value pairs from `baggageHeader`.
 */ function baggageHeaderToObject(baggageHeader) {
    return baggageHeader.split(',').map((baggageEntry)=>baggageEntry.split('=').map((keyOrValue)=>decodeURIComponent(keyOrValue.trim()))).reduce((acc, [key, value])=>{
        if (key && value) {
            acc[key] = value;
        }
        return acc;
    }, {});
}
/**
 * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.
 *
 * @param object The object to turn into a baggage header.
 * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header
 * is not spec compliant.
 */ function objectToBaggageHeader(object) {
    if (Object.keys(object).length === 0) {
        // An empty baggage header is not spec compliant: We return undefined.
        return undefined;
    }
    return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex)=>{
        const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;
        const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;
        if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {
            debugBuild.DEBUG_BUILD && logger.logger.warn(`Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`);
            return baggageHeader;
        } else {
            return newBaggageHeader;
        }
    }, '');
}
exports.BAGGAGE_HEADER_NAME = BAGGAGE_HEADER_NAME;
exports.MAX_BAGGAGE_STRING_LENGTH = MAX_BAGGAGE_STRING_LENGTH;
exports.SENTRY_BAGGAGE_KEY_PREFIX = SENTRY_BAGGAGE_KEY_PREFIX;
exports.SENTRY_BAGGAGE_KEY_PREFIX_REGEX = SENTRY_BAGGAGE_KEY_PREFIX_REGEX;
exports.baggageHeaderToDynamicSamplingContext = baggageHeaderToDynamicSamplingContext;
exports.dynamicSamplingContextToSentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader;
exports.parseBaggageHeader = parseBaggageHeader; //# sourceMappingURL=baggage.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/tracing.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const baggage = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js [app-ssr] (ecmascript)");
const propagationContext = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js [app-ssr] (ecmascript)");
// eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- RegExp is used for readability here
const TRACEPARENT_REGEXP = new RegExp('^[ \\t]*' + // whitespace
'([0-9a-f]{32})?' + // trace_id
'-?([0-9a-f]{16})?' + // span_id
'-?([01])?' + // sampled
'[ \\t]*$');
/**
 * Extract transaction context data from a `sentry-trace` header.
 *
 * @param traceparent Traceparent string
 *
 * @returns Object containing data from the header, or undefined if traceparent string is malformed
 */ function extractTraceparentData(traceparent) {
    if (!traceparent) {
        return undefined;
    }
    const matches = traceparent.match(TRACEPARENT_REGEXP);
    if (!matches) {
        return undefined;
    }
    let parentSampled;
    if (matches[3] === '1') {
        parentSampled = true;
    } else if (matches[3] === '0') {
        parentSampled = false;
    }
    return {
        traceId: matches[1],
        parentSampled,
        parentSpanId: matches[2]
    };
}
/**
 * Create a propagation context from incoming headers or
 * creates a minimal new one if the headers are undefined.
 */ function propagationContextFromHeaders(sentryTrace, baggage$1) {
    const traceparentData = extractTraceparentData(sentryTrace);
    const dynamicSamplingContext = baggage.baggageHeaderToDynamicSamplingContext(baggage$1);
    if (!traceparentData || !traceparentData.traceId) {
        return {
            traceId: propagationContext.generateTraceId(),
            spanId: propagationContext.generateSpanId()
        };
    }
    const { traceId, parentSpanId, parentSampled } = traceparentData;
    const virtualSpanId = propagationContext.generateSpanId();
    return {
        traceId,
        parentSpanId,
        spanId: virtualSpanId,
        sampled: parentSampled,
        dsc: dynamicSamplingContext || {}
    };
}
/**
 * Create sentry-trace header from span context values.
 */ function generateSentryTraceHeader(traceId = propagationContext.generateTraceId(), spanId = propagationContext.generateSpanId(), sampled) {
    let sampledString = '';
    if (sampled !== undefined) {
        sampledString = sampled ? '-1' : '-0';
    }
    return `${traceId}-${spanId}${sampledString}`;
}
exports.TRACEPARENT_REGEXP = TRACEPARENT_REGEXP;
exports.extractTraceparentData = extractTraceparentData;
exports.generateSentryTraceHeader = generateSentryTraceHeader;
exports.propagationContextFromHeaders = propagationContextFromHeaders; //# sourceMappingURL=tracing.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils/spanUtils.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const index = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/asyncContext/index.js [app-ssr] (ecmascript)");
const carrier = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/carrier.js [app-ssr] (ecmascript)");
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const metricSummary = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/metric-summary.js [app-ssr] (ecmascript)");
const semanticAttributes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/semanticAttributes.js [app-ssr] (ecmascript)");
const spanstatus = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/spanstatus.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
const propagationContext = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js [app-ssr] (ecmascript)");
const time = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)");
const tracing = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/tracing.js [app-ssr] (ecmascript)");
const spanOnScope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanOnScope.js [app-ssr] (ecmascript)");
// These are aligned with OpenTelemetry trace flags
const TRACE_FLAG_NONE = 0x0;
const TRACE_FLAG_SAMPLED = 0x1;
// todo(v9): Remove this once we've stopped dropping spans via `beforeSendSpan`
let hasShownSpanDropWarning = false;
/**
 * Convert a span to a trace context, which can be sent as the `trace` context in an event.
 * By default, this will only include trace_id, span_id & parent_span_id.
 * If `includeAllData` is true, it will also include data, op, status & origin.
 */ function spanToTransactionTraceContext(span) {
    const { spanId: span_id, traceId: trace_id } = span.spanContext();
    const { data, op, parent_span_id, status, origin } = spanToJSON(span);
    return object.dropUndefinedKeys({
        parent_span_id,
        span_id,
        trace_id,
        data,
        op,
        status,
        origin
    });
}
/**
 * Convert a span to a trace context, which can be sent as the `trace` context in a non-transaction event.
 */ function spanToTraceContext(span) {
    const { spanId, traceId: trace_id, isRemote } = span.spanContext();
    // If the span is remote, we use a random/virtual span as span_id to the trace context,
    // and the remote span as parent_span_id
    const parent_span_id = isRemote ? spanId : spanToJSON(span).parent_span_id;
    const span_id = isRemote ? propagationContext.generateSpanId() : spanId;
    return object.dropUndefinedKeys({
        parent_span_id,
        span_id,
        trace_id
    });
}
/**
 * Convert a Span to a Sentry trace header.
 */ function spanToTraceHeader(span) {
    const { traceId, spanId } = span.spanContext();
    const sampled = spanIsSampled(span);
    return tracing.generateSentryTraceHeader(traceId, spanId, sampled);
}
/**
 * Convert a span time input into a timestamp in seconds.
 */ function spanTimeInputToSeconds(input) {
    if (typeof input === 'number') {
        return ensureTimestampInSeconds(input);
    }
    if (Array.isArray(input)) {
        // See {@link HrTime} for the array-based time format
        return input[0] + input[1] / 1e9;
    }
    if (input instanceof Date) {
        return ensureTimestampInSeconds(input.getTime());
    }
    return time.timestampInSeconds();
}
/**
 * Converts a timestamp to second, if it was in milliseconds, or keeps it as second.
 */ function ensureTimestampInSeconds(timestamp) {
    const isMs = timestamp > 9999999999;
    return isMs ? timestamp / 1000 : timestamp;
}
/**
 * Convert a span to a JSON representation.
 */ // Note: Because of this, we currently have a circular type dependency (which we opted out of in package.json).
// This is not avoidable as we need `spanToJSON` in `spanUtils.ts`, which in turn is needed by `span.ts` for backwards compatibility.
// And `spanToJSON` needs the Span class from `span.ts` to check here.
function spanToJSON(span) {
    if (spanIsSentrySpan(span)) {
        return span.getSpanJSON();
    }
    try {
        const { spanId: span_id, traceId: trace_id } = span.spanContext();
        // Handle a span from @opentelemetry/sdk-base-trace's `Span` class
        if (spanIsOpenTelemetrySdkTraceBaseSpan(span)) {
            const { attributes, startTime, name, endTime, parentSpanId, status } = span;
            return object.dropUndefinedKeys({
                span_id,
                trace_id,
                data: attributes,
                description: name,
                parent_span_id: parentSpanId,
                start_timestamp: spanTimeInputToSeconds(startTime),
                // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time
                timestamp: spanTimeInputToSeconds(endTime) || undefined,
                status: getStatusMessage(status),
                op: attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP],
                origin: attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN],
                _metrics_summary: metricSummary.getMetricSummaryJsonForSpan(span)
            });
        }
        // Finally, at least we have `spanContext()`....
        return {
            span_id,
            trace_id
        };
    } catch (e) {
        return {};
    }
}
function spanIsOpenTelemetrySdkTraceBaseSpan(span) {
    const castSpan = span;
    return !!castSpan.attributes && !!castSpan.startTime && !!castSpan.name && !!castSpan.endTime && !!castSpan.status;
}
/** Exported only for tests. */ /**
 * Sadly, due to circular dependency checks we cannot actually import the Span class here and check for instanceof.
 * :( So instead we approximate this by checking if it has the `getSpanJSON` method.
 */ function spanIsSentrySpan(span) {
    return typeof span.getSpanJSON === 'function';
}
/**
 * Returns true if a span is sampled.
 * In most cases, you should just use `span.isRecording()` instead.
 * However, this has a slightly different semantic, as it also returns false if the span is finished.
 * So in the case where this distinction is important, use this method.
 */ function spanIsSampled(span) {
    // We align our trace flags with the ones OpenTelemetry use
    // So we also check for sampled the same way they do.
    const { traceFlags } = span.spanContext();
    return traceFlags === TRACE_FLAG_SAMPLED;
}
/** Get the status message to use for a JSON representation of a span. */ function getStatusMessage(status) {
    if (!status || status.code === spanstatus.SPAN_STATUS_UNSET) {
        return undefined;
    }
    if (status.code === spanstatus.SPAN_STATUS_OK) {
        return 'ok';
    }
    return status.message || 'unknown_error';
}
const CHILD_SPANS_FIELD = '_sentryChildSpans';
const ROOT_SPAN_FIELD = '_sentryRootSpan';
/**
 * Adds an opaque child span reference to a span.
 */ function addChildSpanToSpan(span, childSpan) {
    // We store the root span reference on the child span
    // We need this for `getRootSpan()` to work
    const rootSpan = span[ROOT_SPAN_FIELD] || span;
    object.addNonEnumerableProperty(childSpan, ROOT_SPAN_FIELD, rootSpan);
    // We store a list of child spans on the parent span
    // We need this for `getSpanDescendants()` to work
    if (span[CHILD_SPANS_FIELD]) {
        span[CHILD_SPANS_FIELD].add(childSpan);
    } else {
        object.addNonEnumerableProperty(span, CHILD_SPANS_FIELD, new Set([
            childSpan
        ]));
    }
}
/** This is only used internally by Idle Spans. */ function removeChildSpanFromSpan(span, childSpan) {
    if (span[CHILD_SPANS_FIELD]) {
        span[CHILD_SPANS_FIELD].delete(childSpan);
    }
}
/**
 * Returns an array of the given span and all of its descendants.
 */ function getSpanDescendants(span) {
    const resultSet = new Set();
    function addSpanChildren(span) {
        // This exit condition is required to not infinitely loop in case of a circular dependency.
        if (resultSet.has(span)) {
            return;
        // We want to ignore unsampled spans (e.g. non recording spans)
        } else if (spanIsSampled(span)) {
            resultSet.add(span);
            const childSpans = span[CHILD_SPANS_FIELD] ? Array.from(span[CHILD_SPANS_FIELD]) : [];
            for (const childSpan of childSpans){
                addSpanChildren(childSpan);
            }
        }
    }
    addSpanChildren(span);
    return Array.from(resultSet);
}
/**
 * Returns the root span of a given span.
 */ function getRootSpan(span) {
    return span[ROOT_SPAN_FIELD] || span;
}
/**
 * Returns the currently active span.
 */ function getActiveSpan() {
    const carrier$1 = carrier.getMainCarrier();
    const acs = index.getAsyncContextStrategy(carrier$1);
    if (acs.getActiveSpan) {
        return acs.getActiveSpan();
    }
    return spanOnScope._getSpanForScope(currentScopes.getCurrentScope());
}
/**
 * Updates the metric summary on the currently active span
 */ function updateMetricSummaryOnActiveSpan(metricType, sanitizedName, value, unit, tags, bucketKey) {
    const span = getActiveSpan();
    if (span) {
        metricSummary.updateMetricSummaryOnSpan(span, metricType, sanitizedName, value, unit, tags, bucketKey);
    }
}
/**
 * Logs a warning once if `beforeSendSpan` is used to drop spans.
 *
 * todo(v9): Remove this once we've stopped dropping spans via `beforeSendSpan`.
 */ function showSpanDropWarning() {
    if (!hasShownSpanDropWarning) {
        logger.consoleSandbox(()=>{
            // eslint-disable-next-line no-console
            console.warn('[Sentry] Deprecation warning: Returning null from `beforeSendSpan` will be disallowed from SDK version 9.0.0 onwards. The callback will only support mutating spans. To drop certain spans, configure the respective integrations directly.');
        });
        hasShownSpanDropWarning = true;
    }
}
/**
 * Updates the name of the given span and ensures that the span name is not
 * overwritten by the Sentry SDK.
 *
 * Use this function instead of `span.updateName()` if you want to make sure that
 * your name is kept. For some spans, for example root `http.server` spans the
 * Sentry SDK would otherwise overwrite the span name with a high-quality name
 * it infers when the span ends.
 *
 * Use this function in server code or when your span is started on the server
 * and on the client (browser). If you only update a span name on the client,
 * you can also use `span.updateName()` the SDK does not overwrite the name.
 *
 * @param span - The span to update the name of.
 * @param name - The name to set on the span.
 */ function updateSpanName(span, name) {
    span.updateName(name);
    span.setAttributes({
        [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',
        [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME]: name
    });
}
exports.TRACE_FLAG_NONE = TRACE_FLAG_NONE;
exports.TRACE_FLAG_SAMPLED = TRACE_FLAG_SAMPLED;
exports.addChildSpanToSpan = addChildSpanToSpan;
exports.getActiveSpan = getActiveSpan;
exports.getRootSpan = getRootSpan;
exports.getSpanDescendants = getSpanDescendants;
exports.getStatusMessage = getStatusMessage;
exports.removeChildSpanFromSpan = removeChildSpanFromSpan;
exports.showSpanDropWarning = showSpanDropWarning;
exports.spanIsSampled = spanIsSampled;
exports.spanTimeInputToSeconds = spanTimeInputToSeconds;
exports.spanToJSON = spanToJSON;
exports.spanToTraceContext = spanToTraceContext;
exports.spanToTraceHeader = spanToTraceHeader;
exports.spanToTransactionTraceContext = spanToTransactionTraceContext;
exports.updateMetricSummaryOnActiveSpan = updateMetricSummaryOnActiveSpan;
exports.updateSpanName = updateSpanName; //# sourceMappingURL=spanUtils.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/tracing/errors.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const globalError = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalError.js [app-ssr] (ecmascript)");
const globalUnhandledRejection = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalUnhandledRejection.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const spanUtils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanUtils.js [app-ssr] (ecmascript)");
const spanstatus = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/spanstatus.js [app-ssr] (ecmascript)");
let errorsInstrumented = false;
/**
 * Ensure that global errors automatically set the active span status.
 */ function registerSpanErrorInstrumentation() {
    if (errorsInstrumented) {
        return;
    }
    errorsInstrumented = true;
    globalError.addGlobalErrorInstrumentationHandler(errorCallback);
    globalUnhandledRejection.addGlobalUnhandledRejectionInstrumentationHandler(errorCallback);
}
/**
 * If an error or unhandled promise occurs, we mark the active root span as failed
 */ function errorCallback() {
    const activeSpan = spanUtils.getActiveSpan();
    const rootSpan = activeSpan && spanUtils.getRootSpan(activeSpan);
    if (rootSpan) {
        const message = 'internal_error';
        debugBuild.DEBUG_BUILD && logger.logger.log(`[Tracing] Root span: ${message} -> Global error occurred`);
        rootSpan.setStatus({
            code: spanstatus.SPAN_STATUS_ERROR,
            message
        });
    }
}
// The function name will be lost when bundling but we need to be able to identify this listener later to maintain the
// node.js default exit behaviour
errorCallback.tag = 'sentry_tracingErrorCallback';
exports.registerSpanErrorInstrumentation = registerSpanErrorInstrumentation; //# sourceMappingURL=errors.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/tracing/utils.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
const SCOPE_ON_START_SPAN_FIELD = '_sentryScope';
const ISOLATION_SCOPE_ON_START_SPAN_FIELD = '_sentryIsolationScope';
/** Store the scope & isolation scope for a span, which can the be used when it is finished. */ function setCapturedScopesOnSpan(span, scope, isolationScope) {
    if (span) {
        object.addNonEnumerableProperty(span, ISOLATION_SCOPE_ON_START_SPAN_FIELD, isolationScope);
        object.addNonEnumerableProperty(span, SCOPE_ON_START_SPAN_FIELD, scope);
    }
}
/**
 * Grabs the scope and isolation scope off a span that were active when the span was started.
 */ function getCapturedScopesOnSpan(span) {
    return {
        scope: span[SCOPE_ON_START_SPAN_FIELD],
        isolationScope: span[ISOLATION_SCOPE_ON_START_SPAN_FIELD]
    };
}
exports.getCapturedScopesOnSpan = getCapturedScopesOnSpan;
exports.setCapturedScopesOnSpan = setCapturedScopesOnSpan; //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/tracing/hubextensions.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const errors = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/errors.js [app-ssr] (ecmascript)");
/**
 * @deprecated Use `registerSpanErrorInstrumentation()` instead. In v9, this function will be removed. Note that you don't need to call this in Node-based SDKs or when using `browserTracingIntegration`.
 */ function addTracingExtensions() {
    errors.registerSpanErrorInstrumentation();
}
exports.addTracingExtensions = addTracingExtensions; //# sourceMappingURL=hubextensions.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
// Treeshakable guard to remove all code related to tracing
/**
 * Determines if tracing is currently enabled.
 *
 * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.
 */ function hasTracingEnabled(maybeOptions) {
    if (typeof __SENTRY_TRACING__ === 'boolean' && !__SENTRY_TRACING__) {
        return false;
    }
    const client = currentScopes.getClient();
    const options = maybeOptions || client && client.getOptions();
    // eslint-disable-next-line deprecation/deprecation
    return !!options && (options.enableTracing || 'tracesSampleRate' in options || 'tracesSampler' in options);
}
exports.hasTracingEnabled = hasTracingEnabled; //# sourceMappingURL=hasTracingEnabled.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const propagationContext = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js [app-ssr] (ecmascript)");
const spanUtils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanUtils.js [app-ssr] (ecmascript)");
/**
 * A Sentry Span that is non-recording, meaning it will not be sent to Sentry.
 */ class SentryNonRecordingSpan {
    constructor(spanContext = {}){
        this._traceId = spanContext.traceId || propagationContext.generateTraceId();
        this._spanId = spanContext.spanId || propagationContext.generateSpanId();
    }
    /** @inheritdoc */ spanContext() {
        return {
            spanId: this._spanId,
            traceId: this._traceId,
            traceFlags: spanUtils.TRACE_FLAG_NONE
        };
    }
    /** @inheritdoc */ // eslint-disable-next-line @typescript-eslint/no-empty-function
    end(_timestamp) {}
    /** @inheritdoc */ setAttribute(_key, _value) {
        return this;
    }
    /** @inheritdoc */ setAttributes(_values) {
        return this;
    }
    /** @inheritdoc */ setStatus(_status) {
        return this;
    }
    /** @inheritdoc */ updateName(_name) {
        return this;
    }
    /** @inheritdoc */ isRecording() {
        return false;
    }
    /** @inheritdoc */ addEvent(_name, _attributesOrStartTime, _startTime) {
        return this;
    }
    /**
   * This should generally not be used,
   * but we need it for being compliant with the OTEL Span interface.
   *
   * @hidden
   * @internal
   */ addLink(_link) {
        return this;
    }
    /**
   * This should generally not be used,
   * but we need it for being compliant with the OTEL Span interface.
   *
   * @hidden
   * @internal
   */ addLinks(_links) {
        return this;
    }
    /**
   * This should generally not be used,
   * but we need it for being compliant with the OTEL Span interface.
   *
   * @hidden
   * @internal
   */ recordException(_exception, _time) {
    // noop
    }
}
exports.SentryNonRecordingSpan = SentryNonRecordingSpan; //# sourceMappingURL=sentryNonRecordingSpan.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
/**
 * Wrap a callback function with error handling.
 * If an error is thrown, it will be passed to the `onError` callback and re-thrown.
 *
 * If the return value of the function is a promise, it will be handled with `maybeHandlePromiseRejection`.
 *
 * If an `onFinally` callback is provided, this will be called when the callback has finished
 * - so if it returns a promise, once the promise resolved/rejected,
 * else once the callback has finished executing.
 * The `onFinally` callback will _always_ be called, no matter if an error was thrown or not.
 */ function handleCallbackErrors(fn, onError, // eslint-disable-next-line @typescript-eslint/no-empty-function
onFinally = ()=>{}) {
    let maybePromiseResult;
    try {
        maybePromiseResult = fn();
    } catch (e) {
        onError(e);
        onFinally();
        throw e;
    }
    return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);
}
/**
 * Maybe handle a promise rejection.
 * This expects to be given a value that _may_ be a promise, or any other value.
 * If it is a promise, and it rejects, it will call the `onError` callback.
 * Other than this, it will generally return the given value as-is.
 */ function maybeHandlePromiseRejection(value, onError, onFinally) {
    if (is.isThenable(value)) {
        // @ts-expect-error - the isThenable check returns the "wrong" type here
        return value.then((res)=>{
            onFinally();
            return res;
        }, (e)=>{
            onError(e);
            onFinally();
            throw e;
        });
    }
    onFinally();
    return value;
}
exports.handleCallbackErrors = handleCallbackErrors; //# sourceMappingURL=handleCallbackErrors.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/constants.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const DEFAULT_ENVIRONMENT = 'production';
exports.DEFAULT_ENVIRONMENT = DEFAULT_ENVIRONMENT; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const constants = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/constants.js [app-ssr] (ecmascript)");
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const semanticAttributes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/semanticAttributes.js [app-ssr] (ecmascript)");
const baggage = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js [app-ssr] (ecmascript)");
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
const hasTracingEnabled = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js [app-ssr] (ecmascript)");
const spanUtils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanUtils.js [app-ssr] (ecmascript)");
/**
 * If you change this value, also update the terser plugin config to
 * avoid minification of the object property!
 */ const FROZEN_DSC_FIELD = '_frozenDsc';
/**
 * Freeze the given DSC on the given span.
 */ function freezeDscOnSpan(span, dsc) {
    const spanWithMaybeDsc = span;
    object.addNonEnumerableProperty(spanWithMaybeDsc, FROZEN_DSC_FIELD, dsc);
}
/**
 * Creates a dynamic sampling context from a client.
 *
 * Dispatches the `createDsc` lifecycle hook as a side effect.
 */ function getDynamicSamplingContextFromClient(trace_id, client) {
    const options = client.getOptions();
    const { publicKey: public_key } = client.getDsn() || {};
    const dsc = object.dropUndefinedKeys({
        environment: options.environment || constants.DEFAULT_ENVIRONMENT,
        release: options.release,
        public_key,
        trace_id
    });
    client.emit('createDsc', dsc);
    return dsc;
}
/**
 * Get the dynamic sampling context for the currently active scopes.
 */ function getDynamicSamplingContextFromScope(client, scope) {
    const propagationContext = scope.getPropagationContext();
    return propagationContext.dsc || getDynamicSamplingContextFromClient(propagationContext.traceId, client);
}
/**
 * Creates a dynamic sampling context from a span (and client and scope)
 *
 * @param span the span from which a few values like the root span name and sample rate are extracted.
 *
 * @returns a dynamic sampling context
 */ function getDynamicSamplingContextFromSpan(span) {
    const client = currentScopes.getClient();
    if (!client) {
        return {};
    }
    const rootSpan = spanUtils.getRootSpan(span);
    // For core implementation, we freeze the DSC onto the span as a non-enumerable property
    const frozenDsc = rootSpan[FROZEN_DSC_FIELD];
    if (frozenDsc) {
        return frozenDsc;
    }
    // For OpenTelemetry, we freeze the DSC on the trace state
    const traceState = rootSpan.spanContext().traceState;
    const traceStateDsc = traceState && traceState.get('sentry.dsc');
    // If the span has a DSC, we want it to take precedence
    const dscOnTraceState = traceStateDsc && baggage.baggageHeaderToDynamicSamplingContext(traceStateDsc);
    if (dscOnTraceState) {
        return dscOnTraceState;
    }
    // Else, we generate it from the span
    const dsc = getDynamicSamplingContextFromClient(span.spanContext().traceId, client);
    const jsonSpan = spanUtils.spanToJSON(rootSpan);
    const attributes = jsonSpan.data || {};
    const maybeSampleRate = attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];
    if (maybeSampleRate != null) {
        dsc.sample_rate = `${maybeSampleRate}`;
    }
    // We don't want to have a transaction name in the DSC if the source is "url" because URLs might contain PII
    const source = attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];
    // after JSON conversion, txn.name becomes jsonSpan.description
    const name = jsonSpan.description;
    if (source !== 'url' && name) {
        dsc.transaction = name;
    }
    // How can we even land here with hasTracingEnabled() returning false?
    // Otel creates a Non-recording span in Tracing Without Performance mode when handling incoming requests
    // So we end up with an active span that is not sampled (neither positively nor negatively)
    if (hasTracingEnabled.hasTracingEnabled()) {
        dsc.sampled = String(spanUtils.spanIsSampled(rootSpan));
    }
    client.emit('createDsc', dsc, rootSpan);
    return dsc;
}
/**
 * Convert a Span to a baggage header.
 */ function spanToBaggageHeader(span) {
    const dsc = getDynamicSamplingContextFromSpan(span);
    return baggage.dynamicSamplingContextToSentryBaggageHeader(dsc);
}
exports.freezeDscOnSpan = freezeDscOnSpan;
exports.getDynamicSamplingContextFromClient = getDynamicSamplingContextFromClient;
exports.getDynamicSamplingContextFromScope = getDynamicSamplingContextFromScope;
exports.getDynamicSamplingContextFromSpan = getDynamicSamplingContextFromSpan;
exports.spanToBaggageHeader = spanToBaggageHeader; //# sourceMappingURL=dynamicSamplingContext.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/tracing/logSpans.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const spanUtils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanUtils.js [app-ssr] (ecmascript)");
/**
 * Print a log message for a started span.
 */ function logSpanStart(span) {
    if (!debugBuild.DEBUG_BUILD) return;
    const { description = '< unknown name >', op = '< unknown op >', parent_span_id: parentSpanId } = spanUtils.spanToJSON(span);
    const { spanId } = span.spanContext();
    const sampled = spanUtils.spanIsSampled(span);
    const rootSpan = spanUtils.getRootSpan(span);
    const isRootSpan = rootSpan === span;
    const header = `[Tracing] Starting ${sampled ? 'sampled' : 'unsampled'} ${isRootSpan ? 'root ' : ''}span`;
    const infoParts = [
        `op: ${op}`,
        `name: ${description}`,
        `ID: ${spanId}`
    ];
    if (parentSpanId) {
        infoParts.push(`parent ID: ${parentSpanId}`);
    }
    if (!isRootSpan) {
        const { op, description } = spanUtils.spanToJSON(rootSpan);
        infoParts.push(`root ID: ${rootSpan.spanContext().spanId}`);
        if (op) {
            infoParts.push(`root op: ${op}`);
        }
        if (description) {
            infoParts.push(`root description: ${description}`);
        }
    }
    logger.logger.log(`${header}
  ${infoParts.join('\n  ')}`);
}
/**
 * Print a log message for an ended span.
 */ function logSpanEnd(span) {
    if (!debugBuild.DEBUG_BUILD) return;
    const { description = '< unknown name >', op = '< unknown op >' } = spanUtils.spanToJSON(span);
    const { spanId } = span.spanContext();
    const rootSpan = spanUtils.getRootSpan(span);
    const isRootSpan = rootSpan === span;
    const msg = `[Tracing] Finishing "${op}" ${isRootSpan ? 'root ' : ''}span "${description}" with ID ${spanId}`;
    logger.logger.log(msg);
}
exports.logSpanEnd = logSpanEnd;
exports.logSpanStart = logSpanStart; //# sourceMappingURL=logSpans.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
/**
 * Parse a sample rate from a given value.
 * This will either return a boolean or number sample rate, if the sample rate is valid (between 0 and 1).
 * If a string is passed, we try to convert it to a number.
 *
 * Any invalid sample rate will return `undefined`.
 */ function parseSampleRate(sampleRate) {
    if (typeof sampleRate === 'boolean') {
        return Number(sampleRate);
    }
    const rate = typeof sampleRate === 'string' ? parseFloat(sampleRate) : sampleRate;
    if (typeof rate !== 'number' || isNaN(rate) || rate < 0 || rate > 1) {
        debugBuild.DEBUG_BUILD && logger.logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(sampleRate)} of type ${JSON.stringify(typeof sampleRate)}.`);
        return undefined;
    }
    return rate;
}
exports.parseSampleRate = parseSampleRate; //# sourceMappingURL=parseSampleRate.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/tracing/sampling.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const hasTracingEnabled = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js [app-ssr] (ecmascript)");
const parseSampleRate = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js [app-ssr] (ecmascript)");
/**
 * Makes a sampling decision for the given options.
 *
 * Called every time a root span is created. Only root spans which emerge with a `sampled` value of `true` will be
 * sent to Sentry.
 */ function sampleSpan(options, samplingContext) {
    // nothing to do if tracing is not enabled
    if (!hasTracingEnabled.hasTracingEnabled(options)) {
        return [
            false
        ];
    }
    // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` nor `enableTracing` were defined, so one of these should
    // work; prefer the hook if so
    let sampleRate;
    if (typeof options.tracesSampler === 'function') {
        sampleRate = options.tracesSampler(samplingContext);
    } else if (samplingContext.parentSampled !== undefined) {
        sampleRate = samplingContext.parentSampled;
    } else if (typeof options.tracesSampleRate !== 'undefined') {
        sampleRate = options.tracesSampleRate;
    } else {
        // When `enableTracing === true`, we use a sample rate of 100%
        sampleRate = 1;
    }
    // Since this is coming from the user (or from a function provided by the user), who knows what we might get.
    // (The only valid values are booleans or numbers between 0 and 1.)
    const parsedSampleRate = parseSampleRate.parseSampleRate(sampleRate);
    if (parsedSampleRate === undefined) {
        debugBuild.DEBUG_BUILD && logger.logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');
        return [
            false
        ];
    }
    // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped
    if (!parsedSampleRate) {
        debugBuild.DEBUG_BUILD && logger.logger.log(`[Tracing] Discarding transaction because ${typeof options.tracesSampler === 'function' ? 'tracesSampler returned 0 or false' : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'}`);
        return [
            false,
            parsedSampleRate
        ];
    }
    // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is
    // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.
    const shouldSample = Math.random() < parsedSampleRate;
    // if we're not going to keep it, we're done
    if (!shouldSample) {
        debugBuild.DEBUG_BUILD && logger.logger.log(`[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(sampleRate)})`);
        return [
            false,
            parsedSampleRate
        ];
    }
    return [
        true,
        parsedSampleRate
    ];
}
exports.sampleSpan = sampleSpan; //# sourceMappingURL=sampling.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
/** Regular expression used to parse a Dsn. */ const DSN_REGEX = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+)?)?@)([\w.-]+)(?::(\d+))?\/(.+)/;
function isValidProtocol(protocol) {
    return protocol === 'http' || protocol === 'https';
}
/**
 * Renders the string representation of this Dsn.
 *
 * By default, this will render the public representation without the password
 * component. To get the deprecated private representation, set `withPassword`
 * to true.
 *
 * @param withPassword When set to true, the password will be included.
 */ function dsnToString(dsn, withPassword = false) {
    const { host, path, pass, port, projectId, protocol, publicKey } = dsn;
    return `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` + `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`;
}
/**
 * Parses a Dsn from a given string.
 *
 * @param str A Dsn as string
 * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string
 */ function dsnFromString(str) {
    const match = DSN_REGEX.exec(str);
    if (!match) {
        // This should be logged to the console
        logger.consoleSandbox(()=>{
            // eslint-disable-next-line no-console
            console.error(`Invalid Sentry Dsn: ${str}`);
        });
        return undefined;
    }
    const [protocol, publicKey, pass = '', host = '', port = '', lastPath = ''] = match.slice(1);
    let path = '';
    let projectId = lastPath;
    const split = projectId.split('/');
    if (split.length > 1) {
        path = split.slice(0, -1).join('/');
        projectId = split.pop();
    }
    if (projectId) {
        const projectMatch = projectId.match(/^\d+/);
        if (projectMatch) {
            projectId = projectMatch[0];
        }
    }
    return dsnFromComponents({
        host,
        pass,
        path,
        projectId,
        port,
        protocol: protocol,
        publicKey
    });
}
function dsnFromComponents(components) {
    return {
        protocol: components.protocol,
        publicKey: components.publicKey || '',
        pass: components.pass || '',
        host: components.host,
        port: components.port || '',
        path: components.path || '',
        projectId: components.projectId
    };
}
function validateDsn(dsn) {
    if (!debugBuild.DEBUG_BUILD) {
        return true;
    }
    const { port, projectId, protocol } = dsn;
    const requiredComponents = [
        'protocol',
        'publicKey',
        'host',
        'projectId'
    ];
    const hasMissingRequiredComponent = requiredComponents.find((component)=>{
        if (!dsn[component]) {
            logger.logger.error(`Invalid Sentry Dsn: ${component} missing`);
            return true;
        }
        return false;
    });
    if (hasMissingRequiredComponent) {
        return false;
    }
    if (!projectId.match(/^\d+$/)) {
        logger.logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);
        return false;
    }
    if (!isValidProtocol(protocol)) {
        logger.logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);
        return false;
    }
    if (port && isNaN(parseInt(port, 10))) {
        logger.logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);
        return false;
    }
    return true;
}
/**
 * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.
 * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source
 */ function makeDsn(from) {
    const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);
    if (!components || !validateDsn(components)) {
        return undefined;
    }
    return components;
}
exports.dsnFromString = dsnFromString;
exports.dsnToString = dsnToString;
exports.makeDsn = makeDsn; //# sourceMappingURL=dsn.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/memo.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
/* eslint-disable @typescript-eslint/no-unsafe-member-access */ /* eslint-disable @typescript-eslint/no-explicit-any */ /**
 * Helper to decycle json objects
 *
 * @deprecated This function is deprecated and will be removed in the next major version.
 */ // TODO(v9): Move this function into normalize() directly
function memoBuilder() {
    const hasWeakSet = typeof WeakSet === 'function';
    const inner = hasWeakSet ? new WeakSet() : [];
    function memoize(obj) {
        if (hasWeakSet) {
            if (inner.has(obj)) {
                return true;
            }
            inner.add(obj);
            return false;
        }
        // eslint-disable-next-line @typescript-eslint/prefer-for-of
        for(let i = 0; i < inner.length; i++){
            const value = inner[i];
            if (value === obj) {
                return true;
            }
        }
        inner.push(obj);
        return false;
    }
    function unmemoize(obj) {
        if (hasWeakSet) {
            inner.delete(obj);
        } else {
            for(let i = 0; i < inner.length; i++){
                if (inner[i] === obj) {
                    inner.splice(i, 1);
                    break;
                }
            }
        }
    }
    return [
        memoize,
        unmemoize
    ];
}
exports.memoBuilder = memoBuilder; //# sourceMappingURL=memo.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
const memo = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/memo.js [app-ssr] (ecmascript)");
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
const stacktrace = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js [app-ssr] (ecmascript)");
/**
 * Recursively normalizes the given object.
 *
 * - Creates a copy to prevent original input mutation
 * - Skips non-enumerable properties
 * - When stringifying, calls `toJSON` if implemented
 * - Removes circular references
 * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format
 * - Translates known global objects/classes to a string representations
 * - Takes care of `Error` object serialization
 * - Optionally limits depth of final output
 * - Optionally limits number of properties/elements included in any single object/array
 *
 * @param input The object to be normalized.
 * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)
 * @param maxProperties The max number of elements or properties to be included in any single array or
 * object in the normalized output.
 * @returns A normalized version of the object, or `"**non-serializable**"` if any errors are thrown during normalization.
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
function normalize(input, depth = 100, maxProperties = +Infinity) {
    try {
        // since we're at the outermost level, we don't provide a key
        return visit('', input, depth, maxProperties);
    } catch (err) {
        return {
            ERROR: `**non-serializable** (${err})`
        };
    }
}
/** JSDoc */ function normalizeToSize(// eslint-disable-next-line @typescript-eslint/no-explicit-any
object, // Default Node.js REPL depth
depth = 3, // 100kB, as 200kB is max payload size, so half sounds reasonable
maxSize = 100 * 1024) {
    const normalized = normalize(object, depth);
    if (jsonSize(normalized) > maxSize) {
        return normalizeToSize(object, depth - 1, maxSize);
    }
    return normalized;
}
/**
 * Visits a node to perform normalization on it
 *
 * @param key The key corresponding to the given node
 * @param value The node to be visited
 * @param depth Optional number indicating the maximum recursion depth
 * @param maxProperties Optional maximum number of properties/elements included in any single object/array
 * @param memo Optional Memo class handling decycling
 */ function visit(key, value, depth = +Infinity, maxProperties = +Infinity, // eslint-disable-next-line deprecation/deprecation
memo$1 = memo.memoBuilder()) {
    const [memoize, unmemoize] = memo$1;
    // Get the simple cases out of the way first
    if (value == null || // this matches null and undefined -> eqeq not eqeqeq
    [
        'boolean',
        'string'
    ].includes(typeof value) || typeof value === 'number' && Number.isFinite(value)) {
        return value;
    }
    const stringified = stringifyValue(key, value);
    // Anything we could potentially dig into more (objects or arrays) will have come back as `"[object XXXX]"`.
    // Everything else will have already been serialized, so if we don't see that pattern, we're done.
    if (!stringified.startsWith('[object ')) {
        return stringified;
    }
    // From here on, we can assert that `value` is either an object or an array.
    // Do not normalize objects that we know have already been normalized. As a general rule, the
    // "__sentry_skip_normalization__" property should only be used sparingly and only should only be set on objects that
    // have already been normalized.
    if (value['__sentry_skip_normalization__']) {
        return value;
    }
    // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there
    // We keep a certain amount of depth.
    // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.
    const remainingDepth = typeof value['__sentry_override_normalization_depth__'] === 'number' ? value['__sentry_override_normalization_depth__'] : depth;
    // We're also done if we've reached the max depth
    if (remainingDepth === 0) {
        // At this point we know `serialized` is a string of the form `"[object XXXX]"`. Clean it up so it's just `"[XXXX]"`.
        return stringified.replace('object ', '');
    }
    // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.
    if (memoize(value)) {
        return '[Circular ~]';
    }
    // If the value has a `toJSON` method, we call it to extract more information
    const valueWithToJSON = value;
    if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {
        try {
            const jsonValue = valueWithToJSON.toJSON();
            // We need to normalize the return value of `.toJSON()` in case it has circular references
            return visit('', jsonValue, remainingDepth - 1, maxProperties, memo$1);
        } catch (err) {
        // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)
        }
    }
    // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse
    // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each
    // property/entry, and keep track of the number of items we add to it.
    const normalized = Array.isArray(value) ? [] : {};
    let numAdded = 0;
    // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant
    // properties are non-enumerable and otherwise would get missed.
    const visitable = object.convertToPlainObject(value);
    for(const visitKey in visitable){
        // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.
        if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {
            continue;
        }
        if (numAdded >= maxProperties) {
            normalized[visitKey] = '[MaxProperties ~]';
            break;
        }
        // Recursively visit all the child nodes
        const visitValue = visitable[visitKey];
        normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo$1);
        numAdded++;
    }
    // Once we've visited all the branches, remove the parent from memo storage
    unmemoize(value);
    // Return accumulated values
    return normalized;
}
/* eslint-disable complexity */ /**
 * Stringify the given value. Handles various known special values and types.
 *
 * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn
 * the number 1231 into "[Object Number]", nor on `null`, as it will throw.
 *
 * @param value The value to stringify
 * @returns A stringified representation of the given value
 */ function stringifyValue(key, // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for
// our internal use, it'll do
value) {
    try {
        if (key === 'domain' && value && typeof value === 'object' && value._events) {
            return '[Domain]';
        }
        if (key === 'domainEmitter') {
            return '[DomainEmitter]';
        }
        // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first
        // which won't throw if they are not present.
        if (typeof global !== 'undefined' && value === global) {
            return '[Global]';
        }
        // eslint-disable-next-line no-restricted-globals
        if (typeof window !== 'undefined' && value === window) {
            return '[Window]';
        }
        // eslint-disable-next-line no-restricted-globals
        if (typeof document !== 'undefined' && value === document) {
            return '[Document]';
        }
        if (is.isVueViewModel(value)) {
            return '[VueViewModel]';
        }
        // React's SyntheticEvent thingy
        if (is.isSyntheticEvent(value)) {
            return '[SyntheticEvent]';
        }
        if (typeof value === 'number' && !Number.isFinite(value)) {
            return `[${value}]`;
        }
        if (typeof value === 'function') {
            return `[Function: ${stacktrace.getFunctionName(value)}]`;
        }
        if (typeof value === 'symbol') {
            return `[${String(value)}]`;
        }
        // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion
        if (typeof value === 'bigint') {
            return `[BigInt: ${String(value)}]`;
        }
        // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting
        // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as
        // `"[object Object]"`. If we instead look at the constructor's name (which is the same as the name of the class),
        // we can make sure that only plain objects come out that way.
        const objName = getConstructorName(value);
        // Handle HTML Elements
        if (/^HTML(\w*)Element$/.test(objName)) {
            return `[HTMLElement: ${objName}]`;
        }
        return `[object ${objName}]`;
    } catch (err) {
        return `**non-serializable** (${err})`;
    }
}
/* eslint-enable complexity */ function getConstructorName(value) {
    const prototype = Object.getPrototypeOf(value);
    return prototype ? prototype.constructor.name : 'null prototype';
}
/** Calculates bytes size of input string */ function utf8Length(value) {
    // eslint-disable-next-line no-bitwise
    return ~-encodeURI(value).split(/%..|./).length;
}
/** Calculates bytes size of input object */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
function jsonSize(value) {
    return utf8Length(JSON.stringify(value));
}
/**
 * Normalizes URLs in exceptions and stacktraces to a base path so Sentry can fingerprint
 * across platforms and working directory.
 *
 * @param url The URL to be normalized.
 * @param basePath The application base path.
 * @returns The normalized URL.
 */ function normalizeUrlToBase(url, basePath) {
    const escapedBase = basePath// Backslash to forward
    .replace(/\\/g, '/')// Escape RegExp special characters
    .replace(/[|\\{}()[\]^$+*?.]/g, '\\$&');
    let newUrl = url;
    try {
        newUrl = decodeURI(url);
    } catch (_Oo) {
    // Sometime this breaks
    }
    return newUrl.replace(/\\/g, '/').replace(/webpack:\/?/g, '') // Remove intermediate base path
    // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor
    .replace(new RegExp(`(file://)?/*${escapedBase}/*`, 'ig'), 'app:///');
}
exports.normalize = normalize;
exports.normalizeToSize = normalizeToSize;
exports.normalizeUrlToBase = normalizeUrlToBase; //# sourceMappingURL=normalize.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const dsn = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js [app-ssr] (ecmascript)");
const normalize = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js [app-ssr] (ecmascript)");
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
/**
 * Creates an envelope.
 * Make sure to always explicitly provide the generic to this function
 * so that the envelope types resolve correctly.
 */ function createEnvelope(headers, items = []) {
    return [
        headers,
        items
    ];
}
/**
 * Add an item to an envelope.
 * Make sure to always explicitly provide the generic to this function
 * so that the envelope types resolve correctly.
 */ function addItemToEnvelope(envelope, newItem) {
    const [headers, items] = envelope;
    return [
        headers,
        [
            ...items,
            newItem
        ]
    ];
}
/**
 * Convenience function to loop through the items and item types of an envelope.
 * (This function was mostly created because working with envelope types is painful at the moment)
 *
 * If the callback returns true, the rest of the items will be skipped.
 */ function forEachEnvelopeItem(envelope, callback) {
    const envelopeItems = envelope[1];
    for (const envelopeItem of envelopeItems){
        const envelopeItemType = envelopeItem[0].type;
        const result = callback(envelopeItem, envelopeItemType);
        if (result) {
            return true;
        }
    }
    return false;
}
/**
 * Returns true if the envelope contains any of the given envelope item types
 */ function envelopeContainsItemType(envelope, types) {
    return forEachEnvelopeItem(envelope, (_, type)=>types.includes(type));
}
/**
 * Encode a string to UTF8 array.
 */ function encodeUTF8(input) {
    return worldwide.GLOBAL_OBJ.__SENTRY__ && worldwide.GLOBAL_OBJ.__SENTRY__.encodePolyfill ? worldwide.GLOBAL_OBJ.__SENTRY__.encodePolyfill(input) : new TextEncoder().encode(input);
}
/**
 * Decode a UTF8 array to string.
 */ function decodeUTF8(input) {
    return worldwide.GLOBAL_OBJ.__SENTRY__ && worldwide.GLOBAL_OBJ.__SENTRY__.decodePolyfill ? worldwide.GLOBAL_OBJ.__SENTRY__.decodePolyfill(input) : new TextDecoder().decode(input);
}
/**
 * Serializes an envelope.
 */ function serializeEnvelope(envelope) {
    const [envHeaders, items] = envelope;
    // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data
    let parts = JSON.stringify(envHeaders);
    function append(next) {
        if (typeof parts === 'string') {
            parts = typeof next === 'string' ? parts + next : [
                encodeUTF8(parts),
                next
            ];
        } else {
            parts.push(typeof next === 'string' ? encodeUTF8(next) : next);
        }
    }
    for (const item of items){
        const [itemHeaders, payload] = item;
        append(`\n${JSON.stringify(itemHeaders)}\n`);
        if (typeof payload === 'string' || payload instanceof Uint8Array) {
            append(payload);
        } else {
            let stringifiedPayload;
            try {
                stringifiedPayload = JSON.stringify(payload);
            } catch (e) {
                // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.stringify()` still
                // fails, we try again after normalizing it again with infinite normalization depth. This of course has a
                // performance impact but in this case a performance hit is better than throwing.
                stringifiedPayload = JSON.stringify(normalize.normalize(payload));
            }
            append(stringifiedPayload);
        }
    }
    return typeof parts === 'string' ? parts : concatBuffers(parts);
}
function concatBuffers(buffers) {
    const totalLength = buffers.reduce((acc, buf)=>acc + buf.length, 0);
    const merged = new Uint8Array(totalLength);
    let offset = 0;
    for (const buffer of buffers){
        merged.set(buffer, offset);
        offset += buffer.length;
    }
    return merged;
}
/**
 * Parses an envelope
 */ function parseEnvelope(env) {
    let buffer = typeof env === 'string' ? encodeUTF8(env) : env;
    function readBinary(length) {
        const bin = buffer.subarray(0, length);
        // Replace the buffer with the remaining data excluding trailing newline
        buffer = buffer.subarray(length + 1);
        return bin;
    }
    function readJson() {
        let i = buffer.indexOf(0xa);
        // If we couldn't find a newline, we must have found the end of the buffer
        if (i < 0) {
            i = buffer.length;
        }
        return JSON.parse(decodeUTF8(readBinary(i)));
    }
    const envelopeHeader = readJson();
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const items = [];
    while(buffer.length){
        const itemHeader = readJson();
        const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;
        items.push([
            itemHeader,
            binaryLength ? readBinary(binaryLength) : readJson()
        ]);
    }
    return [
        envelopeHeader,
        items
    ];
}
/**
 * Creates envelope item for a single span
 */ function createSpanEnvelopeItem(spanJson) {
    const spanHeaders = {
        type: 'span'
    };
    return [
        spanHeaders,
        spanJson
    ];
}
/**
 * Creates attachment envelope items
 */ function createAttachmentEnvelopeItem(attachment) {
    const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data) : attachment.data;
    return [
        object.dropUndefinedKeys({
            type: 'attachment',
            length: buffer.length,
            filename: attachment.filename,
            content_type: attachment.contentType,
            attachment_type: attachment.attachmentType
        }),
        buffer
    ];
}
const ITEM_TYPE_TO_DATA_CATEGORY_MAP = {
    session: 'session',
    sessions: 'session',
    attachment: 'attachment',
    transaction: 'transaction',
    event: 'error',
    client_report: 'internal',
    user_report: 'default',
    profile: 'profile',
    profile_chunk: 'profile',
    replay_event: 'replay',
    replay_recording: 'replay',
    check_in: 'monitor',
    feedback: 'feedback',
    span: 'span',
    statsd: 'metric_bucket',
    raw_security: 'security'
};
/**
 * Maps the type of an envelope item to a data category.
 */ function envelopeItemTypeToDataCategory(type) {
    return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];
}
/** Extracts the minimal SDK info from the metadata or an events */ function getSdkMetadataForEnvelopeHeader(metadataOrEvent) {
    if (!metadataOrEvent || !metadataOrEvent.sdk) {
        return;
    }
    const { name, version } = metadataOrEvent.sdk;
    return {
        name,
        version
    };
}
/**
 * Creates event envelope headers, based on event, sdk info and tunnel
 * Note: This function was extracted from the core package to make it available in Replay
 */ function createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn$1) {
    const dynamicSamplingContext = event.sdkProcessingMetadata && event.sdkProcessingMetadata.dynamicSamplingContext;
    return {
        event_id: event.event_id,
        sent_at: new Date().toISOString(),
        ...sdkInfo && {
            sdk: sdkInfo
        },
        ...!!tunnel && dsn$1 && {
            dsn: dsn.dsnToString(dsn$1)
        },
        ...dynamicSamplingContext && {
            trace: object.dropUndefinedKeys({
                ...dynamicSamplingContext
            })
        }
    };
}
exports.addItemToEnvelope = addItemToEnvelope;
exports.createAttachmentEnvelopeItem = createAttachmentEnvelopeItem;
exports.createEnvelope = createEnvelope;
exports.createEventEnvelopeHeaders = createEventEnvelopeHeaders;
exports.createSpanEnvelopeItem = createSpanEnvelopeItem;
exports.envelopeContainsItemType = envelopeContainsItemType;
exports.envelopeItemTypeToDataCategory = envelopeItemTypeToDataCategory;
exports.forEachEnvelopeItem = forEachEnvelopeItem;
exports.getSdkMetadataForEnvelopeHeader = getSdkMetadataForEnvelopeHeader;
exports.parseEnvelope = parseEnvelope;
exports.serializeEnvelope = serializeEnvelope; //# sourceMappingURL=envelope.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/envelope.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const dynamicSamplingContext = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js [app-ssr] (ecmascript)");
const dsn = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js [app-ssr] (ecmascript)");
const envelope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/version.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const spanUtils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanUtils.js [app-ssr] (ecmascript)");
/**
 * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.
 * Merge with existing data if any.
 **/ function enhanceEventWithSdkInfo(event, sdkInfo) {
    if (!sdkInfo) {
        return event;
    }
    event.sdk = event.sdk || {};
    event.sdk.name = event.sdk.name || sdkInfo.name;
    event.sdk.version = event.sdk.version || sdkInfo.version;
    event.sdk.integrations = [
        ...event.sdk.integrations || [],
        ...sdkInfo.integrations || []
    ];
    event.sdk.packages = [
        ...event.sdk.packages || [],
        ...sdkInfo.packages || []
    ];
    return event;
}
/** Creates an envelope from a Session */ function createSessionEnvelope(session, dsn$1, metadata, tunnel) {
    const sdkInfo = envelope.getSdkMetadataForEnvelopeHeader(metadata);
    const envelopeHeaders = {
        sent_at: new Date().toISOString(),
        ...sdkInfo && {
            sdk: sdkInfo
        },
        ...!!tunnel && dsn$1 && {
            dsn: dsn.dsnToString(dsn$1)
        }
    };
    const envelopeItem = 'aggregates' in session ? [
        {
            type: 'sessions'
        },
        session
    ] : [
        {
            type: 'session'
        },
        session.toJSON()
    ];
    return envelope.createEnvelope(envelopeHeaders, [
        envelopeItem
    ]);
}
/**
 * Create an Envelope from an event.
 */ function createEventEnvelope(event, dsn, metadata, tunnel) {
    const sdkInfo = envelope.getSdkMetadataForEnvelopeHeader(metadata);
    /*
    Note: Due to TS, event.type may be `replay_event`, theoretically.
    In practice, we never call `createEventEnvelope` with `replay_event` type,
    and we'd have to adjust a looot of types to make this work properly.
    We want to avoid casting this around, as that could lead to bugs (e.g. when we add another type)
    So the safe choice is to really guard against the replay_event type here.
  */ const eventType = event.type && event.type !== 'replay_event' ? event.type : 'event';
    enhanceEventWithSdkInfo(event, metadata && metadata.sdk);
    const envelopeHeaders = envelope.createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn);
    // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to
    // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may
    // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid
    // of this `delete`, lest we miss putting it back in the next time the property is in use.)
    delete event.sdkProcessingMetadata;
    const eventItem = [
        {
            type: eventType
        },
        event
    ];
    return envelope.createEnvelope(envelopeHeaders, [
        eventItem
    ]);
}
/**
 * Create envelope from Span item.
 *
 * Takes an optional client and runs spans through `beforeSendSpan` if available.
 */ function createSpanEnvelope(spans, client) {
    function dscHasRequiredProps(dsc) {
        return !!dsc.trace_id && !!dsc.public_key;
    }
    // For the moment we'll obtain the DSC from the first span in the array
    // This might need to be changed if we permit sending multiple spans from
    // different segments in one envelope
    const dsc = dynamicSamplingContext.getDynamicSamplingContextFromSpan(spans[0]);
    const dsn$1 = client && client.getDsn();
    const tunnel = client && client.getOptions().tunnel;
    const headers = {
        sent_at: new Date().toISOString(),
        ...dscHasRequiredProps(dsc) && {
            trace: dsc
        },
        ...!!tunnel && dsn$1 && {
            dsn: dsn.dsnToString(dsn$1)
        }
    };
    const beforeSendSpan = client && client.getOptions().beforeSendSpan;
    const convertToSpanJSON = beforeSendSpan ? (span)=>{
        const spanJson = beforeSendSpan(spanUtils.spanToJSON(span));
        if (!spanJson) {
            spanUtils.showSpanDropWarning();
        }
        return spanJson;
    } : (span)=>spanUtils.spanToJSON(span);
    const items = [];
    for (const span of spans){
        const spanJson = convertToSpanJSON(span);
        if (spanJson) {
            items.push(envelope.createSpanEnvelopeItem(spanJson));
        }
    }
    return envelope.createEnvelope(headers, items);
}
exports.createEventEnvelope = createEventEnvelope;
exports.createSessionEnvelope = createSessionEnvelope;
exports.createSpanEnvelope = createSpanEnvelope; //# sourceMappingURL=envelope.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/tracing/measurement.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const semanticAttributes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/semanticAttributes.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const spanUtils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanUtils.js [app-ssr] (ecmascript)");
/**
 * Adds a measurement to the active transaction on the current global scope. You can optionally pass in a different span
 * as the 4th parameter.
 */ function setMeasurement(name, value, unit, activeSpan = spanUtils.getActiveSpan()) {
    const rootSpan = activeSpan && spanUtils.getRootSpan(activeSpan);
    if (rootSpan) {
        debugBuild.DEBUG_BUILD && logger.logger.log(`[Measurement] Setting measurement on root span: ${name} = ${value} ${unit}`);
        rootSpan.addEvent(name, {
            [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: value,
            [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: unit
        });
    }
}
/**
 * Convert timed events to measurements.
 */ function timedEventsToMeasurements(events) {
    if (!events || events.length === 0) {
        return undefined;
    }
    const measurements = {};
    events.forEach((event)=>{
        const attributes = event.attributes || {};
        const unit = attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT];
        const value = attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE];
        if (typeof unit === 'string' && typeof value === 'number') {
            measurements[event.name] = {
                value,
                unit
            };
        }
    });
    return measurements;
}
exports.setMeasurement = setMeasurement;
exports.timedEventsToMeasurements = timedEventsToMeasurements; //# sourceMappingURL=measurement.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const envelope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/envelope.js [app-ssr] (ecmascript)");
const metricSummary = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/metric-summary.js [app-ssr] (ecmascript)");
const semanticAttributes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/semanticAttributes.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
const propagationContext = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js [app-ssr] (ecmascript)");
const time = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)");
const spanUtils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanUtils.js [app-ssr] (ecmascript)");
const dynamicSamplingContext = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js [app-ssr] (ecmascript)");
const logSpans = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/logSpans.js [app-ssr] (ecmascript)");
const measurement = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/measurement.js [app-ssr] (ecmascript)");
const utils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/utils.js [app-ssr] (ecmascript)");
const MAX_SPAN_COUNT = 1000;
/**
 * Span contains all data about a span
 */ class SentrySpan {
    /** Epoch timestamp in seconds when the span started. */ /** Epoch timestamp in seconds when the span ended. */ /** Internal keeper of the status */ /** The timed events added to this span. */ /** if true, treat span as a standalone span (not part of a transaction) */ /**
   * You should never call the constructor manually, always use `Sentry.startSpan()`
   * or other span methods.
   * @internal
   * @hideconstructor
   * @hidden
   */ constructor(spanContext = {}){
        this._traceId = spanContext.traceId || propagationContext.generateTraceId();
        this._spanId = spanContext.spanId || propagationContext.generateSpanId();
        this._startTime = spanContext.startTimestamp || time.timestampInSeconds();
        this._attributes = {};
        this.setAttributes({
            [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'manual',
            [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP]: spanContext.op,
            ...spanContext.attributes
        });
        this._name = spanContext.name;
        if (spanContext.parentSpanId) {
            this._parentSpanId = spanContext.parentSpanId;
        }
        // We want to include booleans as well here
        if ('sampled' in spanContext) {
            this._sampled = spanContext.sampled;
        }
        if (spanContext.endTimestamp) {
            this._endTime = spanContext.endTimestamp;
        }
        this._events = [];
        this._isStandaloneSpan = spanContext.isStandalone;
        // If the span is already ended, ensure we finalize the span immediately
        if (this._endTime) {
            this._onSpanEnded();
        }
    }
    /**
   * This should generally not be used,
   * but it is needed for being compliant with the OTEL Span interface.
   *
   * @hidden
   * @internal
   */ addLink(_link) {
        return this;
    }
    /**
   * This should generally not be used,
   * but it is needed for being compliant with the OTEL Span interface.
   *
   * @hidden
   * @internal
   */ addLinks(_links) {
        return this;
    }
    /**
   * This should generally not be used,
   * but it is needed for being compliant with the OTEL Span interface.
   *
   * @hidden
   * @internal
   */ recordException(_exception, _time) {
    // noop
    }
    /** @inheritdoc */ spanContext() {
        const { _spanId: spanId, _traceId: traceId, _sampled: sampled } = this;
        return {
            spanId,
            traceId,
            traceFlags: sampled ? spanUtils.TRACE_FLAG_SAMPLED : spanUtils.TRACE_FLAG_NONE
        };
    }
    /** @inheritdoc */ setAttribute(key, value) {
        if (value === undefined) {
            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
            delete this._attributes[key];
        } else {
            this._attributes[key] = value;
        }
        return this;
    }
    /** @inheritdoc */ setAttributes(attributes) {
        Object.keys(attributes).forEach((key)=>this.setAttribute(key, attributes[key]));
        return this;
    }
    /**
   * This should generally not be used,
   * but we need it for browser tracing where we want to adjust the start time afterwards.
   * USE THIS WITH CAUTION!
   *
   * @hidden
   * @internal
   */ updateStartTime(timeInput) {
        this._startTime = spanUtils.spanTimeInputToSeconds(timeInput);
    }
    /**
   * @inheritDoc
   */ setStatus(value) {
        this._status = value;
        return this;
    }
    /**
   * @inheritDoc
   */ updateName(name) {
        this._name = name;
        this.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'custom');
        return this;
    }
    /** @inheritdoc */ end(endTimestamp) {
        // If already ended, skip
        if (this._endTime) {
            return;
        }
        this._endTime = spanUtils.spanTimeInputToSeconds(endTimestamp);
        logSpans.logSpanEnd(this);
        this._onSpanEnded();
    }
    /**
   * Get JSON representation of this span.
   *
   * @hidden
   * @internal This method is purely for internal purposes and should not be used outside
   * of SDK code. If you need to get a JSON representation of a span,
   * use `spanToJSON(span)` instead.
   */ getSpanJSON() {
        return object.dropUndefinedKeys({
            data: this._attributes,
            description: this._name,
            op: this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP],
            parent_span_id: this._parentSpanId,
            span_id: this._spanId,
            start_timestamp: this._startTime,
            status: spanUtils.getStatusMessage(this._status),
            timestamp: this._endTime,
            trace_id: this._traceId,
            origin: this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN],
            _metrics_summary: metricSummary.getMetricSummaryJsonForSpan(this),
            profile_id: this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_PROFILE_ID],
            exclusive_time: this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME],
            measurements: measurement.timedEventsToMeasurements(this._events),
            is_segment: this._isStandaloneSpan && spanUtils.getRootSpan(this) === this || undefined,
            segment_id: this._isStandaloneSpan ? spanUtils.getRootSpan(this).spanContext().spanId : undefined
        });
    }
    /** @inheritdoc */ isRecording() {
        return !this._endTime && !!this._sampled;
    }
    /**
   * @inheritdoc
   */ addEvent(name, attributesOrStartTime, startTime) {
        debugBuild.DEBUG_BUILD && logger.logger.log('[Tracing] Adding an event to span:', name);
        const time$1 = isSpanTimeInput(attributesOrStartTime) ? attributesOrStartTime : startTime || time.timestampInSeconds();
        const attributes = isSpanTimeInput(attributesOrStartTime) ? {} : attributesOrStartTime || {};
        const event = {
            name,
            time: spanUtils.spanTimeInputToSeconds(time$1),
            attributes
        };
        this._events.push(event);
        return this;
    }
    /**
   * This method should generally not be used,
   * but for now we need a way to publicly check if the `_isStandaloneSpan` flag is set.
   * USE THIS WITH CAUTION!
   * @internal
   * @hidden
   * @experimental
   */ isStandaloneSpan() {
        return !!this._isStandaloneSpan;
    }
    /** Emit `spanEnd` when the span is ended. */ _onSpanEnded() {
        const client = currentScopes.getClient();
        if (client) {
            client.emit('spanEnd', this);
        }
        // A segment span is basically the root span of a local span tree.
        // So for now, this is either what we previously refer to as the root span,
        // or a standalone span.
        const isSegmentSpan = this._isStandaloneSpan || this === spanUtils.getRootSpan(this);
        if (!isSegmentSpan) {
            return;
        }
        // if this is a standalone span, we send it immediately
        if (this._isStandaloneSpan) {
            if (this._sampled) {
                sendSpanEnvelope(envelope.createSpanEnvelope([
                    this
                ], client));
            } else {
                debugBuild.DEBUG_BUILD && logger.logger.log('[Tracing] Discarding standalone span because its trace was not chosen to be sampled.');
                if (client) {
                    client.recordDroppedEvent('sample_rate', 'span');
                }
            }
            return;
        }
        const transactionEvent = this._convertSpanToTransaction();
        if (transactionEvent) {
            const scope = utils.getCapturedScopesOnSpan(this).scope || currentScopes.getCurrentScope();
            scope.captureEvent(transactionEvent);
        }
    }
    /**
   * Finish the transaction & prepare the event to send to Sentry.
   */ _convertSpanToTransaction() {
        // We can only convert finished spans
        if (!isFullFinishedSpan(spanUtils.spanToJSON(this))) {
            return undefined;
        }
        if (!this._name) {
            debugBuild.DEBUG_BUILD && logger.logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');
            this._name = '<unlabeled transaction>';
        }
        const { scope: capturedSpanScope, isolationScope: capturedSpanIsolationScope } = utils.getCapturedScopesOnSpan(this);
        const scope = capturedSpanScope || currentScopes.getCurrentScope();
        const client = scope.getClient() || currentScopes.getClient();
        if (this._sampled !== true) {
            // At this point if `sampled !== true` we want to discard the transaction.
            debugBuild.DEBUG_BUILD && logger.logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');
            if (client) {
                client.recordDroppedEvent('sample_rate', 'transaction');
            }
            return undefined;
        }
        // The transaction span itself as well as any potential standalone spans should be filtered out
        const finishedSpans = spanUtils.getSpanDescendants(this).filter((span)=>span !== this && !isStandaloneSpan(span));
        const spans = finishedSpans.map((span)=>spanUtils.spanToJSON(span)).filter(isFullFinishedSpan);
        const source = this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];
        // remove internal root span attributes we don't need to send.
        /* eslint-disable @typescript-eslint/no-dynamic-delete */ delete this._attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];
        spans.forEach((span)=>{
            span.data && delete span.data[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];
        });
        // eslint-enabled-next-line @typescript-eslint/no-dynamic-delete
        const transaction = {
            contexts: {
                trace: spanUtils.spanToTransactionTraceContext(this)
            },
            spans: // spans.sort() mutates the array, but `spans` is already a copy so we can safely do this here
            // we do not use spans anymore after this point
            spans.length > MAX_SPAN_COUNT ? spans.sort((a, b)=>a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT) : spans,
            start_timestamp: this._startTime,
            timestamp: this._endTime,
            transaction: this._name,
            type: 'transaction',
            sdkProcessingMetadata: {
                capturedSpanScope,
                capturedSpanIsolationScope,
                ...object.dropUndefinedKeys({
                    dynamicSamplingContext: dynamicSamplingContext.getDynamicSamplingContextFromSpan(this)
                })
            },
            _metrics_summary: metricSummary.getMetricSummaryJsonForSpan(this),
            ...source && {
                transaction_info: {
                    source
                }
            }
        };
        const measurements = measurement.timedEventsToMeasurements(this._events);
        const hasMeasurements = measurements && Object.keys(measurements).length;
        if (hasMeasurements) {
            debugBuild.DEBUG_BUILD && logger.logger.log('[Measurements] Adding measurements to transaction event', JSON.stringify(measurements, undefined, 2));
            transaction.measurements = measurements;
        }
        return transaction;
    }
}
function isSpanTimeInput(value) {
    return value && typeof value === 'number' || value instanceof Date || Array.isArray(value);
}
// We want to filter out any incomplete SpanJSON objects
function isFullFinishedSpan(input) {
    return !!input.start_timestamp && !!input.timestamp && !!input.span_id && !!input.trace_id;
}
/** `SentrySpan`s can be sent as a standalone span rather than belonging to a transaction */ function isStandaloneSpan(span) {
    return span instanceof SentrySpan && span.isStandaloneSpan();
}
/**
 * Sends a `SpanEnvelope`.
 *
 * Note: If the envelope's spans are dropped, e.g. via `beforeSendSpan`,
 * the envelope will not be sent either.
 */ function sendSpanEnvelope(envelope) {
    const client = currentScopes.getClient();
    if (!client) {
        return;
    }
    const spanItems = envelope[1];
    if (!spanItems || spanItems.length === 0) {
        client.recordDroppedEvent('before_send', 'span');
        return;
    }
    // sendEnvelope should not throw
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    client.sendEnvelope(envelope);
}
exports.SentrySpan = SentrySpan; //# sourceMappingURL=sentrySpan.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/tracing/trace.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const carrier = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/carrier.js [app-ssr] (ecmascript)");
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const index = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/asyncContext/index.js [app-ssr] (ecmascript)");
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const semanticAttributes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/semanticAttributes.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const propagationContext = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js [app-ssr] (ecmascript)");
const tracing = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/tracing.js [app-ssr] (ecmascript)");
const handleCallbackErrors = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js [app-ssr] (ecmascript)");
const hasTracingEnabled = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js [app-ssr] (ecmascript)");
const spanOnScope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanOnScope.js [app-ssr] (ecmascript)");
const spanUtils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanUtils.js [app-ssr] (ecmascript)");
const dynamicSamplingContext = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js [app-ssr] (ecmascript)");
const logSpans = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/logSpans.js [app-ssr] (ecmascript)");
const sampling = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/sampling.js [app-ssr] (ecmascript)");
const sentryNonRecordingSpan = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js [app-ssr] (ecmascript)");
const sentrySpan = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js [app-ssr] (ecmascript)");
const spanstatus = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/spanstatus.js [app-ssr] (ecmascript)");
const utils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/utils.js [app-ssr] (ecmascript)");
const SUPPRESS_TRACING_KEY = '__SENTRY_SUPPRESS_TRACING__';
/**
 * Wraps a function with a transaction/span and finishes the span after the function is done.
 * The created span is the active span and will be used as parent by other spans created inside the function
 * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.
 *
 * If you want to create a span that is not set as active, use {@link startInactiveSpan}.
 *
 * You'll always get a span passed to the callback,
 * it may just be a non-recording span if the span is not sampled or if tracing is disabled.
 */ function startSpan(options, callback) {
    const acs = getAcs();
    if (acs.startSpan) {
        return acs.startSpan(options, callback);
    }
    const spanArguments = parseSentrySpanArguments(options);
    const { forceTransaction, parentSpan: customParentSpan } = options;
    return currentScopes.withScope(options.scope, ()=>{
        // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`
        const wrapper = getActiveSpanWrapper(customParentSpan);
        return wrapper(()=>{
            const scope = currentScopes.getCurrentScope();
            const parentSpan = getParentSpan(scope);
            const shouldSkipSpan = options.onlyIfParent && !parentSpan;
            const activeSpan = shouldSkipSpan ? new sentryNonRecordingSpan.SentryNonRecordingSpan() : createChildOrRootSpan({
                parentSpan,
                spanArguments,
                forceTransaction,
                scope
            });
            spanOnScope._setSpanForScope(scope, activeSpan);
            return handleCallbackErrors.handleCallbackErrors(()=>callback(activeSpan), ()=>{
                // Only update the span status if it hasn't been changed yet, and the span is not yet finished
                const { status } = spanUtils.spanToJSON(activeSpan);
                if (activeSpan.isRecording() && (!status || status === 'ok')) {
                    activeSpan.setStatus({
                        code: spanstatus.SPAN_STATUS_ERROR,
                        message: 'internal_error'
                    });
                }
            }, ()=>activeSpan.end());
        });
    });
}
/**
 * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span
 * after the function is done automatically. You'll have to call `span.end()` manually.
 *
 * The created span is the active span and will be used as parent by other spans created inside the function
 * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.
 *
 * You'll always get a span passed to the callback,
 * it may just be a non-recording span if the span is not sampled or if tracing is disabled.
 */ function startSpanManual(options, callback) {
    const acs = getAcs();
    if (acs.startSpanManual) {
        return acs.startSpanManual(options, callback);
    }
    const spanArguments = parseSentrySpanArguments(options);
    const { forceTransaction, parentSpan: customParentSpan } = options;
    return currentScopes.withScope(options.scope, ()=>{
        // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`
        const wrapper = getActiveSpanWrapper(customParentSpan);
        return wrapper(()=>{
            const scope = currentScopes.getCurrentScope();
            const parentSpan = getParentSpan(scope);
            const shouldSkipSpan = options.onlyIfParent && !parentSpan;
            const activeSpan = shouldSkipSpan ? new sentryNonRecordingSpan.SentryNonRecordingSpan() : createChildOrRootSpan({
                parentSpan,
                spanArguments,
                forceTransaction,
                scope
            });
            spanOnScope._setSpanForScope(scope, activeSpan);
            function finishAndSetSpan() {
                activeSpan.end();
            }
            return handleCallbackErrors.handleCallbackErrors(()=>callback(activeSpan, finishAndSetSpan), ()=>{
                // Only update the span status if it hasn't been changed yet, and the span is not yet finished
                const { status } = spanUtils.spanToJSON(activeSpan);
                if (activeSpan.isRecording() && (!status || status === 'ok')) {
                    activeSpan.setStatus({
                        code: spanstatus.SPAN_STATUS_ERROR,
                        message: 'internal_error'
                    });
                }
            });
        });
    });
}
/**
 * Creates a span. This span is not set as active, so will not get automatic instrumentation spans
 * as children or be able to be accessed via `Sentry.getActiveSpan()`.
 *
 * If you want to create a span that is set as active, use {@link startSpan}.
 *
 * This function will always return a span,
 * it may just be a non-recording span if the span is not sampled or if tracing is disabled.
 */ function startInactiveSpan(options) {
    const acs = getAcs();
    if (acs.startInactiveSpan) {
        return acs.startInactiveSpan(options);
    }
    const spanArguments = parseSentrySpanArguments(options);
    const { forceTransaction, parentSpan: customParentSpan } = options;
    // If `options.scope` is defined, we use this as as a wrapper,
    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`
    const wrapper = options.scope ? (callback)=>currentScopes.withScope(options.scope, callback) : customParentSpan !== undefined ? (callback)=>withActiveSpan(customParentSpan, callback) : (callback)=>callback();
    return wrapper(()=>{
        const scope = currentScopes.getCurrentScope();
        const parentSpan = getParentSpan(scope);
        const shouldSkipSpan = options.onlyIfParent && !parentSpan;
        if (shouldSkipSpan) {
            return new sentryNonRecordingSpan.SentryNonRecordingSpan();
        }
        return createChildOrRootSpan({
            parentSpan,
            spanArguments,
            forceTransaction,
            scope
        });
    });
}
/**
 * Continue a trace from `sentry-trace` and `baggage` values.
 * These values can be obtained from incoming request headers, or in the browser from `<meta name="sentry-trace">`
 * and `<meta name="baggage">` HTML tags.
 *
 * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically
 * be attached to the incoming trace.
 */ const continueTrace = ({ sentryTrace, baggage }, callback)=>{
    return currentScopes.withScope((scope)=>{
        const propagationContext = tracing.propagationContextFromHeaders(sentryTrace, baggage);
        scope.setPropagationContext(propagationContext);
        return callback();
    });
};
/**
 * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be
 * passed `null` to start an entirely new span tree.
 *
 * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,
 * spans started within the callback will not be attached to a parent span.
 * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.
 * @returns the value returned from the provided callback function.
 */ function withActiveSpan(span, callback) {
    const acs = getAcs();
    if (acs.withActiveSpan) {
        return acs.withActiveSpan(span, callback);
    }
    return currentScopes.withScope((scope)=>{
        spanOnScope._setSpanForScope(scope, span || undefined);
        return callback(scope);
    });
}
/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */ function suppressTracing(callback) {
    const acs = getAcs();
    if (acs.suppressTracing) {
        return acs.suppressTracing(callback);
    }
    return currentScopes.withScope((scope)=>{
        scope.setSDKProcessingMetadata({
            [SUPPRESS_TRACING_KEY]: true
        });
        return callback();
    });
}
/**
 * Starts a new trace for the duration of the provided callback. Spans started within the
 * callback will be part of the new trace instead of a potentially previously started trace.
 *
 * Important: Only use this function if you want to override the default trace lifetime and
 * propagation mechanism of the SDK for the duration and scope of the provided callback.
 * The newly created trace will also be the root of a new distributed trace, for example if
 * you make http requests within the callback.
 * This function might be useful if the operation you want to instrument should not be part
 * of a potentially ongoing trace.
 *
 * Default behavior:
 * - Server-side: A new trace is started for each incoming request.
 * - Browser: A new trace is started for each page our route. Navigating to a new route
 *            or page will automatically create a new trace.
 */ function startNewTrace(callback) {
    return currentScopes.withScope((scope)=>{
        scope.setPropagationContext({
            traceId: propagationContext.generateTraceId()
        });
        debugBuild.DEBUG_BUILD && logger.logger.info(`Starting a new trace with id ${scope.getPropagationContext().traceId}`);
        return withActiveSpan(null, callback);
    });
}
function createChildOrRootSpan({ parentSpan, spanArguments, forceTransaction, scope }) {
    if (!hasTracingEnabled.hasTracingEnabled()) {
        return new sentryNonRecordingSpan.SentryNonRecordingSpan();
    }
    const isolationScope = currentScopes.getIsolationScope();
    let span;
    if (parentSpan && !forceTransaction) {
        span = _startChildSpan(parentSpan, scope, spanArguments);
        spanUtils.addChildSpanToSpan(parentSpan, span);
    } else if (parentSpan) {
        // If we forced a transaction but have a parent span, make sure to continue from the parent span, not the scope
        const dsc = dynamicSamplingContext.getDynamicSamplingContextFromSpan(parentSpan);
        const { traceId, spanId: parentSpanId } = parentSpan.spanContext();
        const parentSampled = spanUtils.spanIsSampled(parentSpan);
        span = _startRootSpan({
            traceId,
            parentSpanId,
            ...spanArguments
        }, scope, parentSampled);
        dynamicSamplingContext.freezeDscOnSpan(span, dsc);
    } else {
        const { traceId, dsc, parentSpanId, sampled: parentSampled } = {
            ...isolationScope.getPropagationContext(),
            ...scope.getPropagationContext()
        };
        span = _startRootSpan({
            traceId,
            parentSpanId,
            ...spanArguments
        }, scope, parentSampled);
        if (dsc) {
            dynamicSamplingContext.freezeDscOnSpan(span, dsc);
        }
    }
    logSpans.logSpanStart(span);
    utils.setCapturedScopesOnSpan(span, scope, isolationScope);
    return span;
}
/**
 * This converts StartSpanOptions to SentrySpanArguments.
 * For the most part (for now) we accept the same options,
 * but some of them need to be transformed.
 */ function parseSentrySpanArguments(options) {
    const exp = options.experimental || {};
    const initialCtx = {
        isStandalone: exp.standalone,
        ...options
    };
    if (options.startTime) {
        const ctx = {
            ...initialCtx
        };
        ctx.startTimestamp = spanUtils.spanTimeInputToSeconds(options.startTime);
        delete ctx.startTime;
        return ctx;
    }
    return initialCtx;
}
function getAcs() {
    const carrier$1 = carrier.getMainCarrier();
    return index.getAsyncContextStrategy(carrier$1);
}
function _startRootSpan(spanArguments, scope, parentSampled) {
    const client = currentScopes.getClient();
    const options = client && client.getOptions() || {};
    const { name = '', attributes } = spanArguments;
    const [sampled, sampleRate] = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY] ? [
        false
    ] : sampling.sampleSpan(options, {
        name,
        parentSampled,
        attributes,
        transactionContext: {
            name,
            parentSampled
        }
    });
    const rootSpan = new sentrySpan.SentrySpan({
        ...spanArguments,
        attributes: {
            [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',
            ...spanArguments.attributes
        },
        sampled
    });
    if (sampleRate !== undefined) {
        rootSpan.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, sampleRate);
    }
    if (client) {
        client.emit('spanStart', rootSpan);
    }
    return rootSpan;
}
/**
 * Creates a new `Span` while setting the current `Span.id` as `parentSpanId`.
 * This inherits the sampling decision from the parent span.
 */ function _startChildSpan(parentSpan, scope, spanArguments) {
    const { spanId, traceId } = parentSpan.spanContext();
    const sampled = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY] ? false : spanUtils.spanIsSampled(parentSpan);
    const childSpan = sampled ? new sentrySpan.SentrySpan({
        ...spanArguments,
        parentSpanId: spanId,
        traceId,
        sampled
    }) : new sentryNonRecordingSpan.SentryNonRecordingSpan({
        traceId
    });
    spanUtils.addChildSpanToSpan(parentSpan, childSpan);
    const client = currentScopes.getClient();
    if (client) {
        client.emit('spanStart', childSpan);
        // If it has an endTimestamp, it's already ended
        if (spanArguments.endTimestamp) {
            client.emit('spanEnd', childSpan);
        }
    }
    return childSpan;
}
function getParentSpan(scope) {
    const span = spanOnScope._getSpanForScope(scope);
    if (!span) {
        return undefined;
    }
    const client = currentScopes.getClient();
    const options = client ? client.getOptions() : {};
    if (options.parentSpanIsAlwaysRootSpan) {
        return spanUtils.getRootSpan(span);
    }
    return span;
}
function getActiveSpanWrapper(parentSpan) {
    return parentSpan !== undefined ? (callback)=>{
        return withActiveSpan(parentSpan, callback);
    } : (callback)=>callback();
}
exports.continueTrace = continueTrace;
exports.startInactiveSpan = startInactiveSpan;
exports.startNewTrace = startNewTrace;
exports.startSpan = startSpan;
exports.startSpanManual = startSpanManual;
exports.suppressTracing = suppressTracing;
exports.withActiveSpan = withActiveSpan; //# sourceMappingURL=trace.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/tracing/idleSpan.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const semanticAttributes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/semanticAttributes.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const time = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)");
const hasTracingEnabled = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js [app-ssr] (ecmascript)");
const spanOnScope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanOnScope.js [app-ssr] (ecmascript)");
const spanUtils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanUtils.js [app-ssr] (ecmascript)");
const sentryNonRecordingSpan = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js [app-ssr] (ecmascript)");
const spanstatus = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/spanstatus.js [app-ssr] (ecmascript)");
const trace = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/trace.js [app-ssr] (ecmascript)");
const TRACING_DEFAULTS = {
    idleTimeout: 1000,
    finalTimeout: 30000,
    childSpanTimeout: 15000
};
const FINISH_REASON_HEARTBEAT_FAILED = 'heartbeatFailed';
const FINISH_REASON_IDLE_TIMEOUT = 'idleTimeout';
const FINISH_REASON_FINAL_TIMEOUT = 'finalTimeout';
const FINISH_REASON_EXTERNAL_FINISH = 'externalFinish';
/**
 * An idle span is a span that automatically finishes. It does this by tracking child spans as activities.
 * An idle span is always the active span.
 */ function startIdleSpan(startSpanOptions, options = {}) {
    // Activities store a list of active spans
    const activities = new Map();
    // We should not use heartbeat if we finished a span
    let _finished = false;
    // Timer that tracks idleTimeout
    let _idleTimeoutID;
    // The reason why the span was finished
    let _finishReason = FINISH_REASON_EXTERNAL_FINISH;
    let _autoFinishAllowed = !options.disableAutoFinish;
    const _cleanupHooks = [];
    const { idleTimeout = TRACING_DEFAULTS.idleTimeout, finalTimeout = TRACING_DEFAULTS.finalTimeout, childSpanTimeout = TRACING_DEFAULTS.childSpanTimeout, beforeSpanEnd } = options;
    const client = currentScopes.getClient();
    if (!client || !hasTracingEnabled.hasTracingEnabled()) {
        return new sentryNonRecordingSpan.SentryNonRecordingSpan();
    }
    const scope = currentScopes.getCurrentScope();
    const previousActiveSpan = spanUtils.getActiveSpan();
    const span = _startIdleSpan(startSpanOptions);
    // We patch span.end to ensure we can run some things before the span is ended
    // eslint-disable-next-line @typescript-eslint/unbound-method
    span.end = new Proxy(span.end, {
        apply (target, thisArg, args) {
            if (beforeSpanEnd) {
                beforeSpanEnd(span);
            }
            // Just ensuring that this keeps working, even if we ever have more arguments here
            const [definedEndTimestamp, ...rest] = args;
            const timestamp = definedEndTimestamp || time.timestampInSeconds();
            const spanEndTimestamp = spanUtils.spanTimeInputToSeconds(timestamp);
            // Ensure we end with the last span timestamp, if possible
            const spans = spanUtils.getSpanDescendants(span).filter((child)=>child !== span);
            // If we have no spans, we just end, nothing else to do here
            if (!spans.length) {
                onIdleSpanEnded(spanEndTimestamp);
                return Reflect.apply(target, thisArg, [
                    spanEndTimestamp,
                    ...rest
                ]);
            }
            const childEndTimestamps = spans.map((span)=>spanUtils.spanToJSON(span).timestamp).filter((timestamp)=>!!timestamp);
            const latestSpanEndTimestamp = childEndTimestamps.length ? Math.max(...childEndTimestamps) : undefined;
            // In reality this should always exist here, but type-wise it may be undefined...
            const spanStartTimestamp = spanUtils.spanToJSON(span).start_timestamp;
            // The final endTimestamp should:
            // * Never be before the span start timestamp
            // * Be the latestSpanEndTimestamp, if there is one, and it is smaller than the passed span end timestamp
            // * Otherwise be the passed end timestamp
            // Final timestamp can never be after finalTimeout
            const endTimestamp = Math.min(spanStartTimestamp ? spanStartTimestamp + finalTimeout / 1000 : Infinity, Math.max(spanStartTimestamp || -Infinity, Math.min(spanEndTimestamp, latestSpanEndTimestamp || Infinity)));
            onIdleSpanEnded(endTimestamp);
            return Reflect.apply(target, thisArg, [
                endTimestamp,
                ...rest
            ]);
        }
    });
    /**
   * Cancels the existing idle timeout, if there is one.
   */ function _cancelIdleTimeout() {
        if (_idleTimeoutID) {
            clearTimeout(_idleTimeoutID);
            _idleTimeoutID = undefined;
        }
    }
    /**
   * Restarts idle timeout, if there is no running idle timeout it will start one.
   */ function _restartIdleTimeout(endTimestamp) {
        _cancelIdleTimeout();
        _idleTimeoutID = setTimeout(()=>{
            if (!_finished && activities.size === 0 && _autoFinishAllowed) {
                _finishReason = FINISH_REASON_IDLE_TIMEOUT;
                span.end(endTimestamp);
            }
        }, idleTimeout);
    }
    /**
   * Restarts child span timeout, if there is none running it will start one.
   */ function _restartChildSpanTimeout(endTimestamp) {
        _idleTimeoutID = setTimeout(()=>{
            if (!_finished && _autoFinishAllowed) {
                _finishReason = FINISH_REASON_HEARTBEAT_FAILED;
                span.end(endTimestamp);
            }
        }, childSpanTimeout);
    }
    /**
   * Start tracking a specific activity.
   * @param spanId The span id that represents the activity
   */ function _pushActivity(spanId) {
        _cancelIdleTimeout();
        activities.set(spanId, true);
        const endTimestamp = time.timestampInSeconds();
        // We need to add the timeout here to have the real endtimestamp of the idle span
        // Remember timestampInSeconds is in seconds, timeout is in ms
        _restartChildSpanTimeout(endTimestamp + childSpanTimeout / 1000);
    }
    /**
   * Remove an activity from usage
   * @param spanId The span id that represents the activity
   */ function _popActivity(spanId) {
        if (activities.has(spanId)) {
            activities.delete(spanId);
        }
        if (activities.size === 0) {
            const endTimestamp = time.timestampInSeconds();
            // We need to add the timeout here to have the real endtimestamp of the idle span
            // Remember timestampInSeconds is in seconds, timeout is in ms
            _restartIdleTimeout(endTimestamp + idleTimeout / 1000);
        }
    }
    function onIdleSpanEnded(endTimestamp) {
        _finished = true;
        activities.clear();
        _cleanupHooks.forEach((cleanup)=>cleanup());
        spanOnScope._setSpanForScope(scope, previousActiveSpan);
        const spanJSON = spanUtils.spanToJSON(span);
        const { start_timestamp: startTimestamp } = spanJSON;
        // This should never happen, but to make TS happy...
        if (!startTimestamp) {
            return;
        }
        const attributes = spanJSON.data || {};
        if (!attributes[semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON]) {
            span.setAttribute(semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON, _finishReason);
        }
        logger.logger.log(`[Tracing] Idle span "${spanJSON.op}" finished`);
        const childSpans = spanUtils.getSpanDescendants(span).filter((child)=>child !== span);
        let discardedSpans = 0;
        childSpans.forEach((childSpan)=>{
            // We cancel all pending spans with status "cancelled" to indicate the idle span was finished early
            if (childSpan.isRecording()) {
                childSpan.setStatus({
                    code: spanstatus.SPAN_STATUS_ERROR,
                    message: 'cancelled'
                });
                childSpan.end(endTimestamp);
                debugBuild.DEBUG_BUILD && logger.logger.log('[Tracing] Cancelling span since span ended early', JSON.stringify(childSpan, undefined, 2));
            }
            const childSpanJSON = spanUtils.spanToJSON(childSpan);
            const { timestamp: childEndTimestamp = 0, start_timestamp: childStartTimestamp = 0 } = childSpanJSON;
            const spanStartedBeforeIdleSpanEnd = childStartTimestamp <= endTimestamp;
            // Add a delta with idle timeout so that we prevent false positives
            const timeoutWithMarginOfError = (finalTimeout + idleTimeout) / 1000;
            const spanEndedBeforeFinalTimeout = childEndTimestamp - childStartTimestamp <= timeoutWithMarginOfError;
            if (debugBuild.DEBUG_BUILD) {
                const stringifiedSpan = JSON.stringify(childSpan, undefined, 2);
                if (!spanStartedBeforeIdleSpanEnd) {
                    logger.logger.log('[Tracing] Discarding span since it happened after idle span was finished', stringifiedSpan);
                } else if (!spanEndedBeforeFinalTimeout) {
                    logger.logger.log('[Tracing] Discarding span since it finished after idle span final timeout', stringifiedSpan);
                }
            }
            if (!spanEndedBeforeFinalTimeout || !spanStartedBeforeIdleSpanEnd) {
                spanUtils.removeChildSpanFromSpan(span, childSpan);
                discardedSpans++;
            }
        });
        if (discardedSpans > 0) {
            span.setAttribute('sentry.idle_span_discarded_spans', discardedSpans);
        }
    }
    _cleanupHooks.push(client.on('spanStart', (startedSpan)=>{
        // If we already finished the idle span,
        // or if this is the idle span itself being started,
        // or if the started span has already been closed,
        // we don't care about it for activity
        if (_finished || startedSpan === span || !!spanUtils.spanToJSON(startedSpan).timestamp) {
            return;
        }
        const allSpans = spanUtils.getSpanDescendants(span);
        // If the span that was just started is a child of the idle span, we should track it
        if (allSpans.includes(startedSpan)) {
            _pushActivity(startedSpan.spanContext().spanId);
        }
    }));
    _cleanupHooks.push(client.on('spanEnd', (endedSpan)=>{
        if (_finished) {
            return;
        }
        _popActivity(endedSpan.spanContext().spanId);
    }));
    _cleanupHooks.push(client.on('idleSpanEnableAutoFinish', (spanToAllowAutoFinish)=>{
        if (spanToAllowAutoFinish === span) {
            _autoFinishAllowed = true;
            _restartIdleTimeout();
            if (activities.size) {
                _restartChildSpanTimeout();
            }
        }
    }));
    // We only start the initial idle timeout if we are not delaying the auto finish
    if (!options.disableAutoFinish) {
        _restartIdleTimeout();
    }
    setTimeout(()=>{
        if (!_finished) {
            span.setStatus({
                code: spanstatus.SPAN_STATUS_ERROR,
                message: 'deadline_exceeded'
            });
            _finishReason = FINISH_REASON_FINAL_TIMEOUT;
            span.end();
        }
    }, finalTimeout);
    return span;
}
function _startIdleSpan(options) {
    const span = trace.startInactiveSpan(options);
    spanOnScope._setSpanForScope(currentScopes.getCurrentScope(), span);
    debugBuild.DEBUG_BUILD && logger.logger.log('[Tracing] Started span is an idle span');
    return span;
}
exports.TRACING_DEFAULTS = TRACING_DEFAULTS;
exports.startIdleSpan = startIdleSpan; //# sourceMappingURL=idleSpan.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/eventProcessors.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const syncpromise = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js [app-ssr] (ecmascript)");
/**
 * Process an array of event processors, returning the processed event (or `null` if the event was dropped).
 */ function notifyEventProcessors(processors, event, hint, index = 0) {
    return new syncpromise.SyncPromise((resolve, reject)=>{
        const processor = processors[index];
        if (event === null || typeof processor !== 'function') {
            resolve(event);
        } else {
            const result = processor({
                ...event
            }, hint);
            debugBuild.DEBUG_BUILD && processor.id && result === null && logger.logger.log(`Event processor "${processor.id}" dropped event`);
            if (is.isThenable(result)) {
                void result.then((final)=>notifyEventProcessors(processors, final, hint, index + 1).then(resolve)).then(null, reject);
            } else {
                void notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);
            }
        }
    });
}
exports.notifyEventProcessors = notifyEventProcessors; //# sourceMappingURL=eventProcessors.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/debug-ids.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
let parsedStackResults;
let lastKeysCount;
let cachedFilenameDebugIds;
/**
 * Returns a map of filenames to debug identifiers.
 */ function getFilenameToDebugIdMap(stackParser) {
    const debugIdMap = worldwide.GLOBAL_OBJ._sentryDebugIds;
    if (!debugIdMap) {
        return {};
    }
    const debugIdKeys = Object.keys(debugIdMap);
    // If the count of registered globals hasn't changed since the last call, we
    // can just return the cached result.
    if (cachedFilenameDebugIds && debugIdKeys.length === lastKeysCount) {
        return cachedFilenameDebugIds;
    }
    lastKeysCount = debugIdKeys.length;
    // Build a map of filename -> debug_id.
    cachedFilenameDebugIds = debugIdKeys.reduce((acc, stackKey)=>{
        if (!parsedStackResults) {
            parsedStackResults = {};
        }
        const result = parsedStackResults[stackKey];
        if (result) {
            acc[result[0]] = result[1];
        } else {
            const parsedStack = stackParser(stackKey);
            for(let i = parsedStack.length - 1; i >= 0; i--){
                const stackFrame = parsedStack[i];
                const filename = stackFrame && stackFrame.filename;
                const debugId = debugIdMap[stackKey];
                if (filename && debugId) {
                    acc[filename] = debugId;
                    parsedStackResults[stackKey] = [
                        filename,
                        debugId
                    ];
                    break;
                }
            }
        }
        return acc;
    }, {});
    return cachedFilenameDebugIds;
}
/**
 * Returns a list of debug images for the given resources.
 */ function getDebugImagesForResources(stackParser, resource_paths) {
    const filenameDebugIdMap = getFilenameToDebugIdMap(stackParser);
    if (!filenameDebugIdMap) {
        return [];
    }
    const images = [];
    for (const path of resource_paths){
        if (path && filenameDebugIdMap[path]) {
            images.push({
                type: 'sourcemap',
                code_file: path,
                debug_id: filenameDebugIdMap[path]
            });
        }
    }
    return images;
}
exports.getDebugImagesForResources = getDebugImagesForResources;
exports.getFilenameToDebugIdMap = getFilenameToDebugIdMap; //# sourceMappingURL=debug-ids.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const dynamicSamplingContext = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js [app-ssr] (ecmascript)");
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
const merge = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/merge.js [app-ssr] (ecmascript)");
const spanUtils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanUtils.js [app-ssr] (ecmascript)");
/**
 * Applies data from the scope to the event and runs all event processors on it.
 */ function applyScopeDataToEvent(event, data) {
    const { fingerprint, span, breadcrumbs, sdkProcessingMetadata } = data;
    // Apply general data
    applyDataToEvent(event, data);
    // We want to set the trace context for normal events only if there isn't already
    // a trace context on the event. There is a product feature in place where we link
    // errors with transaction and it relies on that.
    if (span) {
        applySpanToEvent(event, span);
    }
    applyFingerprintToEvent(event, fingerprint);
    applyBreadcrumbsToEvent(event, breadcrumbs);
    applySdkMetadataToEvent(event, sdkProcessingMetadata);
}
/** Merge data of two scopes together. */ function mergeScopeData(data, mergeData) {
    const { extra, tags, user, contexts, level, sdkProcessingMetadata, breadcrumbs, fingerprint, eventProcessors, attachments, propagationContext, transactionName, span } = mergeData;
    mergeAndOverwriteScopeData(data, 'extra', extra);
    mergeAndOverwriteScopeData(data, 'tags', tags);
    mergeAndOverwriteScopeData(data, 'user', user);
    mergeAndOverwriteScopeData(data, 'contexts', contexts);
    data.sdkProcessingMetadata = merge.merge(data.sdkProcessingMetadata, sdkProcessingMetadata, 2);
    if (level) {
        data.level = level;
    }
    if (transactionName) {
        data.transactionName = transactionName;
    }
    if (span) {
        data.span = span;
    }
    if (breadcrumbs.length) {
        data.breadcrumbs = [
            ...data.breadcrumbs,
            ...breadcrumbs
        ];
    }
    if (fingerprint.length) {
        data.fingerprint = [
            ...data.fingerprint,
            ...fingerprint
        ];
    }
    if (eventProcessors.length) {
        data.eventProcessors = [
            ...data.eventProcessors,
            ...eventProcessors
        ];
    }
    if (attachments.length) {
        data.attachments = [
            ...data.attachments,
            ...attachments
        ];
    }
    data.propagationContext = {
        ...data.propagationContext,
        ...propagationContext
    };
}
/**
 * Merges certain scope data. Undefined values will overwrite any existing values.
 * Exported only for tests.
 */ function mergeAndOverwriteScopeData(data, prop, mergeVal) {
    data[prop] = merge.merge(data[prop], mergeVal, 1);
}
function applyDataToEvent(event, data) {
    const { extra, tags, user, contexts, level, transactionName } = data;
    const cleanedExtra = object.dropUndefinedKeys(extra);
    if (cleanedExtra && Object.keys(cleanedExtra).length) {
        event.extra = {
            ...cleanedExtra,
            ...event.extra
        };
    }
    const cleanedTags = object.dropUndefinedKeys(tags);
    if (cleanedTags && Object.keys(cleanedTags).length) {
        event.tags = {
            ...cleanedTags,
            ...event.tags
        };
    }
    const cleanedUser = object.dropUndefinedKeys(user);
    if (cleanedUser && Object.keys(cleanedUser).length) {
        event.user = {
            ...cleanedUser,
            ...event.user
        };
    }
    const cleanedContexts = object.dropUndefinedKeys(contexts);
    if (cleanedContexts && Object.keys(cleanedContexts).length) {
        event.contexts = {
            ...cleanedContexts,
            ...event.contexts
        };
    }
    if (level) {
        event.level = level;
    }
    // transaction events get their `transaction` from the root span name
    if (transactionName && event.type !== 'transaction') {
        event.transaction = transactionName;
    }
}
function applyBreadcrumbsToEvent(event, breadcrumbs) {
    const mergedBreadcrumbs = [
        ...event.breadcrumbs || [],
        ...breadcrumbs
    ];
    event.breadcrumbs = mergedBreadcrumbs.length ? mergedBreadcrumbs : undefined;
}
function applySdkMetadataToEvent(event, sdkProcessingMetadata) {
    event.sdkProcessingMetadata = {
        ...event.sdkProcessingMetadata,
        ...sdkProcessingMetadata
    };
}
function applySpanToEvent(event, span) {
    event.contexts = {
        trace: spanUtils.spanToTraceContext(span),
        ...event.contexts
    };
    event.sdkProcessingMetadata = {
        dynamicSamplingContext: dynamicSamplingContext.getDynamicSamplingContextFromSpan(span),
        ...event.sdkProcessingMetadata
    };
    const rootSpan = spanUtils.getRootSpan(span);
    const transactionName = spanUtils.spanToJSON(rootSpan).description;
    if (transactionName && !event.transaction && event.type === 'transaction') {
        event.transaction = transactionName;
    }
}
/**
 * Applies fingerprint from the scope to the event if there's one,
 * uses message if there's one instead or get rid of empty fingerprint
 */ function applyFingerprintToEvent(event, fingerprint) {
    // Make sure it's an array first and we actually have something in place
    event.fingerprint = event.fingerprint ? Array.isArray(event.fingerprint) ? event.fingerprint : [
        event.fingerprint
    ] : [];
    // If we have something on the scope, then merge it with event
    if (fingerprint) {
        event.fingerprint = event.fingerprint.concat(fingerprint);
    }
    // If we have no data at all, remove empty array default
    if (event.fingerprint && !event.fingerprint.length) {
        delete event.fingerprint;
    }
}
exports.applyScopeDataToEvent = applyScopeDataToEvent;
exports.mergeAndOverwriteScopeData = mergeAndOverwriteScopeData;
exports.mergeScopeData = mergeScopeData; //# sourceMappingURL=applyScopeDataToEvent.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils/prepareEvent.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const constants = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/constants.js [app-ssr] (ecmascript)");
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const eventProcessors = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/eventProcessors.js [app-ssr] (ecmascript)");
const scope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/scope.js [app-ssr] (ecmascript)");
const debugIds = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/debug-ids.js [app-ssr] (ecmascript)");
const misc = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/misc.js [app-ssr] (ecmascript)");
const normalize = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js [app-ssr] (ecmascript)");
const string = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/string.js [app-ssr] (ecmascript)");
const time = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)");
const applyScopeDataToEvent = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js [app-ssr] (ecmascript)");
/**
 * This type makes sure that we get either a CaptureContext, OR an EventHint.
 * It does not allow mixing them, which could lead to unexpected outcomes, e.g. this is disallowed:
 * { user: { id: '123' }, mechanism: { handled: false } }
 */ /**
 * Adds common information to events.
 *
 * The information includes release and environment from `options`,
 * breadcrumbs and context (extra, tags and user) from the scope.
 *
 * Information that is already present in the event is never overwritten. For
 * nested objects, such as the context, keys are merged.
 *
 * @param event The original event.
 * @param hint May contain additional information about the original exception.
 * @param scope A scope containing event metadata.
 * @returns A new event with more information.
 * @hidden
 */ function prepareEvent(options, event, hint, scope, client, isolationScope) {
    const { normalizeDepth = 3, normalizeMaxBreadth = 1000 } = options;
    const prepared = {
        ...event,
        event_id: event.event_id || hint.event_id || misc.uuid4(),
        timestamp: event.timestamp || time.dateTimestampInSeconds()
    };
    const integrations = hint.integrations || options.integrations.map((i)=>i.name);
    applyClientOptions(prepared, options);
    applyIntegrationsMetadata(prepared, integrations);
    if (client) {
        client.emit('applyFrameMetadata', event);
    }
    // Only put debug IDs onto frames for error events.
    if (event.type === undefined) {
        applyDebugIds(prepared, options.stackParser);
    }
    // If we have scope given to us, use it as the base for further modifications.
    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.
    const finalScope = getFinalScope(scope, hint.captureContext);
    if (hint.mechanism) {
        misc.addExceptionMechanism(prepared, hint.mechanism);
    }
    const clientEventProcessors = client ? client.getEventProcessors() : [];
    // This should be the last thing called, since we want that
    // {@link Scope.addEventProcessor} gets the finished prepared event.
    // Merge scope data together
    const data = currentScopes.getGlobalScope().getScopeData();
    if (isolationScope) {
        const isolationData = isolationScope.getScopeData();
        applyScopeDataToEvent.mergeScopeData(data, isolationData);
    }
    if (finalScope) {
        const finalScopeData = finalScope.getScopeData();
        applyScopeDataToEvent.mergeScopeData(data, finalScopeData);
    }
    const attachments = [
        ...hint.attachments || [],
        ...data.attachments
    ];
    if (attachments.length) {
        hint.attachments = attachments;
    }
    applyScopeDataToEvent.applyScopeDataToEvent(prepared, data);
    const eventProcessors$1 = [
        ...clientEventProcessors,
        // Run scope event processors _after_ all other processors
        ...data.eventProcessors
    ];
    const result = eventProcessors.notifyEventProcessors(eventProcessors$1, prepared, hint);
    return result.then((evt)=>{
        if (evt) {
            // We apply the debug_meta field only after all event processors have ran, so that if any event processors modified
            // file names (e.g.the RewriteFrames integration) the filename -> debug ID relationship isn't destroyed.
            // This should not cause any PII issues, since we're only moving data that is already on the event and not adding
            // any new data
            applyDebugMeta(evt);
        }
        if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {
            return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);
        }
        return evt;
    });
}
/**
 * Enhances event using the client configuration.
 * It takes care of all "static" values like environment, release and `dist`,
 * as well as truncating overly long values.
 *
 * Only exported for tests.
 *
 * @param event event instance to be enhanced
 */ function applyClientOptions(event, options) {
    const { environment, release, dist, maxValueLength = 250 } = options;
    // empty strings do not make sense for environment, release, and dist
    // so we handle them the same as if they were not provided
    event.environment = event.environment || environment || constants.DEFAULT_ENVIRONMENT;
    if (!event.release && release) {
        event.release = release;
    }
    if (!event.dist && dist) {
        event.dist = dist;
    }
    if (event.message) {
        event.message = string.truncate(event.message, maxValueLength);
    }
    const exception = event.exception && event.exception.values && event.exception.values[0];
    if (exception && exception.value) {
        exception.value = string.truncate(exception.value, maxValueLength);
    }
    const request = event.request;
    if (request && request.url) {
        request.url = string.truncate(request.url, maxValueLength);
    }
}
/**
 * Puts debug IDs into the stack frames of an error event.
 */ function applyDebugIds(event, stackParser) {
    // Build a map of filename -> debug_id
    const filenameDebugIdMap = debugIds.getFilenameToDebugIdMap(stackParser);
    try {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        event.exception.values.forEach((exception)=>{
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            exception.stacktrace.frames.forEach((frame)=>{
                if (filenameDebugIdMap && frame.filename) {
                    frame.debug_id = filenameDebugIdMap[frame.filename];
                }
            });
        });
    } catch (e) {
    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.
    }
}
/**
 * Moves debug IDs from the stack frames of an error event into the debug_meta field.
 */ function applyDebugMeta(event) {
    // Extract debug IDs and filenames from the stack frames on the event.
    const filenameDebugIdMap = {};
    try {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        event.exception.values.forEach((exception)=>{
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            exception.stacktrace.frames.forEach((frame)=>{
                if (frame.debug_id) {
                    if (frame.abs_path) {
                        filenameDebugIdMap[frame.abs_path] = frame.debug_id;
                    } else if (frame.filename) {
                        filenameDebugIdMap[frame.filename] = frame.debug_id;
                    }
                    delete frame.debug_id;
                }
            });
        });
    } catch (e) {
    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.
    }
    if (Object.keys(filenameDebugIdMap).length === 0) {
        return;
    }
    // Fill debug_meta information
    event.debug_meta = event.debug_meta || {};
    event.debug_meta.images = event.debug_meta.images || [];
    const images = event.debug_meta.images;
    Object.entries(filenameDebugIdMap).forEach(([filename, debug_id])=>{
        images.push({
            type: 'sourcemap',
            code_file: filename,
            debug_id
        });
    });
}
/**
 * This function adds all used integrations to the SDK info in the event.
 * @param event The event that will be filled with all integrations.
 */ function applyIntegrationsMetadata(event, integrationNames) {
    if (integrationNames.length > 0) {
        event.sdk = event.sdk || {};
        event.sdk.integrations = [
            ...event.sdk.integrations || [],
            ...integrationNames
        ];
    }
}
/**
 * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.
 * Normalized keys:
 * - `breadcrumbs.data`
 * - `user`
 * - `contexts`
 * - `extra`
 * @param event Event
 * @returns Normalized event
 */ function normalizeEvent(event, depth, maxBreadth) {
    if (!event) {
        return null;
    }
    const normalized = {
        ...event,
        ...event.breadcrumbs && {
            breadcrumbs: event.breadcrumbs.map((b)=>({
                    ...b,
                    ...b.data && {
                        data: normalize.normalize(b.data, depth, maxBreadth)
                    }
                }))
        },
        ...event.user && {
            user: normalize.normalize(event.user, depth, maxBreadth)
        },
        ...event.contexts && {
            contexts: normalize.normalize(event.contexts, depth, maxBreadth)
        },
        ...event.extra && {
            extra: normalize.normalize(event.extra, depth, maxBreadth)
        }
    };
    // event.contexts.trace stores information about a Transaction. Similarly,
    // event.spans[] stores information about child Spans. Given that a
    // Transaction is conceptually a Span, normalization should apply to both
    // Transactions and Spans consistently.
    // For now the decision is to skip normalization of Transactions and Spans,
    // so this block overwrites the normalized event to add back the original
    // Transaction information prior to normalization.
    if (event.contexts && event.contexts.trace && normalized.contexts) {
        normalized.contexts.trace = event.contexts.trace;
        // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it
        if (event.contexts.trace.data) {
            normalized.contexts.trace.data = normalize.normalize(event.contexts.trace.data, depth, maxBreadth);
        }
    }
    // event.spans[].data may contain circular/dangerous data so we need to normalize it
    if (event.spans) {
        normalized.spans = event.spans.map((span)=>{
            return {
                ...span,
                ...span.data && {
                    data: normalize.normalize(span.data, depth, maxBreadth)
                }
            };
        });
    }
    // event.contexts.flags (FeatureFlagContext) stores context for our feature
    // flag integrations. It has a greater nesting depth than our other typed
    // Contexts, so we re-normalize with a fixed depth of 3 here. We do not want
    // to skip this in case of conflicting, user-provided context.
    if (event.contexts && event.contexts.flags && normalized.contexts) {
        normalized.contexts.flags = normalize.normalize(event.contexts.flags, 3, maxBreadth);
    }
    return normalized;
}
function getFinalScope(scope$1, captureContext) {
    if (!captureContext) {
        return scope$1;
    }
    const finalScope = scope$1 ? scope$1.clone() : new scope.Scope();
    finalScope.update(captureContext);
    return finalScope;
}
/**
 * Parse either an `EventHint` directly, or convert a `CaptureContext` to an `EventHint`.
 * This is used to allow to update method signatures that used to accept a `CaptureContext` but should now accept an `EventHint`.
 */ function parseEventHintOrCaptureContext(hint) {
    if (!hint) {
        return undefined;
    }
    // If you pass a Scope or `() => Scope` as CaptureContext, we just return this as captureContext
    if (hintIsScopeOrFunction(hint)) {
        return {
            captureContext: hint
        };
    }
    if (hintIsScopeContext(hint)) {
        return {
            captureContext: hint
        };
    }
    return hint;
}
function hintIsScopeOrFunction(hint) {
    return hint instanceof scope.Scope || typeof hint === 'function';
}
const captureContextKeys = [
    'user',
    'level',
    'extra',
    'contexts',
    'tags',
    'fingerprint',
    'requestSession',
    'propagationContext'
];
function hintIsScopeContext(hint) {
    return Object.keys(hint).some((key)=>captureContextKeys.includes(key));
}
exports.applyClientOptions = applyClientOptions;
exports.applyDebugIds = applyDebugIds;
exports.applyDebugMeta = applyDebugMeta;
exports.parseEventHintOrCaptureContext = parseEventHintOrCaptureContext;
exports.prepareEvent = prepareEvent; //# sourceMappingURL=prepareEvent.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/exports.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const constants = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/constants.js [app-ssr] (ecmascript)");
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const session = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/session.js [app-ssr] (ecmascript)");
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const misc = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/misc.js [app-ssr] (ecmascript)");
const time = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)");
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
const prepareEvent = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/prepareEvent.js [app-ssr] (ecmascript)");
/**
 * Captures an exception event and sends it to Sentry.
 *
 * @param exception The exception to capture.
 * @param hint Optional additional data to attach to the Sentry event.
 * @returns the id of the captured Sentry event.
 */ function captureException(exception, hint) {
    return currentScopes.getCurrentScope().captureException(exception, prepareEvent.parseEventHintOrCaptureContext(hint));
}
/**
 * Captures a message event and sends it to Sentry.
 *
 * @param message The message to send to Sentry.
 * @param captureContext Define the level of the message or pass in additional data to attach to the message.
 * @returns the id of the captured message.
 */ function captureMessage(message, captureContext) {
    // This is necessary to provide explicit scopes upgrade, without changing the original
    // arity of the `captureMessage(message, level)` method.
    const level = typeof captureContext === 'string' ? captureContext : undefined;
    const context = typeof captureContext !== 'string' ? {
        captureContext
    } : undefined;
    return currentScopes.getCurrentScope().captureMessage(message, level, context);
}
/**
 * Captures a manually created event and sends it to Sentry.
 *
 * @param event The event to send to Sentry.
 * @param hint Optional additional data to attach to the Sentry event.
 * @returns the id of the captured event.
 */ function captureEvent(event, hint) {
    return currentScopes.getCurrentScope().captureEvent(event, hint);
}
/**
 * Sets context data with the given name.
 * @param name of the context
 * @param context Any kind of data. This data will be normalized.
 */ function setContext(name, context) {
    currentScopes.getIsolationScope().setContext(name, context);
}
/**
 * Set an object that will be merged sent as extra data with the event.
 * @param extras Extras object to merge into current context.
 */ function setExtras(extras) {
    currentScopes.getIsolationScope().setExtras(extras);
}
/**
 * Set key:value that will be sent as extra data with the event.
 * @param key String of extra
 * @param extra Any kind of data. This data will be normalized.
 */ function setExtra(key, extra) {
    currentScopes.getIsolationScope().setExtra(key, extra);
}
/**
 * Set an object that will be merged sent as tags data with the event.
 * @param tags Tags context object to merge into current context.
 */ function setTags(tags) {
    currentScopes.getIsolationScope().setTags(tags);
}
/**
 * Set key:value that will be sent as tags data with the event.
 *
 * Can also be used to unset a tag, by passing `undefined`.
 *
 * @param key String key of tag
 * @param value Value of tag
 */ function setTag(key, value) {
    currentScopes.getIsolationScope().setTag(key, value);
}
/**
 * Updates user context information for future events.
 *
 * @param user User context object to be set in the current context. Pass `null` to unset the user.
 */ function setUser(user) {
    currentScopes.getIsolationScope().setUser(user);
}
/**
 * The last error event id of the isolation scope.
 *
 * Warning: This function really returns the last recorded error event id on the current
 * isolation scope. If you call this function after handling a certain error and another error
 * is captured in between, the last one is returned instead of the one you might expect.
 * Also, ids of events that were never sent to Sentry (for example because
 * they were dropped in `beforeSend`) could be returned.
 *
 * @returns The last event id of the isolation scope.
 */ function lastEventId() {
    return currentScopes.getIsolationScope().lastEventId();
}
/**
 * Create a cron monitor check in and send it to Sentry.
 *
 * @param checkIn An object that describes a check in.
 * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want
 * to create a monitor automatically when sending a check in.
 */ function captureCheckIn(checkIn, upsertMonitorConfig) {
    const scope = currentScopes.getCurrentScope();
    const client = currentScopes.getClient();
    if (!client) {
        debugBuild.DEBUG_BUILD && logger.logger.warn('Cannot capture check-in. No client defined.');
    } else if (!client.captureCheckIn) {
        debugBuild.DEBUG_BUILD && logger.logger.warn('Cannot capture check-in. Client does not support sending check-ins.');
    } else {
        return client.captureCheckIn(checkIn, upsertMonitorConfig, scope);
    }
    return misc.uuid4();
}
/**
 * Wraps a callback with a cron monitor check in. The check in will be sent to Sentry when the callback finishes.
 *
 * @param monitorSlug The distinct slug of the monitor.
 * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want
 * to create a monitor automatically when sending a check in.
 */ function withMonitor(monitorSlug, callback, upsertMonitorConfig) {
    const checkInId = captureCheckIn({
        monitorSlug,
        status: 'in_progress'
    }, upsertMonitorConfig);
    const now = time.timestampInSeconds();
    function finishCheckIn(status) {
        captureCheckIn({
            monitorSlug,
            status,
            checkInId,
            duration: time.timestampInSeconds() - now
        });
    }
    return currentScopes.withIsolationScope(()=>{
        let maybePromiseResult;
        try {
            maybePromiseResult = callback();
        } catch (e) {
            finishCheckIn('error');
            throw e;
        }
        if (is.isThenable(maybePromiseResult)) {
            Promise.resolve(maybePromiseResult).then(()=>{
                finishCheckIn('ok');
            }, (e)=>{
                finishCheckIn('error');
                throw e;
            });
        } else {
            finishCheckIn('ok');
        }
        return maybePromiseResult;
    });
}
/**
 * Call `flush()` on the current client, if there is one. See {@link Client.flush}.
 *
 * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause
 * the client to wait until all events are sent before resolving the promise.
 * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it
 * doesn't (or if there's no client defined).
 */ async function flush(timeout) {
    const client = currentScopes.getClient();
    if (client) {
        return client.flush(timeout);
    }
    debugBuild.DEBUG_BUILD && logger.logger.warn('Cannot flush events. No client defined.');
    return Promise.resolve(false);
}
/**
 * Call `close()` on the current client, if there is one. See {@link Client.close}.
 *
 * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this
 * parameter will cause the client to wait until all events are sent before disabling itself.
 * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it
 * doesn't (or if there's no client defined).
 */ async function close(timeout) {
    const client = currentScopes.getClient();
    if (client) {
        return client.close(timeout);
    }
    debugBuild.DEBUG_BUILD && logger.logger.warn('Cannot flush events and disable SDK. No client defined.');
    return Promise.resolve(false);
}
/**
 * Returns true if Sentry has been properly initialized.
 */ function isInitialized() {
    return !!currentScopes.getClient();
}
/** If the SDK is initialized & enabled. */ function isEnabled() {
    const client = currentScopes.getClient();
    return !!client && client.getOptions().enabled !== false && !!client.getTransport();
}
/**
 * Add an event processor.
 * This will be added to the current isolation scope, ensuring any event that is processed in the current execution
 * context will have the processor applied.
 */ function addEventProcessor(callback) {
    currentScopes.getIsolationScope().addEventProcessor(callback);
}
/**
 * Start a session on the current isolation scope.
 *
 * @param context (optional) additional properties to be applied to the returned session object
 *
 * @returns the new active session
 */ function startSession(context) {
    const client = currentScopes.getClient();
    const isolationScope = currentScopes.getIsolationScope();
    const currentScope = currentScopes.getCurrentScope();
    const { release, environment = constants.DEFAULT_ENVIRONMENT } = client && client.getOptions() || {};
    // Will fetch userAgent if called from browser sdk
    const { userAgent } = worldwide.GLOBAL_OBJ.navigator || {};
    const session$1 = session.makeSession({
        release,
        environment,
        user: currentScope.getUser() || isolationScope.getUser(),
        ...userAgent && {
            userAgent
        },
        ...context
    });
    // End existing session if there's one
    const currentSession = isolationScope.getSession();
    if (currentSession && currentSession.status === 'ok') {
        session.updateSession(currentSession, {
            status: 'exited'
        });
    }
    endSession();
    // Afterwards we set the new session on the scope
    isolationScope.setSession(session$1);
    // TODO (v8): Remove this and only use the isolation scope(?).
    // For v7 though, we can't "soft-break" people using getCurrentHub().getScope().setSession()
    currentScope.setSession(session$1);
    return session$1;
}
/**
 * End the session on the current isolation scope.
 */ function endSession() {
    const isolationScope = currentScopes.getIsolationScope();
    const currentScope = currentScopes.getCurrentScope();
    const session$1 = currentScope.getSession() || isolationScope.getSession();
    if (session$1) {
        session.closeSession(session$1);
    }
    _sendSessionUpdate();
    // the session is over; take it off of the scope
    isolationScope.setSession();
    // TODO (v8): Remove this and only use the isolation scope(?).
    // For v7 though, we can't "soft-break" people using getCurrentHub().getScope().setSession()
    currentScope.setSession();
}
/**
 * Sends the current Session on the scope
 */ function _sendSessionUpdate() {
    const isolationScope = currentScopes.getIsolationScope();
    const currentScope = currentScopes.getCurrentScope();
    const client = currentScopes.getClient();
    // TODO (v8): Remove currentScope and only use the isolation scope(?).
    // For v7 though, we can't "soft-break" people using getCurrentHub().getScope().setSession()
    const session = currentScope.getSession() || isolationScope.getSession();
    if (session && client) {
        client.captureSession(session);
    }
}
/**
 * Sends the current session on the scope to Sentry
 *
 * @param end If set the session will be marked as exited and removed from the scope.
 *            Defaults to `false`.
 */ function captureSession(end = false) {
    // both send the update and pull the session from the scope
    if (end) {
        endSession();
        return;
    }
    // only send the update
    _sendSessionUpdate();
}
exports.addEventProcessor = addEventProcessor;
exports.captureCheckIn = captureCheckIn;
exports.captureEvent = captureEvent;
exports.captureException = captureException;
exports.captureMessage = captureMessage;
exports.captureSession = captureSession;
exports.close = close;
exports.endSession = endSession;
exports.flush = flush;
exports.isEnabled = isEnabled;
exports.isInitialized = isInitialized;
exports.lastEventId = lastEventId;
exports.setContext = setContext;
exports.setExtra = setExtra;
exports.setExtras = setExtras;
exports.setTag = setTag;
exports.setTags = setTags;
exports.setUser = setUser;
exports.startSession = startSession;
exports.withMonitor = withMonitor; //# sourceMappingURL=exports.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/sessionflusher.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
/**
 * @deprecated `SessionFlusher` is deprecated and will be removed in the next major version of the SDK.
 */ // TODO(v9): The goal for the SessionFlusher is to become a stupidly simple mechanism to aggregate "Sessions" (actually "RequestSessions"). It should probably live directly inside the Http integration/instrumentation.
// eslint-disable-next-line deprecation/deprecation
class SessionFlusher {
    // We adjust the type here to add the `unref()` part, as setInterval can technically return a number or a NodeJS.Timer
    constructor(client, attrs){
        this._client = client;
        this.flushTimeout = 60;
        this._pendingAggregates = new Map();
        this._isEnabled = true;
        // Call to setInterval, so that flush is called every 60 seconds.
        this._intervalId = setInterval(()=>this.flush(), this.flushTimeout * 1000);
        if (this._intervalId.unref) {
            this._intervalId.unref();
        }
        this._sessionAttrs = attrs;
    }
    /** Checks if `pendingAggregates` has entries, and if it does flushes them by calling `sendSession` */ flush() {
        const sessionAggregates = this.getSessionAggregates();
        if (sessionAggregates.aggregates.length === 0) {
            return;
        }
        this._pendingAggregates = new Map();
        this._client.sendSession(sessionAggregates);
    }
    /** Massages the entries in `pendingAggregates` and returns aggregated sessions */ getSessionAggregates() {
        const aggregates = Array.from(this._pendingAggregates.values());
        const sessionAggregates = {
            attrs: this._sessionAttrs,
            aggregates
        };
        return object.dropUndefinedKeys(sessionAggregates);
    }
    /** JSDoc */ close() {
        clearInterval(this._intervalId);
        this._isEnabled = false;
        this.flush();
    }
    /**
   * Wrapper function for _incrementSessionStatusCount that checks if the instance of SessionFlusher is enabled then
   * fetches the session status of the request from `Scope.getRequestSession().status` on the scope and passes them to
   * `_incrementSessionStatusCount` along with the start date
   */ incrementSessionStatusCount() {
        if (!this._isEnabled) {
            return;
        }
        const isolationScope = currentScopes.getIsolationScope();
        // eslint-disable-next-line deprecation/deprecation
        const requestSession = isolationScope.getRequestSession();
        if (requestSession && requestSession.status) {
            this._incrementSessionStatusCount(requestSession.status, new Date());
            // This is not entirely necessarily but is added as a safe guard to indicate the bounds of a request and so in
            // case captureRequestSession is called more than once to prevent double count
            // eslint-disable-next-line deprecation/deprecation
            isolationScope.setRequestSession(undefined);
        /* eslint-enable @typescript-eslint/no-unsafe-member-access */ }
    }
    /**
   * Increments status bucket in pendingAggregates buffer (internal state) corresponding to status of
   * the session received
   */ // eslint-disable-next-line deprecation/deprecation
    _incrementSessionStatusCount(status, date) {
        // Truncate minutes and seconds on Session Started attribute to have one minute bucket keys
        const sessionStartedTrunc = new Date(date).setSeconds(0, 0);
        // corresponds to aggregated sessions in one specific minute bucket
        // for example, {"started":"2021-03-16T08:00:00.000Z","exited":4, "errored": 1}
        let aggregationCounts = this._pendingAggregates.get(sessionStartedTrunc);
        if (!aggregationCounts) {
            aggregationCounts = {
                started: new Date(sessionStartedTrunc).toISOString()
            };
            this._pendingAggregates.set(sessionStartedTrunc, aggregationCounts);
        }
        switch(status){
            case 'errored':
                aggregationCounts.errored = (aggregationCounts.errored || 0) + 1;
                return aggregationCounts.errored;
            case 'ok':
                aggregationCounts.exited = (aggregationCounts.exited || 0) + 1;
                return aggregationCounts.exited;
            default:
                aggregationCounts.crashed = (aggregationCounts.crashed || 0) + 1;
                return aggregationCounts.crashed;
        }
    }
}
exports.SessionFlusher = SessionFlusher; //# sourceMappingURL=sessionflusher.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/api.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const dsn = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js [app-ssr] (ecmascript)");
const SENTRY_API_VERSION = '7';
/** Returns the prefix to construct Sentry ingestion API endpoints. */ function getBaseApiEndpoint(dsn) {
    const protocol = dsn.protocol ? `${dsn.protocol}:` : '';
    const port = dsn.port ? `:${dsn.port}` : '';
    return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;
}
/** Returns the ingest API endpoint for target. */ function _getIngestEndpoint(dsn) {
    return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;
}
/** Returns a URL-encoded string with auth config suitable for a query string. */ function _encodedAuth(dsn, sdkInfo) {
    const params = {
        sentry_version: SENTRY_API_VERSION
    };
    if (dsn.publicKey) {
        // We send only the minimum set of required information. See
        // https://github.com/getsentry/sentry-javascript/issues/2572.
        params.sentry_key = dsn.publicKey;
    }
    if (sdkInfo) {
        params.sentry_client = `${sdkInfo.name}/${sdkInfo.version}`;
    }
    return new URLSearchParams(params).toString();
}
/**
 * Returns the envelope endpoint URL with auth in the query string.
 *
 * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.
 */ function getEnvelopeEndpointWithUrlEncodedAuth(dsn, tunnel, sdkInfo) {
    return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;
}
/** Returns the url to the report dialog endpoint. */ function getReportDialogEndpoint(dsnLike, dialogOptions) {
    const dsn$1 = dsn.makeDsn(dsnLike);
    if (!dsn$1) {
        return '';
    }
    const endpoint = `${getBaseApiEndpoint(dsn$1)}embed/error-page/`;
    let encodedOptions = `dsn=${dsn.dsnToString(dsn$1)}`;
    for(const key in dialogOptions){
        if (key === 'dsn') {
            continue;
        }
        if (key === 'onClose') {
            continue;
        }
        if (key === 'user') {
            const user = dialogOptions.user;
            if (!user) {
                continue;
            }
            if (user.name) {
                encodedOptions += `&name=${encodeURIComponent(user.name)}`;
            }
            if (user.email) {
                encodedOptions += `&email=${encodeURIComponent(user.email)}`;
            }
        } else {
            encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key])}`;
        }
    }
    return `${endpoint}?${encodedOptions}`;
}
exports.getEnvelopeEndpointWithUrlEncodedAuth = getEnvelopeEndpointWithUrlEncodedAuth;
exports.getReportDialogEndpoint = getReportDialogEndpoint; //# sourceMappingURL=api.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/integration.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const installedIntegrations = [];
/** Map of integrations assigned to a client */ /**
 * Remove duplicates from the given array, preferring the last instance of any duplicate. Not guaranteed to
 * preserve the order of integrations in the array.
 *
 * @private
 */ function filterDuplicates(integrations) {
    const integrationsByName = {};
    integrations.forEach((currentInstance)=>{
        const { name } = currentInstance;
        const existingInstance = integrationsByName[name];
        // We want integrations later in the array to overwrite earlier ones of the same type, except that we never want a
        // default instance to overwrite an existing user instance
        if (existingInstance && !existingInstance.isDefaultInstance && currentInstance.isDefaultInstance) {
            return;
        }
        integrationsByName[name] = currentInstance;
    });
    return Object.values(integrationsByName);
}
/** Gets integrations to install */ function getIntegrationsToSetup(options) {
    const defaultIntegrations = options.defaultIntegrations || [];
    const userIntegrations = options.integrations;
    // We flag default instances, so that later we can tell them apart from any user-created instances of the same class
    defaultIntegrations.forEach((integration)=>{
        integration.isDefaultInstance = true;
    });
    let integrations;
    if (Array.isArray(userIntegrations)) {
        integrations = [
            ...defaultIntegrations,
            ...userIntegrations
        ];
    } else if (typeof userIntegrations === 'function') {
        const resolvedUserIntegrations = userIntegrations(defaultIntegrations);
        integrations = Array.isArray(resolvedUserIntegrations) ? resolvedUserIntegrations : [
            resolvedUserIntegrations
        ];
    } else {
        integrations = defaultIntegrations;
    }
    const finalIntegrations = filterDuplicates(integrations);
    // The `Debug` integration prints copies of the `event` and `hint` which will be passed to `beforeSend` or
    // `beforeSendTransaction`. It therefore has to run after all other integrations, so that the changes of all event
    // processors will be reflected in the printed values. For lack of a more elegant way to guarantee that, we therefore
    // locate it and, assuming it exists, pop it out of its current spot and shove it onto the end of the array.
    const debugIndex = finalIntegrations.findIndex((integration)=>integration.name === 'Debug');
    if (debugIndex > -1) {
        const [debugInstance] = finalIntegrations.splice(debugIndex, 1);
        finalIntegrations.push(debugInstance);
    }
    return finalIntegrations;
}
/**
 * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default
 * integrations are added unless they were already provided before.
 * @param integrations array of integration instances
 * @param withDefault should enable default integrations
 */ function setupIntegrations(client, integrations) {
    const integrationIndex = {};
    integrations.forEach((integration)=>{
        // guard against empty provided integrations
        if (integration) {
            setupIntegration(client, integration, integrationIndex);
        }
    });
    return integrationIndex;
}
/**
 * Execute the `afterAllSetup` hooks of the given integrations.
 */ function afterSetupIntegrations(client, integrations) {
    for (const integration of integrations){
        // guard against empty provided integrations
        if (integration && integration.afterAllSetup) {
            integration.afterAllSetup(client);
        }
    }
}
/** Setup a single integration.  */ function setupIntegration(client, integration, integrationIndex) {
    if (integrationIndex[integration.name]) {
        debugBuild.DEBUG_BUILD && logger.logger.log(`Integration skipped because it was already installed: ${integration.name}`);
        return;
    }
    integrationIndex[integration.name] = integration;
    // `setupOnce` is only called the first time
    if (installedIntegrations.indexOf(integration.name) === -1 && typeof integration.setupOnce === 'function') {
        integration.setupOnce();
        installedIntegrations.push(integration.name);
    }
    // `setup` is run for each client
    if (integration.setup && typeof integration.setup === 'function') {
        integration.setup(client);
    }
    if (typeof integration.preprocessEvent === 'function') {
        const callback = integration.preprocessEvent.bind(integration);
        client.on('preprocessEvent', (event, hint)=>callback(event, hint, client));
    }
    if (typeof integration.processEvent === 'function') {
        const callback = integration.processEvent.bind(integration);
        const processor = Object.assign((event, hint)=>callback(event, hint, client), {
            id: integration.name
        });
        client.addEventProcessor(processor);
    }
    debugBuild.DEBUG_BUILD && logger.logger.log(`Integration installed: ${integration.name}`);
}
/** Add an integration to the current scope's client. */ function addIntegration(integration) {
    const client = currentScopes.getClient();
    if (!client) {
        debugBuild.DEBUG_BUILD && logger.logger.warn(`Cannot add integration "${integration.name}" because no SDK Client is available.`);
        return;
    }
    client.addIntegration(integration);
}
/**
 * Define an integration function that can be used to create an integration instance.
 * Note that this by design hides the implementation details of the integration, as they are considered internal.
 */ function defineIntegration(fn) {
    return fn;
}
exports.addIntegration = addIntegration;
exports.afterSetupIntegrations = afterSetupIntegrations;
exports.defineIntegration = defineIntegration;
exports.getIntegrationsToSetup = getIntegrationsToSetup;
exports.installedIntegrations = installedIntegrations;
exports.setupIntegration = setupIntegration;
exports.setupIntegrations = setupIntegrations; //# sourceMappingURL=integration.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/clientreport.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const envelope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js [app-ssr] (ecmascript)");
const time = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)");
/**
 * Creates client report envelope
 * @param discarded_events An array of discard events
 * @param dsn A DSN that can be set on the header. Optional.
 */ function createClientReportEnvelope(discarded_events, dsn, timestamp) {
    const clientReportItem = [
        {
            type: 'client_report'
        },
        {
            timestamp: timestamp || time.dateTimestampInSeconds(),
            discarded_events
        }
    ];
    return envelope.createEnvelope(dsn ? {
        dsn
    } : {}, [
        clientReportItem
    ]);
}
exports.createClientReportEnvelope = createClientReportEnvelope; //# sourceMappingURL=clientreport.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/error.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
/** An error emitted by Sentry SDKs and related utilities. */ class SentryError extends Error {
    /** Display name of this error instance. */ constructor(message, logLevel = 'warn'){
        super(message);
        this.message = message;
        this.name = new.target.prototype.constructor.name;
        // This sets the prototype to be `Error`, not `SentryError`. It's unclear why we do this, but commenting this line
        // out causes various (seemingly totally unrelated) playwright tests consistently time out. FYI, this makes
        // instances of `SentryError` fail `obj instanceof SentryError` checks.
        Object.setPrototypeOf(this, new.target.prototype);
        this.logLevel = logLevel;
    }
}
exports.SentryError = SentryError; //# sourceMappingURL=error.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/baseclient.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const api = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/api.js [app-ssr] (ecmascript)");
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const envelope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/envelope.js [app-ssr] (ecmascript)");
const integration = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integration.js [app-ssr] (ecmascript)");
const session = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/session.js [app-ssr] (ecmascript)");
const dynamicSamplingContext = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js [app-ssr] (ecmascript)");
const clientreport = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/clientreport.js [app-ssr] (ecmascript)");
const dsn = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js [app-ssr] (ecmascript)");
const envelope$1 = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js [app-ssr] (ecmascript)");
const error = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/error.js [app-ssr] (ecmascript)");
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const misc = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/misc.js [app-ssr] (ecmascript)");
const syncpromise = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js [app-ssr] (ecmascript)");
const parseSampleRate = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js [app-ssr] (ecmascript)");
const prepareEvent = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/prepareEvent.js [app-ssr] (ecmascript)");
const spanUtils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanUtils.js [app-ssr] (ecmascript)");
const ALREADY_SEEN_ERROR = "Not capturing exception because it's already been captured.";
/**
 * Base implementation for all JavaScript SDK clients.
 *
 * Call the constructor with the corresponding options
 * specific to the client subclass. To access these options later, use
 * {@link Client.getOptions}.
 *
 * If a Dsn is specified in the options, it will be parsed and stored. Use
 * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is
 * invalid, the constructor will throw a {@link SentryException}. Note that
 * without a valid Dsn, the SDK will not send any events to Sentry.
 *
 * Before sending an event, it is passed through
 * {@link BaseClient._prepareEvent} to add SDK information and scope data
 * (breadcrumbs and context). To add more custom information, override this
 * method and extend the resulting prepared event.
 *
 * To issue automatically created events (e.g. via instrumentation), use
 * {@link Client.captureEvent}. It will prepare the event and pass it through
 * the callback lifecycle. To issue auto-breadcrumbs, use
 * {@link Client.addBreadcrumb}.
 *
 * @example
 * class NodeClient extends BaseClient<NodeOptions> {
 *   public constructor(options: NodeOptions) {
 *     super(options);
 *   }
 *
 *   // ...
 * }
 */ class BaseClient {
    /** Options passed to the SDK. */ /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */ /** Array of set up integrations. */ /** Number of calls being processed */ /** Holds flushable  */ // eslint-disable-next-line @typescript-eslint/ban-types
    /**
   * Initializes this client instance.
   *
   * @param options Options for the client.
   */ constructor(options){
        this._options = options;
        this._integrations = {};
        this._numProcessing = 0;
        this._outcomes = {};
        this._hooks = {};
        this._eventProcessors = [];
        if (options.dsn) {
            this._dsn = dsn.makeDsn(options.dsn);
        } else {
            debugBuild.DEBUG_BUILD && logger.logger.warn('No DSN provided, client will not send events.');
        }
        if (this._dsn) {
            const url = api.getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, options.tunnel, options._metadata ? options._metadata.sdk : undefined);
            this._transport = options.transport({
                tunnel: this._options.tunnel,
                recordDroppedEvent: this.recordDroppedEvent.bind(this),
                ...options.transportOptions,
                url
            });
        }
        // TODO(v9): Remove this deprecation warning
        const tracingOptions = [
            'enableTracing',
            'tracesSampleRate',
            'tracesSampler'
        ];
        const undefinedOption = tracingOptions.find((option)=>option in options && options[option] == undefined);
        if (undefinedOption) {
            logger.consoleSandbox(()=>{
                // eslint-disable-next-line no-console
                console.warn(`[Sentry] Deprecation warning: \`${undefinedOption}\` is set to undefined, which leads to tracing being enabled. In v9, a value of \`undefined\` will result in tracing being disabled.`);
            });
        }
    }
    /**
   * @inheritDoc
   */ captureException(exception, hint, scope) {
        const eventId = misc.uuid4();
        // ensure we haven't captured this very object before
        if (misc.checkOrSetAlreadyCaught(exception)) {
            debugBuild.DEBUG_BUILD && logger.logger.log(ALREADY_SEEN_ERROR);
            return eventId;
        }
        const hintWithEventId = {
            event_id: eventId,
            ...hint
        };
        this._process(this.eventFromException(exception, hintWithEventId).then((event)=>this._captureEvent(event, hintWithEventId, scope)));
        return hintWithEventId.event_id;
    }
    /**
   * @inheritDoc
   */ captureMessage(message, level, hint, currentScope) {
        const hintWithEventId = {
            event_id: misc.uuid4(),
            ...hint
        };
        const eventMessage = is.isParameterizedString(message) ? message : String(message);
        const promisedEvent = is.isPrimitive(message) ? this.eventFromMessage(eventMessage, level, hintWithEventId) : this.eventFromException(message, hintWithEventId);
        this._process(promisedEvent.then((event)=>this._captureEvent(event, hintWithEventId, currentScope)));
        return hintWithEventId.event_id;
    }
    /**
   * @inheritDoc
   */ captureEvent(event, hint, currentScope) {
        const eventId = misc.uuid4();
        // ensure we haven't captured this very object before
        if (hint && hint.originalException && misc.checkOrSetAlreadyCaught(hint.originalException)) {
            debugBuild.DEBUG_BUILD && logger.logger.log(ALREADY_SEEN_ERROR);
            return eventId;
        }
        const hintWithEventId = {
            event_id: eventId,
            ...hint
        };
        const sdkProcessingMetadata = event.sdkProcessingMetadata || {};
        const capturedSpanScope = sdkProcessingMetadata.capturedSpanScope;
        this._process(this._captureEvent(event, hintWithEventId, capturedSpanScope || currentScope));
        return hintWithEventId.event_id;
    }
    /**
   * @inheritDoc
   */ captureSession(session$1) {
        if (!(typeof session$1.release === 'string')) {
            debugBuild.DEBUG_BUILD && logger.logger.warn('Discarded session because of missing or non-string release');
        } else {
            this.sendSession(session$1);
            // After sending, we set init false to indicate it's not the first occurrence
            session.updateSession(session$1, {
                init: false
            });
        }
    }
    /**
   * @inheritDoc
   */ getDsn() {
        return this._dsn;
    }
    /**
   * @inheritDoc
   */ getOptions() {
        return this._options;
    }
    /**
   * @see SdkMetadata
   *
   * @return The metadata of the SDK
   */ getSdkMetadata() {
        return this._options._metadata;
    }
    /**
   * @inheritDoc
   */ getTransport() {
        return this._transport;
    }
    /**
   * @inheritDoc
   */ flush(timeout) {
        const transport = this._transport;
        if (transport) {
            this.emit('flush');
            return this._isClientDoneProcessing(timeout).then((clientFinished)=>{
                return transport.flush(timeout).then((transportFlushed)=>clientFinished && transportFlushed);
            });
        } else {
            return syncpromise.resolvedSyncPromise(true);
        }
    }
    /**
   * @inheritDoc
   */ close(timeout) {
        return this.flush(timeout).then((result)=>{
            this.getOptions().enabled = false;
            this.emit('close');
            return result;
        });
    }
    /** Get all installed event processors. */ getEventProcessors() {
        return this._eventProcessors;
    }
    /** @inheritDoc */ addEventProcessor(eventProcessor) {
        this._eventProcessors.push(eventProcessor);
    }
    /** @inheritdoc */ init() {
        if (this._isEnabled() || // Force integrations to be setup even if no DSN was set when we have
        // Spotlight enabled. This is particularly important for browser as we
        // don't support the `spotlight` option there and rely on the users
        // adding the `spotlightBrowserIntegration()` to their integrations which
        // wouldn't get initialized with the check below when there's no DSN set.
        this._options.integrations.some(({ name })=>name.startsWith('Spotlight'))) {
            this._setupIntegrations();
        }
    }
    /**
   * Gets an installed integration by its name.
   *
   * @returns The installed integration or `undefined` if no integration with that `name` was installed.
   */ getIntegrationByName(integrationName) {
        return this._integrations[integrationName];
    }
    /**
   * @inheritDoc
   */ addIntegration(integration$1) {
        const isAlreadyInstalled = this._integrations[integration$1.name];
        // This hook takes care of only installing if not already installed
        integration.setupIntegration(this, integration$1, this._integrations);
        // Here we need to check manually to make sure to not run this multiple times
        if (!isAlreadyInstalled) {
            integration.afterSetupIntegrations(this, [
                integration$1
            ]);
        }
    }
    /**
   * @inheritDoc
   */ sendEvent(event, hint = {}) {
        this.emit('beforeSendEvent', event, hint);
        let env = envelope.createEventEnvelope(event, this._dsn, this._options._metadata, this._options.tunnel);
        for (const attachment of hint.attachments || []){
            env = envelope$1.addItemToEnvelope(env, envelope$1.createAttachmentEnvelopeItem(attachment));
        }
        const promise = this.sendEnvelope(env);
        if (promise) {
            promise.then((sendResponse)=>this.emit('afterSendEvent', event, sendResponse), null);
        }
    }
    /**
   * @inheritDoc
   */ sendSession(session) {
        const env = envelope.createSessionEnvelope(session, this._dsn, this._options._metadata, this._options.tunnel);
        // sendEnvelope should not throw
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.sendEnvelope(env);
    }
    /**
   * @inheritDoc
   */ recordDroppedEvent(reason, category, eventOrCount) {
        if (this._options.sendClientReports) {
            // TODO v9: We do not need the `event` passed as third argument anymore, and can possibly remove this overload
            // If event is passed as third argument, we assume this is a count of 1
            const count = typeof eventOrCount === 'number' ? eventOrCount : 1;
            // We want to track each category (error, transaction, session, replay_event) separately
            // but still keep the distinction between different type of outcomes.
            // We could use nested maps, but it's much easier to read and type this way.
            // A correct type for map-based implementation if we want to go that route
            // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`
            // With typescript 4.1 we could even use template literal types
            const key = `${reason}:${category}`;
            debugBuild.DEBUG_BUILD && logger.logger.log(`Recording outcome: "${key}"${count > 1 ? ` (${count} times)` : ''}`);
            this._outcomes[key] = (this._outcomes[key] || 0) + count;
        }
    }
    // Keep on() & emit() signatures in sync with types' client.ts interface
    /* eslint-disable @typescript-eslint/unified-signatures */ /** @inheritdoc */ /** @inheritdoc */ on(hook, callback) {
        const hooks = this._hooks[hook] = this._hooks[hook] || [];
        // @ts-expect-error We assume the types are correct
        hooks.push(callback);
        // This function returns a callback execution handler that, when invoked,
        // deregisters a callback. This is crucial for managing instances where callbacks
        // need to be unregistered to prevent self-referencing in callback closures,
        // ensuring proper garbage collection.
        return ()=>{
            // @ts-expect-error We assume the types are correct
            const cbIndex = hooks.indexOf(callback);
            if (cbIndex > -1) {
                hooks.splice(cbIndex, 1);
            }
        };
    }
    /** @inheritdoc */ /** @inheritdoc */ emit(hook, ...rest) {
        const callbacks = this._hooks[hook];
        if (callbacks) {
            callbacks.forEach((callback)=>callback(...rest));
        }
    }
    /**
   * @inheritdoc
   */ sendEnvelope(envelope) {
        this.emit('beforeEnvelope', envelope);
        if (this._isEnabled() && this._transport) {
            return this._transport.send(envelope).then(null, (reason)=>{
                debugBuild.DEBUG_BUILD && logger.logger.error('Error while sending envelope:', reason);
                return reason;
            });
        }
        debugBuild.DEBUG_BUILD && logger.logger.error('Transport disabled');
        return syncpromise.resolvedSyncPromise({});
    }
    /* eslint-enable @typescript-eslint/unified-signatures */ /** Setup integrations for this client. */ _setupIntegrations() {
        const { integrations } = this._options;
        this._integrations = integration.setupIntegrations(this, integrations);
        integration.afterSetupIntegrations(this, integrations);
    }
    /** Updates existing session based on the provided event */ _updateSessionFromEvent(session$1, event) {
        let crashed = false;
        let errored = false;
        const exceptions = event.exception && event.exception.values;
        if (exceptions) {
            errored = true;
            for (const ex of exceptions){
                const mechanism = ex.mechanism;
                if (mechanism && mechanism.handled === false) {
                    crashed = true;
                    break;
                }
            }
        }
        // A session is updated and that session update is sent in only one of the two following scenarios:
        // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update
        // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update
        const sessionNonTerminal = session$1.status === 'ok';
        const shouldUpdateAndSend = sessionNonTerminal && session$1.errors === 0 || sessionNonTerminal && crashed;
        if (shouldUpdateAndSend) {
            session.updateSession(session$1, {
                ...crashed && {
                    status: 'crashed'
                },
                errors: session$1.errors || Number(errored || crashed)
            });
            this.captureSession(session$1);
        }
    }
    /**
   * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying
   * "no" (resolving to `false`) in order to give the client a chance to potentially finish first.
   *
   * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not
   * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to
   * `true`.
   * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and
   * `false` otherwise
   */ _isClientDoneProcessing(timeout) {
        return new syncpromise.SyncPromise((resolve)=>{
            let ticked = 0;
            const tick = 1;
            const interval = setInterval(()=>{
                if (this._numProcessing == 0) {
                    clearInterval(interval);
                    resolve(true);
                } else {
                    ticked += tick;
                    if (timeout && ticked >= timeout) {
                        clearInterval(interval);
                        resolve(false);
                    }
                }
            }, tick);
        });
    }
    /** Determines whether this SDK is enabled and a transport is present. */ _isEnabled() {
        return this.getOptions().enabled !== false && this._transport !== undefined;
    }
    /**
   * Adds common information to events.
   *
   * The information includes release and environment from `options`,
   * breadcrumbs and context (extra, tags and user) from the scope.
   *
   * Information that is already present in the event is never overwritten. For
   * nested objects, such as the context, keys are merged.
   *
   * @param event The original event.
   * @param hint May contain additional information about the original exception.
   * @param currentScope A scope containing event metadata.
   * @returns A new event with more information.
   */ _prepareEvent(event, hint, currentScope = currentScopes.getCurrentScope(), isolationScope = currentScopes.getIsolationScope()) {
        const options = this.getOptions();
        const integrations = Object.keys(this._integrations);
        if (!hint.integrations && integrations.length > 0) {
            hint.integrations = integrations;
        }
        this.emit('preprocessEvent', event, hint);
        if (!event.type) {
            isolationScope.setLastEventId(event.event_id || hint.event_id);
        }
        return prepareEvent.prepareEvent(options, event, hint, currentScope, this, isolationScope).then((evt)=>{
            if (evt === null) {
                return evt;
            }
            evt.contexts = {
                trace: currentScopes.getTraceContextFromScope(currentScope),
                ...evt.contexts
            };
            const dynamicSamplingContext$1 = dynamicSamplingContext.getDynamicSamplingContextFromScope(this, currentScope);
            evt.sdkProcessingMetadata = {
                dynamicSamplingContext: dynamicSamplingContext$1,
                ...evt.sdkProcessingMetadata
            };
            return evt;
        });
    }
    /**
   * Processes the event and logs an error in case of rejection
   * @param event
   * @param hint
   * @param scope
   */ _captureEvent(event, hint = {}, scope) {
        return this._processEvent(event, hint, scope).then((finalEvent)=>{
            return finalEvent.event_id;
        }, (reason)=>{
            if (debugBuild.DEBUG_BUILD) {
                // If something's gone wrong, log the error as a warning. If it's just us having used a `SentryError` for
                // control flow, log just the message (no stack) as a log-level log.
                const sentryError = reason;
                if (sentryError.logLevel === 'log') {
                    logger.logger.log(sentryError.message);
                } else {
                    logger.logger.warn(sentryError);
                }
            }
            return undefined;
        });
    }
    /**
   * Processes an event (either error or message) and sends it to Sentry.
   *
   * This also adds breadcrumbs and context information to the event. However,
   * platform specific meta data (such as the User's IP address) must be added
   * by the SDK implementor.
   *
   *
   * @param event The event to send to Sentry.
   * @param hint May contain additional information about the original exception.
   * @param currentScope A scope containing event metadata.
   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.
   */ _processEvent(event, hint, currentScope) {
        const options = this.getOptions();
        const { sampleRate } = options;
        const isTransaction = isTransactionEvent(event);
        const isError = isErrorEvent(event);
        const eventType = event.type || 'error';
        const beforeSendLabel = `before send for type \`${eventType}\``;
        // 1.0 === 100% events are sent
        // 0.0 === 0% events are sent
        // Sampling for transaction happens somewhere else
        const parsedSampleRate = typeof sampleRate === 'undefined' ? undefined : parseSampleRate.parseSampleRate(sampleRate);
        if (isError && typeof parsedSampleRate === 'number' && Math.random() > parsedSampleRate) {
            this.recordDroppedEvent('sample_rate', 'error', event);
            return syncpromise.rejectedSyncPromise(new error.SentryError(`Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`, 'log'));
        }
        const dataCategory = eventType === 'replay_event' ? 'replay' : eventType;
        const sdkProcessingMetadata = event.sdkProcessingMetadata || {};
        const capturedSpanIsolationScope = sdkProcessingMetadata.capturedSpanIsolationScope;
        return this._prepareEvent(event, hint, currentScope, capturedSpanIsolationScope).then((prepared)=>{
            if (prepared === null) {
                this.recordDroppedEvent('event_processor', dataCategory, event);
                throw new error.SentryError('An event processor returned `null`, will not send event.', 'log');
            }
            const isInternalException = hint.data && hint.data.__sentry__ === true;
            if (isInternalException) {
                return prepared;
            }
            const result = processBeforeSend(this, options, prepared, hint);
            return _validateBeforeSendResult(result, beforeSendLabel);
        }).then((processedEvent)=>{
            if (processedEvent === null) {
                this.recordDroppedEvent('before_send', dataCategory, event);
                if (isTransaction) {
                    const spans = event.spans || [];
                    // the transaction itself counts as one span, plus all the child spans that are added
                    const spanCount = 1 + spans.length;
                    this.recordDroppedEvent('before_send', 'span', spanCount);
                }
                throw new error.SentryError(`${beforeSendLabel} returned \`null\`, will not send event.`, 'log');
            }
            const session = currentScope && currentScope.getSession();
            if (!isTransaction && session) {
                this._updateSessionFromEvent(session, processedEvent);
            }
            if (isTransaction) {
                const spanCountBefore = processedEvent.sdkProcessingMetadata && processedEvent.sdkProcessingMetadata.spanCountBeforeProcessing || 0;
                const spanCountAfter = processedEvent.spans ? processedEvent.spans.length : 0;
                const droppedSpanCount = spanCountBefore - spanCountAfter;
                if (droppedSpanCount > 0) {
                    this.recordDroppedEvent('before_send', 'span', droppedSpanCount);
                }
            }
            // None of the Sentry built event processor will update transaction name,
            // so if the transaction name has been changed by an event processor, we know
            // it has to come from custom event processor added by a user
            const transactionInfo = processedEvent.transaction_info;
            if (isTransaction && transactionInfo && processedEvent.transaction !== event.transaction) {
                const source = 'custom';
                processedEvent.transaction_info = {
                    ...transactionInfo,
                    source
                };
            }
            this.sendEvent(processedEvent, hint);
            return processedEvent;
        }).then(null, (reason)=>{
            if (reason instanceof error.SentryError) {
                throw reason;
            }
            this.captureException(reason, {
                data: {
                    __sentry__: true
                },
                originalException: reason
            });
            throw new error.SentryError(`Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\nReason: ${reason}`);
        });
    }
    /**
   * Occupies the client with processing and event
   */ _process(promise) {
        this._numProcessing++;
        void promise.then((value)=>{
            this._numProcessing--;
            return value;
        }, (reason)=>{
            this._numProcessing--;
            return reason;
        });
    }
    /**
   * Clears outcomes on this client and returns them.
   */ _clearOutcomes() {
        const outcomes = this._outcomes;
        this._outcomes = {};
        return Object.entries(outcomes).map(([key, quantity])=>{
            const [reason, category] = key.split(':');
            return {
                reason,
                category,
                quantity
            };
        });
    }
    /**
   * Sends client reports as an envelope.
   */ _flushOutcomes() {
        debugBuild.DEBUG_BUILD && logger.logger.log('Flushing outcomes...');
        const outcomes = this._clearOutcomes();
        if (outcomes.length === 0) {
            debugBuild.DEBUG_BUILD && logger.logger.log('No outcomes to send');
            return;
        }
        // This is really the only place where we want to check for a DSN and only send outcomes then
        if (!this._dsn) {
            debugBuild.DEBUG_BUILD && logger.logger.log('No dsn provided, will not send outcomes');
            return;
        }
        debugBuild.DEBUG_BUILD && logger.logger.log('Sending outcomes:', outcomes);
        const envelope = clientreport.createClientReportEnvelope(outcomes, this._options.tunnel && dsn.dsnToString(this._dsn));
        // sendEnvelope should not throw
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.sendEnvelope(envelope);
    }
}
/**
 * Verifies that return value of configured `beforeSend` or `beforeSendTransaction` is of expected type, and returns the value if so.
 */ function _validateBeforeSendResult(beforeSendResult, beforeSendLabel) {
    const invalidValueError = `${beforeSendLabel} must return \`null\` or a valid event.`;
    if (is.isThenable(beforeSendResult)) {
        return beforeSendResult.then((event)=>{
            if (!is.isPlainObject(event) && event !== null) {
                throw new error.SentryError(invalidValueError);
            }
            return event;
        }, (e)=>{
            throw new error.SentryError(`${beforeSendLabel} rejected with ${e}`);
        });
    } else if (!is.isPlainObject(beforeSendResult) && beforeSendResult !== null) {
        throw new error.SentryError(invalidValueError);
    }
    return beforeSendResult;
}
/**
 * Process the matching `beforeSendXXX` callback.
 */ function processBeforeSend(client, options, event, hint) {
    const { beforeSend, beforeSendTransaction, beforeSendSpan } = options;
    if (isErrorEvent(event) && beforeSend) {
        return beforeSend(event, hint);
    }
    if (isTransactionEvent(event)) {
        if (event.spans && beforeSendSpan) {
            const processedSpans = [];
            for (const span of event.spans){
                const processedSpan = beforeSendSpan(span);
                if (processedSpan) {
                    processedSpans.push(processedSpan);
                } else {
                    spanUtils.showSpanDropWarning();
                    client.recordDroppedEvent('before_send', 'span');
                }
            }
            event.spans = processedSpans;
        }
        if (beforeSendTransaction) {
            if (event.spans) {
                // We store the # of spans before processing in SDK metadata,
                // so we can compare it afterwards to determine how many spans were dropped
                const spanCountBefore = event.spans.length;
                event.sdkProcessingMetadata = {
                    ...event.sdkProcessingMetadata,
                    spanCountBeforeProcessing: spanCountBefore
                };
            }
            return beforeSendTransaction(event, hint);
        }
    }
    return event;
}
function isErrorEvent(event) {
    return event.type === undefined;
}
function isTransactionEvent(event) {
    return event.type === 'transaction';
}
exports.BaseClient = BaseClient; //# sourceMappingURL=baseclient.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/checkin.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const dsn = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js [app-ssr] (ecmascript)");
const envelope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js [app-ssr] (ecmascript)");
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
/**
 * Create envelope from check in item.
 */ function createCheckInEnvelope(checkIn, dynamicSamplingContext, metadata, tunnel, dsn$1) {
    const headers = {
        sent_at: new Date().toISOString()
    };
    if (metadata && metadata.sdk) {
        headers.sdk = {
            name: metadata.sdk.name,
            version: metadata.sdk.version
        };
    }
    if (!!tunnel && !!dsn$1) {
        headers.dsn = dsn.dsnToString(dsn$1);
    }
    if (dynamicSamplingContext) {
        headers.trace = object.dropUndefinedKeys(dynamicSamplingContext);
    }
    const item = createCheckInEnvelopeItem(checkIn);
    return envelope.createEnvelope(headers, [
        item
    ]);
}
function createCheckInEnvelopeItem(checkIn) {
    const checkInHeaders = {
        type: 'check_in'
    };
    return [
        checkInHeaders,
        checkIn
    ];
}
exports.createCheckInEnvelope = createCheckInEnvelope; //# sourceMappingURL=checkin.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/eventbuilder.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
const misc = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/misc.js [app-ssr] (ecmascript)");
const normalize = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js [app-ssr] (ecmascript)");
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
/**
 * Extracts stack frames from the error.stack string
 */ function parseStackFrames(stackParser, error) {
    return stackParser(error.stack || '', 1);
}
/**
 * Extracts stack frames from the error and builds a Sentry Exception
 */ function exceptionFromError(stackParser, error) {
    const exception = {
        type: error.name || error.constructor.name,
        value: error.message
    };
    const frames = parseStackFrames(stackParser, error);
    if (frames.length) {
        exception.stacktrace = {
            frames
        };
    }
    return exception;
}
/** If a plain object has a property that is an `Error`, return this error. */ function getErrorPropertyFromObject(obj) {
    for(const prop in obj){
        if (Object.prototype.hasOwnProperty.call(obj, prop)) {
            const value = obj[prop];
            if (value instanceof Error) {
                return value;
            }
        }
    }
    return undefined;
}
function getMessageForObject(exception) {
    if ('name' in exception && typeof exception.name === 'string') {
        let message = `'${exception.name}' captured as exception`;
        if ('message' in exception && typeof exception.message === 'string') {
            message += ` with message '${exception.message}'`;
        }
        return message;
    } else if ('message' in exception && typeof exception.message === 'string') {
        return exception.message;
    }
    const keys = object.extractExceptionKeysForMessage(exception);
    // Some ErrorEvent instances do not have an `error` property, which is why they are not handled before
    // We still want to try to get a decent message for these cases
    if (is.isErrorEvent(exception)) {
        return `Event \`ErrorEvent\` captured as exception with message \`${exception.message}\``;
    }
    const className = getObjectClassName(exception);
    return `${className && className !== 'Object' ? `'${className}'` : 'Object'} captured as exception with keys: ${keys}`;
}
function getObjectClassName(obj) {
    try {
        const prototype = Object.getPrototypeOf(obj);
        return prototype ? prototype.constructor.name : undefined;
    } catch (e) {
    // ignore errors here
    }
}
function getException(client, mechanism, exception, hint) {
    if (is.isError(exception)) {
        return [
            exception,
            undefined
        ];
    }
    // Mutate this!
    mechanism.synthetic = true;
    if (is.isPlainObject(exception)) {
        const normalizeDepth = client && client.getOptions().normalizeDepth;
        const extras = {
            ['__serialized__']: normalize.normalizeToSize(exception, normalizeDepth)
        };
        const errorFromProp = getErrorPropertyFromObject(exception);
        if (errorFromProp) {
            return [
                errorFromProp,
                extras
            ];
        }
        const message = getMessageForObject(exception);
        const ex = hint && hint.syntheticException || new Error(message);
        ex.message = message;
        return [
            ex,
            extras
        ];
    }
    // This handles when someone does: `throw "something awesome";`
    // We use synthesized Error here so we can extract a (rough) stack trace.
    const ex = hint && hint.syntheticException || new Error(exception);
    ex.message = `${exception}`;
    return [
        ex,
        undefined
    ];
}
/**
 * Builds and Event from a Exception
 * @hidden
 */ function eventFromUnknownInput(client, stackParser, exception, hint) {
    const providedMechanism = hint && hint.data && hint.data.mechanism;
    const mechanism = providedMechanism || {
        handled: true,
        type: 'generic'
    };
    const [ex, extras] = getException(client, mechanism, exception, hint);
    const event = {
        exception: {
            values: [
                exceptionFromError(stackParser, ex)
            ]
        }
    };
    if (extras) {
        event.extra = extras;
    }
    misc.addExceptionTypeValue(event, undefined, undefined);
    misc.addExceptionMechanism(event, mechanism);
    return {
        ...event,
        event_id: hint && hint.event_id
    };
}
/**
 * Builds and Event from a Message
 * @hidden
 */ function eventFromMessage(stackParser, message, level = 'info', hint, attachStacktrace) {
    const event = {
        event_id: hint && hint.event_id,
        level
    };
    if (attachStacktrace && hint && hint.syntheticException) {
        const frames = parseStackFrames(stackParser, hint.syntheticException);
        if (frames.length) {
            event.exception = {
                values: [
                    {
                        value: message,
                        stacktrace: {
                            frames
                        }
                    }
                ]
            };
            misc.addExceptionMechanism(event, {
                synthetic: true
            });
        }
    }
    if (is.isParameterizedString(message)) {
        const { __sentry_template_string__, __sentry_template_values__ } = message;
        event.logentry = {
            message: __sentry_template_string__,
            params: __sentry_template_values__
        };
        return event;
    }
    event.message = message;
    return event;
}
exports.eventFromMessage = eventFromMessage;
exports.eventFromUnknownInput = eventFromUnknownInput;
exports.exceptionFromError = exceptionFromError;
exports.parseStackFrames = parseStackFrames; //# sourceMappingURL=eventbuilder.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/server-runtime-client.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const baseclient = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/baseclient.js [app-ssr] (ecmascript)");
const checkin = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/checkin.js [app-ssr] (ecmascript)");
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const sessionflusher = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/sessionflusher.js [app-ssr] (ecmascript)");
const errors = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/errors.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/version.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)");
const spanOnScope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanOnScope.js [app-ssr] (ecmascript)");
const spanUtils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanUtils.js [app-ssr] (ecmascript)");
const misc = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/misc.js [app-ssr] (ecmascript)");
const syncpromise = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js [app-ssr] (ecmascript)");
const eventbuilder = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/eventbuilder.js [app-ssr] (ecmascript)");
const dynamicSamplingContext = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js [app-ssr] (ecmascript)");
/**
 * The Sentry Server Runtime Client SDK.
 */ class ServerRuntimeClient extends baseclient.BaseClient {
    // eslint-disable-next-line deprecation/deprecation
    /**
   * Creates a new Edge SDK instance.
   * @param options Configuration options for this SDK.
   */ constructor(options){
        // Server clients always support tracing
        errors.registerSpanErrorInstrumentation();
        super(options);
    }
    /**
   * @inheritDoc
   */ eventFromException(exception, hint) {
        const event = eventbuilder.eventFromUnknownInput(this, this._options.stackParser, exception, hint);
        event.level = 'error';
        return syncpromise.resolvedSyncPromise(event);
    }
    /**
   * @inheritDoc
   */ eventFromMessage(message, level = 'info', hint) {
        return syncpromise.resolvedSyncPromise(eventbuilder.eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace));
    }
    /**
   * @inheritDoc
   */ captureException(exception, hint, scope) {
        // Check if `_sessionFlusher` exists because it is initialized (defined) only when the `autoSessionTracking` is enabled.
        // The expectation is that session aggregates are only sent when `autoSessionTracking` is enabled.
        // TODO(v9): Our goal in the future is to not have the `autoSessionTracking` option and instead rely on integrations doing the creation and sending of sessions. We will not have a central kill-switch for sessions.
        // TODO(v9): This should move into the httpIntegration.
        // eslint-disable-next-line deprecation/deprecation
        if (this._options.autoSessionTracking && this._sessionFlusher) {
            // eslint-disable-next-line deprecation/deprecation
            const requestSession = currentScopes.getIsolationScope().getRequestSession();
            // Necessary checks to ensure this is code block is executed only within a request
            // Should override the status only if `requestSession.status` is `Ok`, which is its initial stage
            if (requestSession && requestSession.status === 'ok') {
                requestSession.status = 'errored';
            }
        }
        return super.captureException(exception, hint, scope);
    }
    /**
   * @inheritDoc
   */ captureEvent(event, hint, scope) {
        // Check if `_sessionFlusher` exists because it is initialized only when the `autoSessionTracking` is enabled.
        // The expectation is that session aggregates are only sent when `autoSessionTracking` is enabled.
        // TODO(v9): Our goal in the future is to not have the `autoSessionTracking` option and instead rely on integrations doing the creation and sending of sessions. We will not have a central kill-switch for sessions.
        // TODO(v9): This should move into the httpIntegration.
        // eslint-disable-next-line deprecation/deprecation
        if (this._options.autoSessionTracking && this._sessionFlusher) {
            const eventType = event.type || 'exception';
            const isException = eventType === 'exception' && event.exception && event.exception.values && event.exception.values.length > 0;
            // If the event is of type Exception, then a request session should be captured
            if (isException) {
                // eslint-disable-next-line deprecation/deprecation
                const requestSession = currentScopes.getIsolationScope().getRequestSession();
                // Ensure that this is happening within the bounds of a request, and make sure not to override
                // Session Status if Errored / Crashed
                if (requestSession && requestSession.status === 'ok') {
                    requestSession.status = 'errored';
                }
            }
        }
        return super.captureEvent(event, hint, scope);
    }
    /**
   *
   * @inheritdoc
   */ close(timeout) {
        if (this._sessionFlusher) {
            this._sessionFlusher.close();
        }
        return super.close(timeout);
    }
    /**
   * Initializes an instance of SessionFlusher on the client which will aggregate and periodically flush session data.
   *
   * NOTICE: This method will implicitly create an interval that is periodically called.
   * To clean up this resources, call `.close()` when you no longer intend to use the client.
   * Not doing so will result in a memory leak.
   */ initSessionFlusher() {
        const { release, environment } = this._options;
        if (!release) {
            debugBuild.DEBUG_BUILD && logger.logger.warn('Cannot initialize an instance of SessionFlusher if no release is provided!');
        } else {
            // eslint-disable-next-line deprecation/deprecation
            this._sessionFlusher = new sessionflusher.SessionFlusher(this, {
                release,
                environment
            });
        }
    }
    /**
   * Create a cron monitor check in and send it to Sentry.
   *
   * @param checkIn An object that describes a check in.
   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want
   * to create a monitor automatically when sending a check in.
   */ captureCheckIn(checkIn, monitorConfig, scope) {
        const id = 'checkInId' in checkIn && checkIn.checkInId ? checkIn.checkInId : misc.uuid4();
        if (!this._isEnabled()) {
            debugBuild.DEBUG_BUILD && logger.logger.warn('SDK not enabled, will not capture checkin.');
            return id;
        }
        const options = this.getOptions();
        const { release, environment, tunnel } = options;
        const serializedCheckIn = {
            check_in_id: id,
            monitor_slug: checkIn.monitorSlug,
            status: checkIn.status,
            release,
            environment
        };
        if ('duration' in checkIn) {
            serializedCheckIn.duration = checkIn.duration;
        }
        if (monitorConfig) {
            serializedCheckIn.monitor_config = {
                schedule: monitorConfig.schedule,
                checkin_margin: monitorConfig.checkinMargin,
                max_runtime: monitorConfig.maxRuntime,
                timezone: monitorConfig.timezone,
                failure_issue_threshold: monitorConfig.failureIssueThreshold,
                recovery_threshold: monitorConfig.recoveryThreshold
            };
        }
        const [dynamicSamplingContext, traceContext] = this._getTraceInfoFromScope(scope);
        if (traceContext) {
            serializedCheckIn.contexts = {
                trace: traceContext
            };
        }
        const envelope = checkin.createCheckInEnvelope(serializedCheckIn, dynamicSamplingContext, this.getSdkMetadata(), tunnel, this.getDsn());
        debugBuild.DEBUG_BUILD && logger.logger.info('Sending checkin:', checkIn.monitorSlug, checkIn.status);
        // sendEnvelope should not throw
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.sendEnvelope(envelope);
        return id;
    }
    /**
   * Method responsible for capturing/ending a request session by calling `incrementSessionStatusCount` to increment
   * appropriate session aggregates bucket
   *
   * @deprecated This method should not be used or extended. It's functionality will move into the `httpIntegration` and not be part of any public API.
   */ _captureRequestSession() {
        if (!this._sessionFlusher) {
            debugBuild.DEBUG_BUILD && logger.logger.warn('Discarded request mode session because autoSessionTracking option was disabled');
        } else {
            this._sessionFlusher.incrementSessionStatusCount();
        }
    }
    /**
   * @inheritDoc
   */ _prepareEvent(event, hint, scope, isolationScope) {
        if (this._options.platform) {
            event.platform = event.platform || this._options.platform;
        }
        if (this._options.runtime) {
            event.contexts = {
                ...event.contexts,
                runtime: (event.contexts || {}).runtime || this._options.runtime
            };
        }
        if (this._options.serverName) {
            event.server_name = event.server_name || this._options.serverName;
        }
        return super._prepareEvent(event, hint, scope, isolationScope);
    }
    /** Extract trace information from scope */ _getTraceInfoFromScope(scope) {
        if (!scope) {
            return [
                undefined,
                undefined
            ];
        }
        const span = spanOnScope._getSpanForScope(scope);
        const traceContext = span ? spanUtils.spanToTraceContext(span) : currentScopes.getTraceContextFromScope(scope);
        const dynamicSamplingContext$1 = span ? dynamicSamplingContext.getDynamicSamplingContextFromSpan(span) : dynamicSamplingContext.getDynamicSamplingContextFromScope(this, scope);
        return [
            dynamicSamplingContext$1,
            traceContext
        ];
    }
}
exports.ServerRuntimeClient = ServerRuntimeClient; //# sourceMappingURL=server-runtime-client.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/sdk.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
/** A class object that can instantiate Client objects. */ /**
 * Internal function to create a new SDK client instance. The client is
 * installed and then bound to the current scope.
 *
 * @param clientClass The client class to instantiate.
 * @param options Options to pass to the client.
 */ function initAndBind(clientClass, options) {
    if (options.debug === true) {
        if (debugBuild.DEBUG_BUILD) {
            logger.logger.enable();
        } else {
            // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped
            logger.consoleSandbox(()=>{
                // eslint-disable-next-line no-console
                console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');
            });
        }
    }
    const scope = currentScopes.getCurrentScope();
    scope.update(options.initialScope);
    const client = new clientClass(options);
    setCurrentClient(client);
    client.init();
    return client;
}
/**
 * Make the given client the current client.
 */ function setCurrentClient(client) {
    currentScopes.getCurrentScope().setClient(client);
}
exports.initAndBind = initAndBind;
exports.setCurrentClient = setCurrentClient; //# sourceMappingURL=sdk.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/promisebuffer.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const error = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/error.js [app-ssr] (ecmascript)");
const syncpromise = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js [app-ssr] (ecmascript)");
/**
 * Creates an new PromiseBuffer object with the specified limit
 * @param limit max number of promises that can be stored in the buffer
 */ function makePromiseBuffer(limit) {
    const buffer = [];
    function isReady() {
        return limit === undefined || buffer.length < limit;
    }
    /**
   * Remove a promise from the queue.
   *
   * @param task Can be any PromiseLike<T>
   * @returns Removed promise.
   */ function remove(task) {
        return buffer.splice(buffer.indexOf(task), 1)[0] || Promise.resolve(undefined);
    }
    /**
   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.
   *
   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:
   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor
   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By
   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer
   *        limit check.
   * @returns The original promise.
   */ function add(taskProducer) {
        if (!isReady()) {
            return syncpromise.rejectedSyncPromise(new error.SentryError('Not adding Promise because buffer limit was reached.'));
        }
        // start the task and add its promise to the queue
        const task = taskProducer();
        if (buffer.indexOf(task) === -1) {
            buffer.push(task);
        }
        void task.then(()=>remove(task))// Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`
        // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't
        // have promises, so TS has to polyfill when down-compiling.)
        .then(null, ()=>remove(task).then(null, ()=>{
            // We have to add another catch here because `remove()` starts a new promise chain.
            }));
        return task;
    }
    /**
   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.
   *
   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or
   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to
   * `true`.
   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and
   * `false` otherwise
   */ function drain(timeout) {
        return new syncpromise.SyncPromise((resolve, reject)=>{
            let counter = buffer.length;
            if (!counter) {
                return resolve(true);
            }
            // wait for `timeout` ms and then resolve to `false` (if not cancelled first)
            const capturedSetTimeout = setTimeout(()=>{
                if (timeout && timeout > 0) {
                    resolve(false);
                }
            }, timeout);
            // if all promises resolve in time, cancel the timer and resolve to `true`
            buffer.forEach((item)=>{
                void syncpromise.resolvedSyncPromise(item).then(()=>{
                    if (!--counter) {
                        clearTimeout(capturedSetTimeout);
                        resolve(true);
                    }
                }, reject);
            });
        });
    }
    return {
        $: buffer,
        add,
        drain
    };
}
exports.makePromiseBuffer = makePromiseBuffer; //# sourceMappingURL=promisebuffer.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/ratelimit.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend
const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds
/**
 * Extracts Retry-After value from the request header or returns default value
 * @param header string representation of 'Retry-After' header
 * @param now current unix timestamp
 *
 */ function parseRetryAfterHeader(header, now = Date.now()) {
    const headerDelay = parseInt(`${header}`, 10);
    if (!isNaN(headerDelay)) {
        return headerDelay * 1000;
    }
    const headerDate = Date.parse(`${header}`);
    if (!isNaN(headerDate)) {
        return headerDate - now;
    }
    return DEFAULT_RETRY_AFTER;
}
/**
 * Gets the time that the given category is disabled until for rate limiting.
 * In case no category-specific limit is set but a general rate limit across all categories is active,
 * that time is returned.
 *
 * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.
 */ function disabledUntil(limits, dataCategory) {
    return limits[dataCategory] || limits.all || 0;
}
/**
 * Checks if a category is rate limited
 */ function isRateLimited(limits, dataCategory, now = Date.now()) {
    return disabledUntil(limits, dataCategory) > now;
}
/**
 * Update ratelimits from incoming headers.
 *
 * @return the updated RateLimits object.
 */ function updateRateLimits(limits, { statusCode, headers }, now = Date.now()) {
    const updatedRateLimits = {
        ...limits
    };
    // "The name is case-insensitive."
    // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get
    const rateLimitHeader = headers && headers['x-sentry-rate-limits'];
    const retryAfterHeader = headers && headers['retry-after'];
    if (rateLimitHeader) {
        /**
     * rate limit headers are of the form
     *     <header>,<header>,..
     * where each <header> is of the form
     *     <retry_after>: <categories>: <scope>: <reason_code>: <namespaces>
     * where
     *     <retry_after> is a delay in seconds
     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form
     *         <category>;<category>;...
     *     <scope> is what's being limited (org, project, or key) - ignored by SDK
     *     <reason_code> is an arbitrary string like "org_quota" - ignored by SDK
     *     <namespaces> Semicolon-separated list of metric namespace identifiers. Defines which namespace(s) will be affected.
     *         Only present if rate limit applies to the metric_bucket data category.
     */ for (const limit of rateLimitHeader.trim().split(',')){
            const [retryAfter, categories, , , namespaces] = limit.split(':', 5);
            const headerDelay = parseInt(retryAfter, 10);
            const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default
            if (!categories) {
                updatedRateLimits.all = now + delay;
            } else {
                for (const category of categories.split(';')){
                    if (category === 'metric_bucket') {
                        // namespaces will be present when category === 'metric_bucket'
                        if (!namespaces || namespaces.split(';').includes('custom')) {
                            updatedRateLimits[category] = now + delay;
                        }
                    } else {
                        updatedRateLimits[category] = now + delay;
                    }
                }
            }
        }
    } else if (retryAfterHeader) {
        updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);
    } else if (statusCode === 429) {
        updatedRateLimits.all = now + 60 * 1000;
    }
    return updatedRateLimits;
}
exports.DEFAULT_RETRY_AFTER = DEFAULT_RETRY_AFTER;
exports.disabledUntil = disabledUntil;
exports.isRateLimited = isRateLimited;
exports.parseRetryAfterHeader = parseRetryAfterHeader;
exports.updateRateLimits = updateRateLimits; //# sourceMappingURL=ratelimit.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/transports/base.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const envelope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js [app-ssr] (ecmascript)");
const error = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/error.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const promisebuffer = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/promisebuffer.js [app-ssr] (ecmascript)");
const ratelimit = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/ratelimit.js [app-ssr] (ecmascript)");
const syncpromise = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js [app-ssr] (ecmascript)");
const DEFAULT_TRANSPORT_BUFFER_SIZE = 64;
/**
 * Creates an instance of a Sentry `Transport`
 *
 * @param options
 * @param makeRequest
 */ function createTransport(options, makeRequest, buffer = promisebuffer.makePromiseBuffer(options.bufferSize || DEFAULT_TRANSPORT_BUFFER_SIZE)) {
    let rateLimits = {};
    const flush = (timeout)=>buffer.drain(timeout);
    function send(envelope$1) {
        const filteredEnvelopeItems = [];
        // Drop rate limited items from envelope
        envelope.forEachEnvelopeItem(envelope$1, (item, type)=>{
            const dataCategory = envelope.envelopeItemTypeToDataCategory(type);
            if (ratelimit.isRateLimited(rateLimits, dataCategory)) {
                const event = getEventForEnvelopeItem(item, type);
                options.recordDroppedEvent('ratelimit_backoff', dataCategory, event);
            } else {
                filteredEnvelopeItems.push(item);
            }
        });
        // Skip sending if envelope is empty after filtering out rate limited events
        if (filteredEnvelopeItems.length === 0) {
            return syncpromise.resolvedSyncPromise({});
        }
        const filteredEnvelope = envelope.createEnvelope(envelope$1[0], filteredEnvelopeItems);
        // Creates client report for each item in an envelope
        const recordEnvelopeLoss = (reason)=>{
            envelope.forEachEnvelopeItem(filteredEnvelope, (item, type)=>{
                const event = getEventForEnvelopeItem(item, type);
                options.recordDroppedEvent(reason, envelope.envelopeItemTypeToDataCategory(type), event);
            });
        };
        const requestTask = ()=>makeRequest({
                body: envelope.serializeEnvelope(filteredEnvelope)
            }).then((response)=>{
                // We don't want to throw on NOK responses, but we want to at least log them
                if (response.statusCode !== undefined && (response.statusCode < 200 || response.statusCode >= 300)) {
                    debugBuild.DEBUG_BUILD && logger.logger.warn(`Sentry responded with status code ${response.statusCode} to sent event.`);
                }
                rateLimits = ratelimit.updateRateLimits(rateLimits, response);
                return response;
            }, (error)=>{
                recordEnvelopeLoss('network_error');
                throw error;
            });
        return buffer.add(requestTask).then((result)=>result, (error$1)=>{
            if (error$1 instanceof error.SentryError) {
                debugBuild.DEBUG_BUILD && logger.logger.error('Skipped sending event because buffer is full.');
                recordEnvelopeLoss('queue_overflow');
                return syncpromise.resolvedSyncPromise({});
            } else {
                throw error$1;
            }
        });
    }
    return {
        send,
        flush
    };
}
function getEventForEnvelopeItem(item, type) {
    if (type !== 'event' && type !== 'transaction') {
        return undefined;
    }
    return Array.isArray(item) ? item[1] : undefined;
}
exports.DEFAULT_TRANSPORT_BUFFER_SIZE = DEFAULT_TRANSPORT_BUFFER_SIZE;
exports.createTransport = createTransport; //# sourceMappingURL=base.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/transports/offline.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const envelope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const ratelimit = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/ratelimit.js [app-ssr] (ecmascript)");
const MIN_DELAY = 100; // 100 ms
const START_DELAY = 5000; // 5 seconds
const MAX_DELAY = 3.6e6; // 1 hour
/**
 * Wraps a transport and stores and retries events when they fail to send.
 *
 * @param createTransport The transport to wrap.
 */ function makeOfflineTransport(createTransport) {
    function log(...args) {
        debugBuild.DEBUG_BUILD && logger.logger.info('[Offline]:', ...args);
    }
    return (options)=>{
        const transport = createTransport(options);
        if (!options.createStore) {
            throw new Error('No `createStore` function was provided');
        }
        const store = options.createStore(options);
        let retryDelay = START_DELAY;
        let flushTimer;
        function shouldQueue(env, error, retryDelay) {
            // We want to drop client reports because they can be generated when we retry sending events while offline.
            if (envelope.envelopeContainsItemType(env, [
                'client_report'
            ])) {
                return false;
            }
            if (options.shouldStore) {
                return options.shouldStore(env, error, retryDelay);
            }
            return true;
        }
        function flushIn(delay) {
            if (flushTimer) {
                clearTimeout(flushTimer);
            }
            flushTimer = setTimeout(async ()=>{
                flushTimer = undefined;
                const found = await store.shift();
                if (found) {
                    log('Attempting to send previously queued event');
                    // We should to update the sent_at timestamp to the current time.
                    found[0].sent_at = new Date().toISOString();
                    void send(found, true).catch((e)=>{
                        log('Failed to retry sending', e);
                    });
                }
            }, delay);
            // We need to unref the timer in node.js, otherwise the node process never exit.
            if (typeof flushTimer !== 'number' && flushTimer.unref) {
                flushTimer.unref();
            }
        }
        function flushWithBackOff() {
            if (flushTimer) {
                return;
            }
            flushIn(retryDelay);
            retryDelay = Math.min(retryDelay * 2, MAX_DELAY);
        }
        async function send(envelope$1, isRetry = false) {
            // We queue all replay envelopes to avoid multiple replay envelopes being sent at the same time. If one fails, we
            // need to retry them in order.
            if (!isRetry && envelope.envelopeContainsItemType(envelope$1, [
                'replay_event',
                'replay_recording'
            ])) {
                await store.push(envelope$1);
                flushIn(MIN_DELAY);
                return {};
            }
            try {
                const result = await transport.send(envelope$1);
                let delay = MIN_DELAY;
                if (result) {
                    // If there's a retry-after header, use that as the next delay.
                    if (result.headers && result.headers['retry-after']) {
                        delay = ratelimit.parseRetryAfterHeader(result.headers['retry-after']);
                    } else if (result.headers && result.headers['x-sentry-rate-limits']) {
                        delay = 60000; // 60 seconds
                    } else if ((result.statusCode || 0) >= 400) {
                        return result;
                    }
                }
                flushIn(delay);
                retryDelay = START_DELAY;
                return result;
            } catch (e) {
                if (await shouldQueue(envelope$1, e, retryDelay)) {
                    // If this envelope was a retry, we want to add it to the front of the queue so it's retried again first.
                    if (isRetry) {
                        await store.unshift(envelope$1);
                    } else {
                        await store.push(envelope$1);
                    }
                    flushWithBackOff();
                    log('Error sending. Event queued.', e);
                    return {};
                } else {
                    throw e;
                }
            }
        }
        if (options.flushAtStartup) {
            flushWithBackOff();
        }
        return {
            send,
            flush: (t)=>transport.flush(t)
        };
    };
}
exports.MIN_DELAY = MIN_DELAY;
exports.START_DELAY = START_DELAY;
exports.makeOfflineTransport = makeOfflineTransport; //# sourceMappingURL=offline.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/transports/multiplexed.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const api = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/api.js [app-ssr] (ecmascript)");
const dsn = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js [app-ssr] (ecmascript)");
const envelope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js [app-ssr] (ecmascript)");
/**
 * Gets an event from an envelope.
 *
 * This is only exported for use in the tests
 */ function eventFromEnvelope(env, types) {
    let event;
    envelope.forEachEnvelopeItem(env, (item, type)=>{
        if (types.includes(type)) {
            event = Array.isArray(item) ? item[1] : undefined;
        }
        // bail out if we found an event
        return !!event;
    });
    return event;
}
/**
 * Creates a transport that overrides the release on all events.
 */ function makeOverrideReleaseTransport(createTransport, release) {
    return (options)=>{
        const transport = createTransport(options);
        return {
            ...transport,
            send: async (envelope)=>{
                const event = eventFromEnvelope(envelope, [
                    'event',
                    'transaction',
                    'profile',
                    'replay_event'
                ]);
                if (event) {
                    event.release = release;
                }
                return transport.send(envelope);
            }
        };
    };
}
/** Overrides the DSN in the envelope header  */ function overrideDsn(envelope$1, dsn) {
    return envelope.createEnvelope(dsn ? {
        ...envelope$1[0],
        dsn
    } : envelope$1[0], envelope$1[1]);
}
/**
 * Creates a transport that can send events to different DSNs depending on the envelope contents.
 */ function makeMultiplexedTransport(createTransport, matcher) {
    return (options)=>{
        const fallbackTransport = createTransport(options);
        const otherTransports = new Map();
        function getTransport(dsn$1, release) {
            // We create a transport for every unique dsn/release combination as there may be code from multiple releases in
            // use at the same time
            const key = release ? `${dsn$1}:${release}` : dsn$1;
            let transport = otherTransports.get(key);
            if (!transport) {
                const validatedDsn = dsn.dsnFromString(dsn$1);
                if (!validatedDsn) {
                    return undefined;
                }
                const url = api.getEnvelopeEndpointWithUrlEncodedAuth(validatedDsn, options.tunnel);
                transport = release ? makeOverrideReleaseTransport(createTransport, release)({
                    ...options,
                    url
                }) : createTransport({
                    ...options,
                    url
                });
                otherTransports.set(key, transport);
            }
            return [
                dsn$1,
                transport
            ];
        }
        async function send(envelope) {
            function getEvent(types) {
                const eventTypes = types && types.length ? types : [
                    'event'
                ];
                return eventFromEnvelope(envelope, eventTypes);
            }
            const transports = matcher({
                envelope,
                getEvent
            }).map((result)=>{
                if (typeof result === 'string') {
                    return getTransport(result, undefined);
                } else {
                    return getTransport(result.dsn, result.release);
                }
            }).filter((t)=>!!t);
            // If we have no transports to send to, use the fallback transport
            // Don't override the DSN in the header for the fallback transport. '' is falsy
            const transportsWithFallback = transports.length ? transports : [
                [
                    '',
                    fallbackTransport
                ]
            ];
            const results = await Promise.all(transportsWithFallback.map(([dsn, transport])=>transport.send(overrideDsn(envelope, dsn))));
            return results[0];
        }
        async function flush(timeout) {
            const allTransports = [
                ...otherTransports.values(),
                fallbackTransport
            ];
            const results = await Promise.all(allTransports.map((transport)=>transport.flush(timeout)));
            return results.every((r)=>r);
        }
        return {
            send,
            flush
        };
    };
}
exports.eventFromEnvelope = eventFromEnvelope;
exports.makeMultiplexedTransport = makeMultiplexedTransport; //# sourceMappingURL=multiplexed.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils/isSentryRequestUrl.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
/**
 * Checks whether given url points to Sentry server
 *
 * @param url url to verify
 */ function isSentryRequestUrl(url, client) {
    const dsn = client && client.getDsn();
    const tunnel = client && client.getOptions().tunnel;
    return checkDsn(url, dsn) || checkTunnel(url, tunnel);
}
function checkTunnel(url, tunnel) {
    if (!tunnel) {
        return false;
    }
    return removeTrailingSlash(url) === removeTrailingSlash(tunnel);
}
function checkDsn(url, dsn) {
    return dsn ? url.includes(dsn.host) : false;
}
function removeTrailingSlash(str) {
    return str[str.length - 1] === '/' ? str.slice(0, -1) : str;
}
exports.isSentryRequestUrl = isSentryRequestUrl; //# sourceMappingURL=isSentryRequestUrl.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils/parameterize.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
/**
 * Tagged template function which returns parameterized representation of the message
 * For example: parameterize`This is a log statement with ${x} and ${y} params`, would return:
 * "__sentry_template_string__": 'This is a log statement with %s and %s params',
 * "__sentry_template_values__": ['first', 'second']
 * @param strings An array of string values splitted between expressions
 * @param values Expressions extracted from template string
 * @returns String with template information in __sentry_template_string__ and __sentry_template_values__ properties
 */ function parameterize(strings, ...values) {
    const formatted = new String(String.raw(strings, ...values));
    formatted.__sentry_template_string__ = strings.join('\x00').replace(/%/g, '%%').replace(/\0/g, '%s');
    formatted.__sentry_template_values__ = values;
    return formatted;
}
exports.parameterize = parameterize; //# sourceMappingURL=parameterize.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils/sdkMetadata.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const version = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/version.js [app-ssr] (ecmascript)");
/**
 * A builder for the SDK metadata in the options for the SDK initialization.
 *
 * Note: This function is identical to `buildMetadata` in Remix and NextJS and SvelteKit.
 * We don't extract it for bundle size reasons.
 * @see https://github.com/getsentry/sentry-javascript/pull/7404
 * @see https://github.com/getsentry/sentry-javascript/pull/4196
 *
 * If you make changes to this function consider updating the others as well.
 *
 * @param options SDK options object that gets mutated
 * @param names list of package names
 */ function applySdkMetadata(options, name, names = [
    name
], source = 'npm') {
    const metadata = options._metadata || {};
    if (!metadata.sdk) {
        metadata.sdk = {
            name: `sentry.javascript.${name}`,
            packages: names.map((name)=>({
                    name: `${source}:@sentry/${name}`,
                    version: version.SDK_VERSION
                })),
            version: version.SDK_VERSION
        };
    }
    options._metadata = metadata;
}
exports.applySdkMetadata = applySdkMetadata; //# sourceMappingURL=sdkMetadata.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils/traceData.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const index = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/asyncContext/index.js [app-ssr] (ecmascript)");
const carrier = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/carrier.js [app-ssr] (ecmascript)");
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const exports$1 = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/exports.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/errors.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/version.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)");
const spanUtils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanUtils.js [app-ssr] (ecmascript)");
const tracing = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/tracing.js [app-ssr] (ecmascript)");
const dynamicSamplingContext = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js [app-ssr] (ecmascript)");
const baggage = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js [app-ssr] (ecmascript)");
/**
 * Extracts trace propagation data from the current span or from the client's scope (via transaction or propagation
 * context) and serializes it to `sentry-trace` and `baggage` values to strings. These values can be used to propagate
 * a trace via our tracing Http headers or Html `<meta>` tags.
 *
 * This function also applies some validation to the generated sentry-trace and baggage values to ensure that
 * only valid strings are returned.
 *
 * @returns an object with the tracing data values. The object keys are the name of the tracing key to be used as header
 * or meta tag name.
 */ function getTraceData(options = {}) {
    const client = currentScopes.getClient();
    if (!exports$1.isEnabled() || !client) {
        return {};
    }
    const carrier$1 = carrier.getMainCarrier();
    const acs = index.getAsyncContextStrategy(carrier$1);
    if (acs.getTraceData) {
        return acs.getTraceData(options);
    }
    const scope = currentScopes.getCurrentScope();
    const span = options.span || spanUtils.getActiveSpan();
    const sentryTrace = span ? spanUtils.spanToTraceHeader(span) : scopeToTraceHeader(scope);
    const dsc = span ? dynamicSamplingContext.getDynamicSamplingContextFromSpan(span) : dynamicSamplingContext.getDynamicSamplingContextFromScope(client, scope);
    const baggage$1 = baggage.dynamicSamplingContextToSentryBaggageHeader(dsc);
    const isValidSentryTraceHeader = tracing.TRACEPARENT_REGEXP.test(sentryTrace);
    if (!isValidSentryTraceHeader) {
        logger.logger.warn('Invalid sentry-trace data. Cannot generate trace data');
        return {};
    }
    return {
        'sentry-trace': sentryTrace,
        baggage: baggage$1
    };
}
/**
 * Get a sentry-trace header value for the given scope.
 */ function scopeToTraceHeader(scope) {
    // TODO(v9): Use generateSpanId() instead of spanId
    // eslint-disable-next-line deprecation/deprecation
    const { traceId, sampled, spanId } = scope.getPropagationContext();
    return tracing.generateSentryTraceHeader(traceId, spanId, sampled);
}
exports.getTraceData = getTraceData; //# sourceMappingURL=traceData.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils/meta.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const traceData = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/traceData.js [app-ssr] (ecmascript)");
/**
 * Returns a string of meta tags that represent the current trace data.
 *
 * You can use this to propagate a trace from your server-side rendered Html to the browser.
 * This function returns up to two meta tags, `sentry-trace` and `baggage`, depending on the
 * current trace data state.
 *
 * @example
 * Usage example:
 *
 * ```js
 * function renderHtml() {
 *   return `
 *     <head>
 *       ${getTraceMetaTags()}
 *     </head>
 *   `;
 * }
 * ```
 *
 */ function getTraceMetaTags() {
    return Object.entries(traceData.getTraceData()).map(([key, value])=>`<meta name="${key}" content="${value}"/>`).join('\n');
}
exports.getTraceMetaTags = getTraceMetaTags; //# sourceMappingURL=meta.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/breadcrumbs.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const time = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)");
/**
 * Default maximum number of breadcrumbs added to an event. Can be overwritten
 * with {@link Options.maxBreadcrumbs}.
 */ const DEFAULT_BREADCRUMBS = 100;
/**
 * Records a new breadcrumb which will be attached to future events.
 *
 * Breadcrumbs will be added to subsequent events to provide more context on
 * user's actions prior to an error or crash.
 */ function addBreadcrumb(breadcrumb, hint) {
    const client = currentScopes.getClient();
    const isolationScope = currentScopes.getIsolationScope();
    if (!client) return;
    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } = client.getOptions();
    if (maxBreadcrumbs <= 0) return;
    const timestamp = time.dateTimestampInSeconds();
    const mergedBreadcrumb = {
        timestamp,
        ...breadcrumb
    };
    const finalBreadcrumb = beforeBreadcrumb ? logger.consoleSandbox(()=>beforeBreadcrumb(mergedBreadcrumb, hint)) : mergedBreadcrumb;
    if (finalBreadcrumb === null) return;
    if (client.emit) {
        client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);
    }
    isolationScope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);
}
exports.addBreadcrumb = addBreadcrumb; //# sourceMappingURL=breadcrumbs.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/integrations/functiontostring.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const integration = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integration.js [app-ssr] (ecmascript)");
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
let originalFunctionToString;
const INTEGRATION_NAME = 'FunctionToString';
const SETUP_CLIENTS = new WeakMap();
const _functionToStringIntegration = ()=>{
    return {
        name: INTEGRATION_NAME,
        setupOnce () {
            // eslint-disable-next-line @typescript-eslint/unbound-method
            originalFunctionToString = Function.prototype.toString;
            // intrinsics (like Function.prototype) might be immutable in some environments
            // e.g. Node with --frozen-intrinsics, XS (an embedded JavaScript engine) or SES (a JavaScript proposal)
            try {
                Function.prototype.toString = function(...args) {
                    const originalFunction = object.getOriginalFunction(this);
                    const context = SETUP_CLIENTS.has(currentScopes.getClient()) && originalFunction !== undefined ? originalFunction : this;
                    return originalFunctionToString.apply(context, args);
                };
            } catch (e) {
            // ignore errors here, just don't patch this
            }
        },
        setup (client) {
            SETUP_CLIENTS.set(client, true);
        }
    };
};
/**
 * Patch toString calls to return proper name for wrapped functions.
 *
 * ```js
 * Sentry.init({
 *   integrations: [
 *     functionToStringIntegration(),
 *   ],
 * });
 * ```
 */ const functionToStringIntegration = integration.defineIntegration(_functionToStringIntegration);
exports.functionToStringIntegration = functionToStringIntegration; //# sourceMappingURL=functiontostring.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/integrations/inboundfilters.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const integration = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integration.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const misc = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/misc.js [app-ssr] (ecmascript)");
const string = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/string.js [app-ssr] (ecmascript)");
// "Script error." is hard coded into browsers for errors that it can't read.
// this is the result of a script being pulled in from an external domain and CORS.
const DEFAULT_IGNORE_ERRORS = [
    /^Script error\.?$/,
    /^Javascript error: Script error\.? on line 0$/,
    /^ResizeObserver loop completed with undelivered notifications.$/,
    /^Cannot redefine property: googletag$/,
    "undefined is not an object (evaluating 'a.L')",
    'can\'t redefine non-configurable property "solana"',
    "vv().getRestrictions is not a function. (In 'vv().getRestrictions(1,a)', 'vv().getRestrictions' is undefined)",
    "Can't find variable: _AutofillCallbackHandler",
    /^Non-Error promise rejection captured with value: Object Not Found Matching Id:\d+, MethodName:simulateEvent, ParamCount:\d+$/
];
/** Options for the InboundFilters integration */ const INTEGRATION_NAME = 'InboundFilters';
const _inboundFiltersIntegration = (options = {})=>{
    return {
        name: INTEGRATION_NAME,
        processEvent (event, _hint, client) {
            const clientOptions = client.getOptions();
            const mergedOptions = _mergeOptions(options, clientOptions);
            return _shouldDropEvent(event, mergedOptions) ? null : event;
        }
    };
};
const inboundFiltersIntegration = integration.defineIntegration(_inboundFiltersIntegration);
function _mergeOptions(internalOptions = {}, clientOptions = {}) {
    return {
        allowUrls: [
            ...internalOptions.allowUrls || [],
            ...clientOptions.allowUrls || []
        ],
        denyUrls: [
            ...internalOptions.denyUrls || [],
            ...clientOptions.denyUrls || []
        ],
        ignoreErrors: [
            ...internalOptions.ignoreErrors || [],
            ...clientOptions.ignoreErrors || [],
            ...internalOptions.disableErrorDefaults ? [] : DEFAULT_IGNORE_ERRORS
        ],
        ignoreTransactions: [
            ...internalOptions.ignoreTransactions || [],
            ...clientOptions.ignoreTransactions || []
        ],
        ignoreInternal: internalOptions.ignoreInternal !== undefined ? internalOptions.ignoreInternal : true
    };
}
function _shouldDropEvent(event, options) {
    if (options.ignoreInternal && _isSentryError(event)) {
        debugBuild.DEBUG_BUILD && logger.logger.warn(`Event dropped due to being internal Sentry Error.\nEvent: ${misc.getEventDescription(event)}`);
        return true;
    }
    if (_isIgnoredError(event, options.ignoreErrors)) {
        debugBuild.DEBUG_BUILD && logger.logger.warn(`Event dropped due to being matched by \`ignoreErrors\` option.\nEvent: ${misc.getEventDescription(event)}`);
        return true;
    }
    if (_isUselessError(event)) {
        debugBuild.DEBUG_BUILD && logger.logger.warn(`Event dropped due to not having an error message, error type or stacktrace.\nEvent: ${misc.getEventDescription(event)}`);
        return true;
    }
    if (_isIgnoredTransaction(event, options.ignoreTransactions)) {
        debugBuild.DEBUG_BUILD && logger.logger.warn(`Event dropped due to being matched by \`ignoreTransactions\` option.\nEvent: ${misc.getEventDescription(event)}`);
        return true;
    }
    if (_isDeniedUrl(event, options.denyUrls)) {
        debugBuild.DEBUG_BUILD && logger.logger.warn(`Event dropped due to being matched by \`denyUrls\` option.\nEvent: ${misc.getEventDescription(event)}.\nUrl: ${_getEventFilterUrl(event)}`);
        return true;
    }
    if (!_isAllowedUrl(event, options.allowUrls)) {
        debugBuild.DEBUG_BUILD && logger.logger.warn(`Event dropped due to not being matched by \`allowUrls\` option.\nEvent: ${misc.getEventDescription(event)}.\nUrl: ${_getEventFilterUrl(event)}`);
        return true;
    }
    return false;
}
function _isIgnoredError(event, ignoreErrors) {
    // If event.type, this is not an error
    if (event.type || !ignoreErrors || !ignoreErrors.length) {
        return false;
    }
    return _getPossibleEventMessages(event).some((message)=>string.stringMatchesSomePattern(message, ignoreErrors));
}
function _isIgnoredTransaction(event, ignoreTransactions) {
    if (event.type !== 'transaction' || !ignoreTransactions || !ignoreTransactions.length) {
        return false;
    }
    const name = event.transaction;
    return name ? string.stringMatchesSomePattern(name, ignoreTransactions) : false;
}
function _isDeniedUrl(event, denyUrls) {
    // TODO: Use Glob instead?
    if (!denyUrls || !denyUrls.length) {
        return false;
    }
    const url = _getEventFilterUrl(event);
    return !url ? false : string.stringMatchesSomePattern(url, denyUrls);
}
function _isAllowedUrl(event, allowUrls) {
    // TODO: Use Glob instead?
    if (!allowUrls || !allowUrls.length) {
        return true;
    }
    const url = _getEventFilterUrl(event);
    return !url ? true : string.stringMatchesSomePattern(url, allowUrls);
}
function _getPossibleEventMessages(event) {
    const possibleMessages = [];
    if (event.message) {
        possibleMessages.push(event.message);
    }
    let lastException;
    try {
        // @ts-expect-error Try catching to save bundle size
        lastException = event.exception.values[event.exception.values.length - 1];
    } catch (e) {
    // try catching to save bundle size checking existence of variables
    }
    if (lastException) {
        if (lastException.value) {
            possibleMessages.push(lastException.value);
            if (lastException.type) {
                possibleMessages.push(`${lastException.type}: ${lastException.value}`);
            }
        }
    }
    return possibleMessages;
}
function _isSentryError(event) {
    try {
        // @ts-expect-error can't be a sentry error if undefined
        return event.exception.values[0].type === 'SentryError';
    } catch (e) {
    // ignore
    }
    return false;
}
function _getLastValidUrl(frames = []) {
    for(let i = frames.length - 1; i >= 0; i--){
        const frame = frames[i];
        if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {
            return frame.filename || null;
        }
    }
    return null;
}
function _getEventFilterUrl(event) {
    try {
        let frames;
        try {
            // @ts-expect-error we only care about frames if the whole thing here is defined
            frames = event.exception.values[0].stacktrace.frames;
        } catch (e) {
        // ignore
        }
        return frames ? _getLastValidUrl(frames) : null;
    } catch (oO) {
        debugBuild.DEBUG_BUILD && logger.logger.error(`Cannot extract url for event ${misc.getEventDescription(event)}`);
        return null;
    }
}
function _isUselessError(event) {
    if (event.type) {
        // event is not an error
        return false;
    }
    // We only want to consider events for dropping that actually have recorded exception values.
    if (!event.exception || !event.exception.values || event.exception.values.length === 0) {
        return false;
    }
    return(// No top-level message
    !event.message && // There are no exception values that have a stacktrace, a non-generic-Error type or value
    !event.exception.values.some((value)=>value.stacktrace || value.type && value.type !== 'Error' || value.value));
}
exports.inboundFiltersIntegration = inboundFiltersIntegration; //# sourceMappingURL=inboundfilters.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/aggregate-errors.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
const string = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/string.js [app-ssr] (ecmascript)");
/**
 * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.
 */ function applyAggregateErrorsToEvent(exceptionFromErrorImplementation, parser, maxValueLimit = 250, key, limit, event, hint) {
    if (!event.exception || !event.exception.values || !hint || !is.isInstanceOf(hint.originalException, Error)) {
        return;
    }
    // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error
    const originalException = event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;
    // We only create exception grouping if there is an exception in the event.
    if (originalException) {
        event.exception.values = truncateAggregateExceptions(aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, hint.originalException, key, event.exception.values, originalException, 0), maxValueLimit);
    }
}
function aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, error, key, prevExceptions, exception, exceptionId) {
    if (prevExceptions.length >= limit + 1) {
        return prevExceptions;
    }
    let newExceptions = [
        ...prevExceptions
    ];
    // Recursively call this function in order to walk down a chain of errors
    if (is.isInstanceOf(error[key], Error)) {
        applyExceptionGroupFieldsForParentException(exception, exceptionId);
        const newException = exceptionFromErrorImplementation(parser, error[key]);
        const newExceptionId = newExceptions.length;
        applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);
        newExceptions = aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, error[key], key, [
            newException,
            ...newExceptions
        ], newException, newExceptionId);
    }
    // This will create exception grouping for AggregateErrors
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError
    if (Array.isArray(error.errors)) {
        error.errors.forEach((childError, i)=>{
            if (is.isInstanceOf(childError, Error)) {
                applyExceptionGroupFieldsForParentException(exception, exceptionId);
                const newException = exceptionFromErrorImplementation(parser, childError);
                const newExceptionId = newExceptions.length;
                applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);
                newExceptions = aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, childError, key, [
                    newException,
                    ...newExceptions
                ], newException, newExceptionId);
            }
        });
    }
    return newExceptions;
}
function applyExceptionGroupFieldsForParentException(exception, exceptionId) {
    // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.
    exception.mechanism = exception.mechanism || {
        type: 'generic',
        handled: true
    };
    exception.mechanism = {
        ...exception.mechanism,
        ...exception.type === 'AggregateError' && {
            is_exception_group: true
        },
        exception_id: exceptionId
    };
}
function applyExceptionGroupFieldsForChildException(exception, source, exceptionId, parentId) {
    // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.
    exception.mechanism = exception.mechanism || {
        type: 'generic',
        handled: true
    };
    exception.mechanism = {
        ...exception.mechanism,
        type: 'chained',
        source,
        exception_id: exceptionId,
        parent_id: parentId
    };
}
/**
 * Truncate the message (exception.value) of all exceptions in the event.
 * Because this event processor is ran after `applyClientOptions`,
 * we need to truncate the message of the added exceptions here.
 */ function truncateAggregateExceptions(exceptions, maxValueLength) {
    return exceptions.map((exception)=>{
        if (exception.value) {
            exception.value = string.truncate(exception.value, maxValueLength);
        }
        return exception;
    });
}
exports.applyAggregateErrorsToEvent = applyAggregateErrorsToEvent; //# sourceMappingURL=aggregate-errors.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/integrations/linkederrors.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const integration = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integration.js [app-ssr] (ecmascript)");
const aggregateErrors = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/aggregate-errors.js [app-ssr] (ecmascript)");
const eventbuilder = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/eventbuilder.js [app-ssr] (ecmascript)");
const DEFAULT_KEY = 'cause';
const DEFAULT_LIMIT = 5;
const INTEGRATION_NAME = 'LinkedErrors';
const _linkedErrorsIntegration = (options = {})=>{
    const limit = options.limit || DEFAULT_LIMIT;
    const key = options.key || DEFAULT_KEY;
    return {
        name: INTEGRATION_NAME,
        preprocessEvent (event, hint, client) {
            const options = client.getOptions();
            aggregateErrors.applyAggregateErrorsToEvent(eventbuilder.exceptionFromError, options.stackParser, options.maxValueLength, key, limit, event, hint);
        }
    };
};
const linkedErrorsIntegration = integration.defineIntegration(_linkedErrorsIntegration);
exports.linkedErrorsIntegration = linkedErrorsIntegration; //# sourceMappingURL=linkederrors.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/metadata.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
/** Keys are source filename/url, values are metadata objects. */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
const filenameMetadataMap = new Map();
/** Set of stack strings that have already been parsed. */ const parsedStacks = new Set();
function ensureMetadataStacksAreParsed(parser) {
    if (!worldwide.GLOBAL_OBJ._sentryModuleMetadata) {
        return;
    }
    for (const stack of Object.keys(worldwide.GLOBAL_OBJ._sentryModuleMetadata)){
        const metadata = worldwide.GLOBAL_OBJ._sentryModuleMetadata[stack];
        if (parsedStacks.has(stack)) {
            continue;
        }
        // Ensure this stack doesn't get parsed again
        parsedStacks.add(stack);
        const frames = parser(stack);
        // Go through the frames starting from the top of the stack and find the first one with a filename
        for (const frame of frames.reverse()){
            if (frame.filename) {
                // Save the metadata for this filename
                filenameMetadataMap.set(frame.filename, metadata);
                break;
            }
        }
    }
}
/**
 * Retrieve metadata for a specific JavaScript file URL.
 *
 * Metadata is injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
function getMetadataForUrl(parser, filename) {
    ensureMetadataStacksAreParsed(parser);
    return filenameMetadataMap.get(filename);
}
/**
 * Adds metadata to stack frames.
 *
 * Metadata is injected by the Sentry bundler plugins using the `_experiments.moduleMetadata` config option.
 */ function addMetadataToStackFrames(parser, event) {
    try {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        event.exception.values.forEach((exception)=>{
            if (!exception.stacktrace) {
                return;
            }
            for (const frame of exception.stacktrace.frames || []){
                if (!frame.filename || frame.module_metadata) {
                    continue;
                }
                const metadata = getMetadataForUrl(parser, frame.filename);
                if (metadata) {
                    frame.module_metadata = metadata;
                }
            }
        });
    } catch (_) {
    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.
    }
}
/**
 * Strips metadata from stack frames.
 */ function stripMetadataFromStackFrames(event) {
    try {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        event.exception.values.forEach((exception)=>{
            if (!exception.stacktrace) {
                return;
            }
            for (const frame of exception.stacktrace.frames || []){
                delete frame.module_metadata;
            }
        });
    } catch (_) {
    // To save bundle size we're just try catching here instead of checking for the existence of all the different objects.
    }
}
exports.addMetadataToStackFrames = addMetadataToStackFrames;
exports.getMetadataForUrl = getMetadataForUrl;
exports.stripMetadataFromStackFrames = stripMetadataFromStackFrames; //# sourceMappingURL=metadata.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/integrations/metadata.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const integration = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integration.js [app-ssr] (ecmascript)");
const metadata = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metadata.js [app-ssr] (ecmascript)");
const envelope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js [app-ssr] (ecmascript)");
/**
 * Adds module metadata to stack frames.
 *
 * Metadata can be injected by the Sentry bundler plugins using the `moduleMetadata` config option.
 *
 * When this integration is added, the metadata passed to the bundler plugin is added to the stack frames of all events
 * under the `module_metadata` property. This can be used to help in tagging or routing of events from different teams
 * our sources
 */ const moduleMetadataIntegration = integration.defineIntegration(()=>{
    return {
        name: 'ModuleMetadata',
        setup (client) {
            // We need to strip metadata from stack frames before sending them to Sentry since these are client side only.
            client.on('beforeEnvelope', (envelope$1)=>{
                envelope.forEachEnvelopeItem(envelope$1, (item, type)=>{
                    if (type === 'event') {
                        const event = Array.isArray(item) ? item[1] : undefined;
                        if (event) {
                            metadata.stripMetadataFromStackFrames(event);
                            item[1] = event;
                        }
                    }
                });
            });
            client.on('applyFrameMetadata', (event)=>{
                // Only apply stack frame metadata to error events
                if (event.type) {
                    return;
                }
                const stackParser = client.getOptions().stackParser;
                metadata.addMetadataToStackFrames(stackParser, event);
            });
        }
    };
});
exports.moduleMetadataIntegration = moduleMetadataIntegration; //# sourceMappingURL=metadata.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/cookie.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
/**
 * This code was originally copied from the 'cookie` module at v0.5.0 and was simplified for our use case.
 * https://github.com/jshttp/cookie/blob/a0c84147aab6266bdb3996cf4062e93907c0b0fc/index.js
 * It had the following license:
 *
 * (The MIT License)
 *
 * Copyright (c) 2012-2014 Roman Shtylman <shtylman@gmail.com>
 * Copyright (c) 2015 Douglas Christopher Wilson <doug@somethingdoug.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ /**
 * Parses a cookie string
 */ function parseCookie(str) {
    const obj = {};
    let index = 0;
    while(index < str.length){
        const eqIdx = str.indexOf('=', index);
        // no more cookie pairs
        if (eqIdx === -1) {
            break;
        }
        let endIdx = str.indexOf(';', index);
        if (endIdx === -1) {
            endIdx = str.length;
        } else if (endIdx < eqIdx) {
            // backtrack on prior semicolon
            index = str.lastIndexOf(';', eqIdx - 1) + 1;
            continue;
        }
        const key = str.slice(index, eqIdx).trim();
        // only assign once
        if (undefined === obj[key]) {
            let val = str.slice(eqIdx + 1, endIdx).trim();
            // quoted values
            if (val.charCodeAt(0) === 0x22) {
                val = val.slice(1, -1);
            }
            try {
                obj[key] = val.indexOf('%') !== -1 ? decodeURIComponent(val) : val;
            } catch (e) {
                obj[key] = val;
            }
        }
        index = endIdx + 1;
    }
    return obj;
}
exports.parseCookie = parseCookie; //# sourceMappingURL=cookie.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/url.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
/**
 * Parses string form of URL into an object
 * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B
 * // intentionally using regex and not <a/> href parsing trick because React Native and other
 * // environments where DOM might not be available
 * @returns parsed URL object
 */ function parseUrl(url) {
    if (!url) {
        return {};
    }
    const match = url.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);
    if (!match) {
        return {};
    }
    // coerce to undefined values to empty string so we don't get 'undefined'
    const query = match[6] || '';
    const fragment = match[8] || '';
    return {
        host: match[4],
        path: match[5],
        protocol: match[2],
        search: query,
        hash: fragment,
        relative: match[5] + query + fragment
    };
}
/**
 * Strip the query string and fragment off of a given URL or path (if present)
 *
 * @param urlPath Full URL or path, including possible query string and/or fragment
 * @returns URL or path without query string or fragment
 */ function stripUrlQueryAndFragment(urlPath) {
    return urlPath.split(/[?#]/, 1)[0];
}
/**
 * Returns number of URL segments of a passed string URL.
 *
 * @deprecated This function will be removed in the next major version.
 */ // TODO(v9): Hoist this function into the places where we use it. (as it stands only react router v6 instrumentation)
function getNumberOfUrlSegments(url) {
    // split at '/' or at '\/' to split regex urls correctly
    return url.split(/\\?\//).filter((s)=>s.length > 0 && s !== ',').length;
}
/**
 * Takes a URL object and returns a sanitized string which is safe to use as span name
 * see: https://develop.sentry.dev/sdk/data-handling/#structuring-data
 */ function getSanitizedUrlString(url) {
    const { protocol, host, path } = url;
    const filteredHost = host && host// Always filter out authority
    .replace(/^.*@/, '[filtered]:[filtered]@')// Don't show standard :80 (http) and :443 (https) ports to reduce the noise
    // TODO: Use new URL global if it exists
    .replace(/(:80)$/, '').replace(/(:443)$/, '') || '';
    return `${protocol ? `${protocol}://` : ''}${filteredHost}${path}`;
}
exports.getNumberOfUrlSegments = getNumberOfUrlSegments;
exports.getSanitizedUrlString = getSanitizedUrlString;
exports.parseUrl = parseUrl;
exports.stripUrlQueryAndFragment = stripUrlQueryAndFragment; //# sourceMappingURL=url.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/vendor/getIpAddress.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
// Vendored / modified from @sergiodxa/remix-utils
// https://github.com/sergiodxa/remix-utils/blob/02af80e12829a53696bfa8f3c2363975cf59f55e/src/server/get-client-ip-address.ts
// MIT License
// Copyright (c) 2021 Sergio Xalambrí
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// The headers to check, in priority order
const ipHeaderNames = [
    'X-Client-IP',
    'X-Forwarded-For',
    'Fly-Client-IP',
    'CF-Connecting-IP',
    'Fastly-Client-Ip',
    'True-Client-Ip',
    'X-Real-IP',
    'X-Cluster-Client-IP',
    'X-Forwarded',
    'Forwarded-For',
    'Forwarded',
    'X-Vercel-Forwarded-For'
];
/**
 * Get the IP address of the client sending a request.
 *
 * It receives a Request headers object and use it to get the
 * IP address from one of the following headers in order.
 *
 * If the IP address is valid, it will be returned. Otherwise, null will be
 * returned.
 *
 * If the header values contains more than one IP address, the first valid one
 * will be returned.
 */ function getClientIPAddress(headers) {
    // This will end up being Array<string | string[] | undefined | null> because of the various possible values a header
    // can take
    const headerValues = ipHeaderNames.map((headerName)=>{
        const rawValue = headers[headerName];
        const value = Array.isArray(rawValue) ? rawValue.join(';') : rawValue;
        if (headerName === 'Forwarded') {
            return parseForwardedHeader(value);
        }
        return value && value.split(',').map((v)=>v.trim());
    });
    // Flatten the array and filter out any falsy entries
    const flattenedHeaderValues = headerValues.reduce((acc, val)=>{
        if (!val) {
            return acc;
        }
        return acc.concat(val);
    }, []);
    // Find the first value which is a valid IP address, if any
    const ipAddress = flattenedHeaderValues.find((ip)=>ip !== null && isIP(ip));
    return ipAddress || null;
}
function parseForwardedHeader(value) {
    if (!value) {
        return null;
    }
    for (const part of value.split(';')){
        if (part.startsWith('for=')) {
            return part.slice(4);
        }
    }
    return null;
}
//
/**
 * Custom method instead of importing this from `net` package, as this only exists in node
 * Accepts:
 * 127.0.0.1
 * 192.168.1.1
 * 192.168.1.255
 * 255.255.255.255
 * 10.1.1.1
 * 0.0.0.0
 * 2b01:cb19:8350:ed00:d0dd:fa5b:de31:8be5
 *
 * Rejects:
 * 1.1.1.01
 * 30.168.1.255.1
 * 127.1
 * 192.168.1.256
 * -1.2.3.4
 * 1.1.1.1.
 * 3...3
 * 192.168.1.099
 */ function isIP(str) {
    const regex = /(?:^(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}$)|(?:^(?:(?:[a-fA-F\d]{1,4}:){7}(?:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,2}|:)|(?:[a-fA-F\d]{1,4}:){4}(?:(?::[a-fA-F\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,3}|:)|(?:[a-fA-F\d]{1,4}:){3}(?:(?::[a-fA-F\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,4}|:)|(?:[a-fA-F\d]{1,4}:){2}(?:(?::[a-fA-F\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,5}|:)|(?:[a-fA-F\d]{1,4}:){1}(?:(?::[a-fA-F\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$)/;
    return regex.test(str);
}
exports.getClientIPAddress = getClientIPAddress;
exports.ipHeaderNames = ipHeaderNames; //# sourceMappingURL=getIpAddress.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/requestdata.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const cookie = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/cookie.js [app-ssr] (ecmascript)");
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js [app-ssr] (ecmascript)");
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const normalize = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js [app-ssr] (ecmascript)");
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
const string = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/string.js [app-ssr] (ecmascript)");
const url = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/url.js [app-ssr] (ecmascript)");
const getIpAddress = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/vendor/getIpAddress.js [app-ssr] (ecmascript)");
const DEFAULT_INCLUDES = {
    ip: false,
    request: true,
    user: true
};
const DEFAULT_REQUEST_INCLUDES = [
    'cookies',
    'data',
    'headers',
    'method',
    'query_string',
    'url'
];
const DEFAULT_USER_INCLUDES = [
    'id',
    'username',
    'email'
];
/**
 * Options deciding what parts of the request to use when enhancing an event
 */ /**
 * Extracts a complete and parameterized path from the request object and uses it to construct transaction name.
 * If the parameterized transaction name cannot be extracted, we fall back to the raw URL.
 *
 * Additionally, this function determines and returns the transaction name source
 *
 * eg. GET /mountpoint/user/:id
 *
 * @param req A request object
 * @param options What to include in the transaction name (method, path, or a custom route name to be
 *                used instead of the request's route)
 *
 * @returns A tuple of the fully constructed transaction name [0] and its source [1] (can be either 'route' or 'url')
 * @deprecated This method will be removed in v9. It is not in use anymore.
 */ function extractPathForTransaction(req, options = {}) {
    const method = req.method && req.method.toUpperCase();
    let path = '';
    let source = 'url';
    // Check to see if there's a parameterized route we can use (as there is in Express)
    if (options.customRoute || req.route) {
        path = options.customRoute || `${req.baseUrl || ''}${req.route && req.route.path}`;
        source = 'route';
    } else if (req.originalUrl || req.url) {
        path = url.stripUrlQueryAndFragment(req.originalUrl || req.url || '');
    }
    let name = '';
    if (options.method && method) {
        name += method;
    }
    if (options.method && options.path) {
        name += ' ';
    }
    if (options.path && path) {
        name += path;
    }
    return [
        name,
        source
    ];
}
function extractUserData(user, keys) {
    const extractedUser = {};
    const attributes = Array.isArray(keys) ? keys : DEFAULT_USER_INCLUDES;
    attributes.forEach((key)=>{
        if (user && key in user) {
            extractedUser[key] = user[key];
        }
    });
    return extractedUser;
}
/**
 * Normalize data from the request object, accounting for framework differences.
 *
 * @param req The request object from which to extract data
 * @param options.include An optional array of keys to include in the normalized data. Defaults to
 * DEFAULT_REQUEST_INCLUDES if not provided.
 * @param options.deps Injected, platform-specific dependencies
 * @returns An object containing normalized request data
 *
 * @deprecated Instead manually normalize the request data into a format that fits `addNormalizedRequestDataToEvent`.
 */ function extractRequestData(req, options = {}) {
    const { include = DEFAULT_REQUEST_INCLUDES } = options;
    const requestData = {};
    // headers:
    //   node, express, koa, nextjs: req.headers
    const headers = req.headers || {};
    // method:
    //   node, express, koa, nextjs: req.method
    const method = req.method;
    // host:
    //   express: req.hostname in > 4 and req.host in < 4
    //   koa: req.host
    //   node, nextjs: req.headers.host
    // Express 4 mistakenly strips off port number from req.host / req.hostname so we can't rely on them
    // See: https://github.com/expressjs/express/issues/3047#issuecomment-236653223
    // Also: https://github.com/getsentry/sentry-javascript/issues/1917
    const host = headers.host || req.hostname || req.host || '<no host>';
    // protocol:
    //   node, nextjs: <n/a>
    //   express, koa: req.protocol
    const protocol = req.protocol === 'https' || req.socket && req.socket.encrypted ? 'https' : 'http';
    // url (including path and query string):
    //   node, express: req.originalUrl
    //   koa, nextjs: req.url
    const originalUrl = req.originalUrl || req.url || '';
    // absolute url
    const absoluteUrl = originalUrl.startsWith(protocol) ? originalUrl : `${protocol}://${host}${originalUrl}`;
    include.forEach((key)=>{
        switch(key){
            case 'headers':
                {
                    requestData.headers = headers;
                    // Remove the Cookie header in case cookie data should not be included in the event
                    if (!include.includes('cookies')) {
                        delete requestData.headers.cookie;
                    }
                    // Remove IP headers in case IP data should not be included in the event
                    if (!include.includes('ip')) {
                        getIpAddress.ipHeaderNames.forEach((ipHeaderName)=>{
                            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
                            delete requestData.headers[ipHeaderName];
                        });
                    }
                    break;
                }
            case 'method':
                {
                    requestData.method = method;
                    break;
                }
            case 'url':
                {
                    requestData.url = absoluteUrl;
                    break;
                }
            case 'cookies':
                {
                    // cookies:
                    //   node, express, koa: req.headers.cookie
                    //   vercel, sails.js, express (w/ cookie middleware), nextjs: req.cookies
                    requestData.cookies = // TODO (v8 / #5257): We're only sending the empty object for backwards compatibility, so the last bit can
                    // come off in v8
                    req.cookies || headers.cookie && cookie.parseCookie(headers.cookie) || {};
                    break;
                }
            case 'query_string':
                {
                    // query string:
                    //   node: req.url (raw)
                    //   express, koa, nextjs: req.query
                    requestData.query_string = extractQueryParams(req);
                    break;
                }
            case 'data':
                {
                    if (method === 'GET' || method === 'HEAD') {
                        break;
                    }
                    // NOTE: As of v8, request is (unless a user sets this manually) ALWAYS a http request
                    // Which does not have a body by default
                    // However, in our http instrumentation, we patch the request to capture the body and store it on the
                    // request as `.body` anyhow
                    // In v9, we may update requestData to only work with plain http requests
                    // body data:
                    //   express, koa, nextjs: req.body
                    //
                    //   when using node by itself, you have to read the incoming stream(see
                    //   https://nodejs.dev/learn/get-http-request-body-data-using-nodejs); if a user is doing that, we can't know
                    //   where they're going to store the final result, so they'll have to capture this data themselves
                    const body = req.body;
                    if (body !== undefined) {
                        const stringBody = is.isString(body) ? body : is.isPlainObject(body) ? JSON.stringify(normalize.normalize(body)) : string.truncate(`${body}`, 1024);
                        if (stringBody) {
                            requestData.data = stringBody;
                        }
                    }
                    break;
                }
            default:
                {
                    if (({}).hasOwnProperty.call(req, key)) {
                        requestData[key] = req[key];
                    }
                }
        }
    });
    return requestData;
}
/**
 * Add already normalized request data to an event.
 * This mutates the passed in event.
 */ function addNormalizedRequestDataToEvent(event, req, // This is non-standard data that is not part of the regular HTTP request
additionalData, options) {
    const include = {
        ...DEFAULT_INCLUDES,
        ...options && options.include
    };
    if (include.request) {
        const includeRequest = Array.isArray(include.request) ? [
            ...include.request
        ] : [
            ...DEFAULT_REQUEST_INCLUDES
        ];
        if (include.ip) {
            includeRequest.push('ip');
        }
        const extractedRequestData = extractNormalizedRequestData(req, {
            include: includeRequest
        });
        event.request = {
            ...event.request,
            ...extractedRequestData
        };
    }
    if (include.user) {
        const extractedUser = additionalData.user && is.isPlainObject(additionalData.user) ? extractUserData(additionalData.user, include.user) : {};
        if (Object.keys(extractedUser).length) {
            event.user = {
                ...event.user,
                ...extractedUser
            };
        }
    }
    if (include.ip) {
        const ip = req.headers && getIpAddress.getClientIPAddress(req.headers) || additionalData.ipAddress;
        if (ip) {
            event.user = {
                ...event.user,
                ip_address: ip
            };
        }
    }
}
/**
 * Add data from the given request to the given event
 *
 * @param event The event to which the request data will be added
 * @param req Request object
 * @param options.include Flags to control what data is included
 * @param options.deps Injected platform-specific dependencies
 * @returns The mutated `Event` object
 *
 * @deprecated Use `addNormalizedRequestDataToEvent` instead.
 */ function addRequestDataToEvent(event, req, options) {
    const include = {
        ...DEFAULT_INCLUDES,
        ...options && options.include
    };
    if (include.request) {
        const includeRequest = Array.isArray(include.request) ? [
            ...include.request
        ] : [
            ...DEFAULT_REQUEST_INCLUDES
        ];
        if (include.ip) {
            includeRequest.push('ip');
        }
        // eslint-disable-next-line deprecation/deprecation
        const extractedRequestData = extractRequestData(req, {
            include: includeRequest
        });
        event.request = {
            ...event.request,
            ...extractedRequestData
        };
    }
    if (include.user) {
        const extractedUser = req.user && is.isPlainObject(req.user) ? extractUserData(req.user, include.user) : {};
        if (Object.keys(extractedUser).length) {
            event.user = {
                ...event.user,
                ...extractedUser
            };
        }
    }
    // client ip:
    //   node, nextjs: req.socket.remoteAddress
    //   express, koa: req.ip
    //   It may also be sent by proxies as specified in X-Forwarded-For or similar headers
    if (include.ip) {
        const ip = req.headers && getIpAddress.getClientIPAddress(req.headers) || req.ip || req.socket && req.socket.remoteAddress;
        if (ip) {
            event.user = {
                ...event.user,
                ip_address: ip
            };
        }
    }
    return event;
}
function extractQueryParams(req) {
    // url (including path and query string):
    //   node, express: req.originalUrl
    //   koa, nextjs: req.url
    let originalUrl = req.originalUrl || req.url || '';
    if (!originalUrl) {
        return;
    }
    // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and
    // hostname on the beginning. Since the point here is just to grab the query string, it doesn't matter what we use.
    if (originalUrl.startsWith('/')) {
        originalUrl = `http://dogs.are.great${originalUrl}`;
    }
    try {
        const queryParams = req.query || new URL(originalUrl).search.slice(1);
        return queryParams.length ? queryParams : undefined;
    } catch (e2) {
        return undefined;
    }
}
/**
 * Transforms a `Headers` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into a simple key-value dict.
 * The header keys will be lower case: e.g. A "Content-Type" header will be stored as "content-type".
 */ // TODO(v8): Make this function return undefined when the extraction fails.
function winterCGHeadersToDict(winterCGHeaders) {
    const headers = {};
    try {
        winterCGHeaders.forEach((value, key)=>{
            if (typeof value === 'string') {
                // We check that value is a string even though it might be redundant to make sure prototype pollution is not possible.
                headers[key] = value;
            }
        });
    } catch (e) {
        debugBuild.DEBUG_BUILD && logger.logger.warn('Sentry failed extracting headers from a request object. If you see this, please file an issue.');
    }
    return headers;
}
/**
 * Convert common request headers to a simple dictionary.
 */ function headersToDict(reqHeaders) {
    const headers = Object.create(null);
    try {
        Object.entries(reqHeaders).forEach(([key, value])=>{
            if (typeof value === 'string') {
                headers[key] = value;
            }
        });
    } catch (e) {
        debugBuild.DEBUG_BUILD && logger.logger.warn('Sentry failed extracting headers from a request object. If you see this, please file an issue.');
    }
    return headers;
}
/**
 * Converts a `Request` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into the format that the `RequestData` integration understands.
 */ function winterCGRequestToRequestData(req) {
    const headers = winterCGHeadersToDict(req.headers);
    return {
        method: req.method,
        url: req.url,
        query_string: extractQueryParamsFromUrl(req.url),
        headers
    };
}
/**
 * Convert a HTTP request object to RequestEventData to be passed as normalizedRequest.
 * Instead of allowing `PolymorphicRequest` to be passed,
 * we want to be more specific and generally require a http.IncomingMessage-like object.
 */ function httpRequestToRequestData(request) {
    const headers = request.headers || {};
    const host = headers.host || '<no host>';
    const protocol = request.socket && request.socket.encrypted ? 'https' : 'http';
    const originalUrl = request.url || '';
    const absoluteUrl = originalUrl.startsWith(protocol) ? originalUrl : `${protocol}://${host}${originalUrl}`;
    // This is non-standard, but may be sometimes set
    // It may be overwritten later by our own body handling
    const data = request.body || undefined;
    // This is non-standard, but may be set on e.g. Next.js or Express requests
    const cookies = request.cookies;
    return object.dropUndefinedKeys({
        url: absoluteUrl,
        method: request.method,
        query_string: extractQueryParamsFromUrl(originalUrl),
        headers: headersToDict(headers),
        cookies,
        data
    });
}
/** Extract the query params from an URL. */ function extractQueryParamsFromUrl(url) {
    // url is path and query string
    if (!url) {
        return;
    }
    try {
        // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and
        // hostname as the base. Since the point here is just to grab the query string, it doesn't matter what we use.
        const queryParams = new URL(url, 'http://dogs.are.great').search.slice(1);
        return queryParams.length ? queryParams : undefined;
    } catch (e3) {
        return undefined;
    }
}
function extractNormalizedRequestData(normalizedRequest, { include }) {
    const includeKeys = include ? Array.isArray(include) ? include : DEFAULT_REQUEST_INCLUDES : [];
    const requestData = {};
    const headers = {
        ...normalizedRequest.headers
    };
    if (includeKeys.includes('headers')) {
        requestData.headers = headers;
        // Remove the Cookie header in case cookie data should not be included in the event
        if (!include.includes('cookies')) {
            delete headers.cookie;
        }
        // Remove IP headers in case IP data should not be included in the event
        if (!include.includes('ip')) {
            getIpAddress.ipHeaderNames.forEach((ipHeaderName)=>{
                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
                delete headers[ipHeaderName];
            });
        }
    }
    if (includeKeys.includes('method')) {
        requestData.method = normalizedRequest.method;
    }
    if (includeKeys.includes('url')) {
        requestData.url = normalizedRequest.url;
    }
    if (includeKeys.includes('cookies')) {
        const cookies = normalizedRequest.cookies || (headers && headers.cookie ? cookie.parseCookie(headers.cookie) : undefined);
        requestData.cookies = cookies || {};
    }
    if (includeKeys.includes('query_string')) {
        requestData.query_string = normalizedRequest.query_string;
    }
    if (includeKeys.includes('data')) {
        requestData.data = normalizedRequest.data;
    }
    return requestData;
}
exports.DEFAULT_USER_INCLUDES = DEFAULT_USER_INCLUDES;
exports.addNormalizedRequestDataToEvent = addNormalizedRequestDataToEvent;
exports.addRequestDataToEvent = addRequestDataToEvent;
exports.extractPathForTransaction = extractPathForTransaction;
exports.extractQueryParamsFromUrl = extractQueryParamsFromUrl;
exports.extractRequestData = extractRequestData;
exports.headersToDict = headersToDict;
exports.httpRequestToRequestData = httpRequestToRequestData;
exports.winterCGHeadersToDict = winterCGHeadersToDict;
exports.winterCGRequestToRequestData = winterCGRequestToRequestData; //# sourceMappingURL=requestdata.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/integrations/requestdata.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const integration = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integration.js [app-ssr] (ecmascript)");
const requestdata = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/requestdata.js [app-ssr] (ecmascript)");
const DEFAULT_OPTIONS = {
    include: {
        cookies: true,
        data: true,
        headers: true,
        ip: false,
        query_string: true,
        url: true,
        user: {
            id: true,
            username: true,
            email: true
        }
    },
    transactionNamingScheme: 'methodPath'
};
const INTEGRATION_NAME = 'RequestData';
const _requestDataIntegration = (options = {})=>{
    const _options = {
        ...DEFAULT_OPTIONS,
        ...options,
        include: {
            ...DEFAULT_OPTIONS.include,
            ...options.include,
            user: options.include && typeof options.include.user === 'boolean' ? options.include.user : {
                ...DEFAULT_OPTIONS.include.user,
                // Unclear why TS still thinks `options.include.user` could be a boolean at this point
                ...(options.include || {}).user
            }
        }
    };
    return {
        name: INTEGRATION_NAME,
        processEvent (event) {
            // Note: In the long run, most of the logic here should probably move into the request data utility functions. For
            // the moment it lives here, though, until https://github.com/getsentry/sentry-javascript/issues/5718 is addressed.
            // (TL;DR: Those functions touch many parts of the repo in many different ways, and need to be cleaned up. Once
            // that's happened, it will be easier to add this logic in without worrying about unexpected side effects.)
            const { sdkProcessingMetadata = {} } = event;
            const { request, normalizedRequest } = sdkProcessingMetadata;
            const addRequestDataOptions = convertReqDataIntegrationOptsToAddReqDataOpts(_options);
            // If this is set, it takes precedence over the plain request object
            if (normalizedRequest) {
                // Some other data is not available in standard HTTP requests, but can sometimes be augmented by e.g. Express or Next.js
                const ipAddress = request ? request.ip || request.socket && request.socket.remoteAddress : undefined;
                const user = request ? request.user : undefined;
                requestdata.addNormalizedRequestDataToEvent(event, normalizedRequest, {
                    ipAddress,
                    user
                }, addRequestDataOptions);
                return event;
            }
            // TODO(v9): Eventually we can remove this fallback branch and only rely on the normalizedRequest above
            if (!request) {
                return event;
            }
            // eslint-disable-next-line deprecation/deprecation
            return requestdata.addRequestDataToEvent(event, request, addRequestDataOptions);
        }
    };
};
/**
 * Add data about a request to an event. Primarily for use in Node-based SDKs, but included in `@sentry/core`
 * so it can be used in cross-platform SDKs like `@sentry/nextjs`.
 */ const requestDataIntegration = integration.defineIntegration(_requestDataIntegration);
/** Convert this integration's options to match what `addRequestDataToEvent` expects */ /** TODO: Can possibly be deleted once https://github.com/getsentry/sentry-javascript/issues/5718 is fixed */ function convertReqDataIntegrationOptsToAddReqDataOpts(integrationOptions) {
    const { // eslint-disable-next-line deprecation/deprecation
    transactionNamingScheme, include: { ip, user, ...requestOptions } } = integrationOptions;
    const requestIncludeKeys = [
        'method'
    ];
    for (const [key, value] of Object.entries(requestOptions)){
        if (value) {
            requestIncludeKeys.push(key);
        }
    }
    let addReqDataUserOpt;
    if (user === undefined) {
        addReqDataUserOpt = true;
    } else if (typeof user === 'boolean') {
        addReqDataUserOpt = user;
    } else {
        const userIncludeKeys = [];
        for (const [key, value] of Object.entries(user)){
            if (value) {
                userIncludeKeys.push(key);
            }
        }
        addReqDataUserOpt = userIncludeKeys;
    }
    return {
        include: {
            ip,
            user: addReqDataUserOpt,
            request: requestIncludeKeys.length !== 0 ? requestIncludeKeys : undefined,
            transaction: transactionNamingScheme
        }
    };
}
exports.requestDataIntegration = requestDataIntegration; //# sourceMappingURL=requestdata.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/instrument/console.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
const handlers = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js [app-ssr] (ecmascript)");
/**
 * Add an instrumentation handler for when a console.xxx method is called.
 *
 * Use at your own risk, this might break without changelog notice, only used internally.
 * @hidden
 */ function addConsoleInstrumentationHandler(handler) {
    const type = 'console';
    handlers.addHandler(type, handler);
    handlers.maybeInstrument(type, instrumentConsole);
}
function instrumentConsole() {
    if (!('console' in worldwide.GLOBAL_OBJ)) {
        return;
    }
    logger.CONSOLE_LEVELS.forEach(function(level) {
        if (!(level in worldwide.GLOBAL_OBJ.console)) {
            return;
        }
        object.fill(worldwide.GLOBAL_OBJ.console, level, function(originalConsoleMethod) {
            logger.originalConsoleMethods[level] = originalConsoleMethod;
            return function(...args) {
                const handlerData = {
                    args,
                    level
                };
                handlers.triggerHandlers('console', handlerData);
                const log = logger.originalConsoleMethods[level];
                log && log.apply(worldwide.GLOBAL_OBJ.console, args);
            };
        });
    });
}
exports.addConsoleInstrumentationHandler = addConsoleInstrumentationHandler; //# sourceMappingURL=console.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/severity.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
/**
 * @deprecated This variable has been deprecated and will be removed in the next major version.
 */ const validSeverityLevels = [
    'fatal',
    'error',
    'warning',
    'log',
    'info',
    'debug'
];
/**
 * Converts a string-based level into a `SeverityLevel`, normalizing it along the way.
 *
 * @param level String representation of desired `SeverityLevel`.
 * @returns The `SeverityLevel` corresponding to the given string, or 'log' if the string isn't a valid level.
 */ function severityLevelFromString(level) {
    return level === 'warn' ? 'warning' : [
        'fatal',
        'error',
        'warning',
        'log',
        'info',
        'debug'
    ].includes(level) ? level : 'log';
}
exports.severityLevelFromString = severityLevelFromString;
exports.validSeverityLevels = validSeverityLevels; //# sourceMappingURL=severity.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/integrations/captureconsole.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const exports$1 = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/exports.js [app-ssr] (ecmascript)");
const integration = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integration.js [app-ssr] (ecmascript)");
const console = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/instrument/console.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const misc = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/misc.js [app-ssr] (ecmascript)");
const severity = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/severity.js [app-ssr] (ecmascript)");
const string = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/string.js [app-ssr] (ecmascript)");
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
const INTEGRATION_NAME = 'CaptureConsole';
const _captureConsoleIntegration = (options = {})=>{
    const levels = options.levels || logger.CONSOLE_LEVELS;
    // TODO(v9): Flip default value to `true`
    const handled = !!options.handled;
    return {
        name: INTEGRATION_NAME,
        setup (client) {
            if (!('console' in worldwide.GLOBAL_OBJ)) {
                return;
            }
            console.addConsoleInstrumentationHandler(({ args, level })=>{
                if (currentScopes.getClient() !== client || !levels.includes(level)) {
                    return;
                }
                consoleHandler(args, level, handled);
            });
        }
    };
};
/**
 * Send Console API calls as Sentry Events.
 */ const captureConsoleIntegration = integration.defineIntegration(_captureConsoleIntegration);
function consoleHandler(args, level, handled) {
    const captureContext = {
        level: severity.severityLevelFromString(level),
        extra: {
            arguments: args
        }
    };
    currentScopes.withScope((scope)=>{
        scope.addEventProcessor((event)=>{
            event.logger = 'console';
            misc.addExceptionMechanism(event, {
                handled,
                type: 'console'
            });
            return event;
        });
        if (level === 'assert') {
            if (!args[0]) {
                const message = `Assertion failed: ${string.safeJoin(args.slice(1), ' ') || 'console.assert'}`;
                scope.setExtra('arguments', args.slice(1));
                exports$1.captureMessage(message, captureContext);
            }
            return;
        }
        const error = args.find((arg)=>arg instanceof Error);
        if (error) {
            exports$1.captureException(error, captureContext);
            return;
        }
        const message = string.safeJoin(args, ' ');
        exports$1.captureMessage(message, captureContext);
    });
}
exports.captureConsoleIntegration = captureConsoleIntegration; //# sourceMappingURL=captureconsole.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/integrations/debug.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const integration = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integration.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const INTEGRATION_NAME = 'Debug';
const _debugIntegration = (options = {})=>{
    const _options = {
        debugger: false,
        stringify: false,
        ...options
    };
    return {
        name: INTEGRATION_NAME,
        setup (client) {
            client.on('beforeSendEvent', (event, hint)=>{
                if (_options.debugger) {
                    // eslint-disable-next-line no-debugger
                    debugger;
                }
                /* eslint-disable no-console */ logger.consoleSandbox(()=>{
                    if (_options.stringify) {
                        console.log(JSON.stringify(event, null, 2));
                        if (hint && Object.keys(hint).length) {
                            console.log(JSON.stringify(hint, null, 2));
                        }
                    } else {
                        console.log(event);
                        if (hint && Object.keys(hint).length) {
                            console.log(hint);
                        }
                    }
                });
            /* eslint-enable no-console */ });
        }
    };
};
/**
 * Integration to debug sent Sentry events.
 * This integration should not be used in production.
 *
 * @deprecated This integration is deprecated and will be removed in the next major version of the SDK.
 * To log outgoing events, use [Hook Options](https://docs.sentry.io/platforms/javascript/configuration/options/#hooks) (`beforeSend`, `beforeSendTransaction`, ...).
 */ const debugIntegration = integration.defineIntegration(_debugIntegration);
exports.debugIntegration = debugIntegration; //# sourceMappingURL=debug.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/integrations/dedupe.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const integration = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integration.js [app-ssr] (ecmascript)");
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const stacktrace = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js [app-ssr] (ecmascript)");
const INTEGRATION_NAME = 'Dedupe';
const _dedupeIntegration = ()=>{
    let previousEvent;
    return {
        name: INTEGRATION_NAME,
        processEvent (currentEvent) {
            // We want to ignore any non-error type events, e.g. transactions or replays
            // These should never be deduped, and also not be compared against as _previousEvent.
            if (currentEvent.type) {
                return currentEvent;
            }
            // Juuust in case something goes wrong
            try {
                if (_shouldDropEvent(currentEvent, previousEvent)) {
                    debugBuild.DEBUG_BUILD && logger.logger.warn('Event dropped due to being a duplicate of previously captured event.');
                    return null;
                }
            } catch (_oO) {} // eslint-disable-line no-empty
            return previousEvent = currentEvent;
        }
    };
};
/**
 * Deduplication filter.
 */ const dedupeIntegration = integration.defineIntegration(_dedupeIntegration);
/** only exported for tests. */ function _shouldDropEvent(currentEvent, previousEvent) {
    if (!previousEvent) {
        return false;
    }
    if (_isSameMessageEvent(currentEvent, previousEvent)) {
        return true;
    }
    if (_isSameExceptionEvent(currentEvent, previousEvent)) {
        return true;
    }
    return false;
}
function _isSameMessageEvent(currentEvent, previousEvent) {
    const currentMessage = currentEvent.message;
    const previousMessage = previousEvent.message;
    // If neither event has a message property, they were both exceptions, so bail out
    if (!currentMessage && !previousMessage) {
        return false;
    }
    // If only one event has a stacktrace, but not the other one, they are not the same
    if (currentMessage && !previousMessage || !currentMessage && previousMessage) {
        return false;
    }
    if (currentMessage !== previousMessage) {
        return false;
    }
    if (!_isSameFingerprint(currentEvent, previousEvent)) {
        return false;
    }
    if (!_isSameStacktrace(currentEvent, previousEvent)) {
        return false;
    }
    return true;
}
function _isSameExceptionEvent(currentEvent, previousEvent) {
    const previousException = _getExceptionFromEvent(previousEvent);
    const currentException = _getExceptionFromEvent(currentEvent);
    if (!previousException || !currentException) {
        return false;
    }
    if (previousException.type !== currentException.type || previousException.value !== currentException.value) {
        return false;
    }
    if (!_isSameFingerprint(currentEvent, previousEvent)) {
        return false;
    }
    if (!_isSameStacktrace(currentEvent, previousEvent)) {
        return false;
    }
    return true;
}
function _isSameStacktrace(currentEvent, previousEvent) {
    let currentFrames = stacktrace.getFramesFromEvent(currentEvent);
    let previousFrames = stacktrace.getFramesFromEvent(previousEvent);
    // If neither event has a stacktrace, they are assumed to be the same
    if (!currentFrames && !previousFrames) {
        return true;
    }
    // If only one event has a stacktrace, but not the other one, they are not the same
    if (currentFrames && !previousFrames || !currentFrames && previousFrames) {
        return false;
    }
    currentFrames = currentFrames;
    previousFrames = previousFrames;
    // If number of frames differ, they are not the same
    if (previousFrames.length !== currentFrames.length) {
        return false;
    }
    // Otherwise, compare the two
    for(let i = 0; i < previousFrames.length; i++){
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const frameA = previousFrames[i];
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const frameB = currentFrames[i];
        if (frameA.filename !== frameB.filename || frameA.lineno !== frameB.lineno || frameA.colno !== frameB.colno || frameA.function !== frameB.function) {
            return false;
        }
    }
    return true;
}
function _isSameFingerprint(currentEvent, previousEvent) {
    let currentFingerprint = currentEvent.fingerprint;
    let previousFingerprint = previousEvent.fingerprint;
    // If neither event has a fingerprint, they are assumed to be the same
    if (!currentFingerprint && !previousFingerprint) {
        return true;
    }
    // If only one event has a fingerprint, but not the other one, they are not the same
    if (currentFingerprint && !previousFingerprint || !currentFingerprint && previousFingerprint) {
        return false;
    }
    currentFingerprint = currentFingerprint;
    previousFingerprint = previousFingerprint;
    // Otherwise, compare the two
    try {
        return !!(currentFingerprint.join('') === previousFingerprint.join(''));
    } catch (_oO) {
        return false;
    }
}
function _getExceptionFromEvent(event) {
    return event.exception && event.exception.values && event.exception.values[0];
}
exports._shouldDropEvent = _shouldDropEvent;
exports.dedupeIntegration = dedupeIntegration; //# sourceMappingURL=dedupe.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/integrations/extraerrordata.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const integration = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integration.js [app-ssr] (ecmascript)");
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const normalize = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js [app-ssr] (ecmascript)");
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
const string = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/string.js [app-ssr] (ecmascript)");
const INTEGRATION_NAME = 'ExtraErrorData';
/**
 * Extract additional data for from original exceptions.
 */ const _extraErrorDataIntegration = (options = {})=>{
    const { depth = 3, captureErrorCause = true } = options;
    return {
        name: INTEGRATION_NAME,
        processEvent (event, hint, client) {
            const { maxValueLength = 250 } = client.getOptions();
            return _enhanceEventWithErrorData(event, hint, depth, captureErrorCause, maxValueLength);
        }
    };
};
const extraErrorDataIntegration = integration.defineIntegration(_extraErrorDataIntegration);
function _enhanceEventWithErrorData(event, hint = {}, depth, captureErrorCause, maxValueLength) {
    if (!hint.originalException || !is.isError(hint.originalException)) {
        return event;
    }
    const exceptionName = hint.originalException.name || hint.originalException.constructor.name;
    const errorData = _extractErrorData(hint.originalException, captureErrorCause, maxValueLength);
    if (errorData) {
        const contexts = {
            ...event.contexts
        };
        const normalizedErrorData = normalize.normalize(errorData, depth);
        if (is.isPlainObject(normalizedErrorData)) {
            // We mark the error data as "already normalized" here, because we don't want other normalization procedures to
            // potentially truncate the data we just already normalized, with a certain depth setting.
            object.addNonEnumerableProperty(normalizedErrorData, '__sentry_skip_normalization__', true);
            contexts[exceptionName] = normalizedErrorData;
        }
        return {
            ...event,
            contexts
        };
    }
    return event;
}
/**
 * Extract extra information from the Error object
 */ function _extractErrorData(error, captureErrorCause, maxValueLength) {
    // We are trying to enhance already existing event, so no harm done if it won't succeed
    try {
        const nativeKeys = [
            'name',
            'message',
            'stack',
            'line',
            'column',
            'fileName',
            'lineNumber',
            'columnNumber',
            'toJSON'
        ];
        const extraErrorInfo = {};
        // We want only enumerable properties, thus `getOwnPropertyNames` is redundant here, as we filter keys anyway.
        for (const key of Object.keys(error)){
            if (nativeKeys.indexOf(key) !== -1) {
                continue;
            }
            const value = error[key];
            extraErrorInfo[key] = is.isError(value) || typeof value === 'string' ? string.truncate(`${value}`, maxValueLength) : value;
        }
        // Error.cause is a standard property that is non enumerable, we therefore need to access it separately.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause
        if (captureErrorCause && error.cause !== undefined) {
            extraErrorInfo.cause = is.isError(error.cause) ? error.cause.toString() : error.cause;
        }
        // Check if someone attached `toJSON` method to grab even more properties (eg. axios is doing that)
        if (typeof error.toJSON === 'function') {
            const serializedError = error.toJSON();
            for (const key of Object.keys(serializedError)){
                const value = serializedError[key];
                extraErrorInfo[key] = is.isError(value) ? value.toString() : value;
            }
        }
        return extraErrorInfo;
    } catch (oO) {
        debugBuild.DEBUG_BUILD && logger.logger.error('Unable to extract extra data from the Error object:', oO);
    }
    return null;
}
exports.extraErrorDataIntegration = extraErrorDataIntegration; //# sourceMappingURL=extraerrordata.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/path.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript
// https://github.com/calvinmetcalf/rollup-plugin-node-builtins/blob/63ab8aacd013767445ca299e468d9a60a95328d7/src/es6/path.js
//
// Copyright Joyent, Inc.and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
/** JSDoc */ function normalizeArray(parts, allowAboveRoot) {
    // if the path tries to go above the root, `up` ends up > 0
    let up = 0;
    for(let i = parts.length - 1; i >= 0; i--){
        const last = parts[i];
        if (last === '.') {
            parts.splice(i, 1);
        } else if (last === '..') {
            parts.splice(i, 1);
            up++;
        } else if (up) {
            parts.splice(i, 1);
            up--;
        }
    }
    // if the path is allowed to go above the root, restore leading ..s
    if (allowAboveRoot) {
        for(; up--; up){
            parts.unshift('..');
        }
    }
    return parts;
}
// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
const splitPathRe = /^(\S+:\\|\/?)([\s\S]*?)((?:\.{1,2}|[^/\\]+?|)(\.[^./\\]*|))(?:[/\\]*)$/;
/** JSDoc */ function splitPath(filename) {
    // Truncate files names greater than 1024 characters to avoid regex dos
    // https://github.com/getsentry/sentry-javascript/pull/8737#discussion_r1285719172
    const truncated = filename.length > 1024 ? `<truncated>${filename.slice(-1024)}` : filename;
    const parts = splitPathRe.exec(truncated);
    return parts ? parts.slice(1) : [];
}
// path.resolve([from ...], to)
// posix version
/** JSDoc */ function resolve(...args) {
    let resolvedPath = '';
    let resolvedAbsolute = false;
    for(let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--){
        const path = i >= 0 ? args[i] : '/';
        // Skip empty entries
        if (!path) {
            continue;
        }
        resolvedPath = `${path}/${resolvedPath}`;
        resolvedAbsolute = path.charAt(0) === '/';
    }
    // At this point the path should be resolved to a full absolute path, but
    // handle relative paths to be safe (might happen when process.cwd() fails)
    // Normalize the path
    resolvedPath = normalizeArray(resolvedPath.split('/').filter((p)=>!!p), !resolvedAbsolute).join('/');
    return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
}
/** JSDoc */ function trim(arr) {
    let start = 0;
    for(; start < arr.length; start++){
        if (arr[start] !== '') {
            break;
        }
    }
    let end = arr.length - 1;
    for(; end >= 0; end--){
        if (arr[end] !== '') {
            break;
        }
    }
    if (start > end) {
        return [];
    }
    return arr.slice(start, end - start + 1);
}
// path.relative(from, to)
// posix version
/** JSDoc */ function relative(from, to) {
    /* eslint-disable no-param-reassign */ from = resolve(from).slice(1);
    to = resolve(to).slice(1);
    /* eslint-enable no-param-reassign */ const fromParts = trim(from.split('/'));
    const toParts = trim(to.split('/'));
    const length = Math.min(fromParts.length, toParts.length);
    let samePartsLength = length;
    for(let i = 0; i < length; i++){
        if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
        }
    }
    let outputParts = [];
    for(let i = samePartsLength; i < fromParts.length; i++){
        outputParts.push('..');
    }
    outputParts = outputParts.concat(toParts.slice(samePartsLength));
    return outputParts.join('/');
}
// path.normalize(path)
// posix version
/** JSDoc */ function normalizePath(path) {
    const isPathAbsolute = isAbsolute(path);
    const trailingSlash = path.slice(-1) === '/';
    // Normalize the path
    let normalizedPath = normalizeArray(path.split('/').filter((p)=>!!p), !isPathAbsolute).join('/');
    if (!normalizedPath && !isPathAbsolute) {
        normalizedPath = '.';
    }
    if (normalizedPath && trailingSlash) {
        normalizedPath += '/';
    }
    return (isPathAbsolute ? '/' : '') + normalizedPath;
}
// posix version
/** JSDoc */ function isAbsolute(path) {
    return path.charAt(0) === '/';
}
// posix version
/** JSDoc */ function join(...args) {
    return normalizePath(args.join('/'));
}
/** JSDoc */ function dirname(path) {
    const result = splitPath(path);
    const root = result[0] || '';
    let dir = result[1];
    if (!root && !dir) {
        // No dirname whatsoever
        return '.';
    }
    if (dir) {
        // It has a dirname, strip trailing slash
        dir = dir.slice(0, dir.length - 1);
    }
    return root + dir;
}
/** JSDoc */ function basename(path, ext) {
    let f = splitPath(path)[2] || '';
    if (ext && f.slice(ext.length * -1) === ext) {
        f = f.slice(0, f.length - ext.length);
    }
    return f;
}
exports.basename = basename;
exports.dirname = dirname;
exports.isAbsolute = isAbsolute;
exports.join = join;
exports.normalizePath = normalizePath;
exports.relative = relative;
exports.resolve = resolve; //# sourceMappingURL=path.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/integrations/rewriteframes.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const integration = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integration.js [app-ssr] (ecmascript)");
const path = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/path.js [app-ssr] (ecmascript)");
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
const INTEGRATION_NAME = 'RewriteFrames';
/**
 * Rewrite event frames paths.
 */ const rewriteFramesIntegration = integration.defineIntegration((options = {})=>{
    const root = options.root;
    const prefix = options.prefix || 'app:///';
    const isBrowser = 'window' in worldwide.GLOBAL_OBJ && worldwide.GLOBAL_OBJ.window !== undefined;
    const iteratee = options.iteratee || generateIteratee({
        isBrowser,
        root,
        prefix
    });
    /** Process an exception event. */ function _processExceptionsEvent(event) {
        try {
            return {
                ...event,
                exception: {
                    ...event.exception,
                    // The check for this is performed inside `process` call itself, safe to skip here
                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                    values: event.exception.values.map((value)=>({
                            ...value,
                            ...value.stacktrace && {
                                stacktrace: _processStacktrace(value.stacktrace)
                            }
                        }))
                }
            };
        } catch (_oO) {
            return event;
        }
    }
    /** Process a stack trace. */ function _processStacktrace(stacktrace) {
        return {
            ...stacktrace,
            frames: stacktrace && stacktrace.frames && stacktrace.frames.map((f)=>iteratee(f))
        };
    }
    return {
        name: INTEGRATION_NAME,
        processEvent (originalEvent) {
            let processedEvent = originalEvent;
            if (originalEvent.exception && Array.isArray(originalEvent.exception.values)) {
                processedEvent = _processExceptionsEvent(processedEvent);
            }
            return processedEvent;
        }
    };
});
/**
 * Exported only for tests.
 */ function generateIteratee({ isBrowser, root, prefix }) {
    return (frame)=>{
        if (!frame.filename) {
            return frame;
        }
        // Determine if this is a Windows frame by checking for a Windows-style prefix such as `C:\`
        const isWindowsFrame = /^[a-zA-Z]:\\/.test(frame.filename) || frame.filename.includes('\\') && !frame.filename.includes('/');
        // Check if the frame filename begins with `/`
        const startsWithSlash = /^\//.test(frame.filename);
        if (isBrowser) {
            if (root) {
                const oldFilename = frame.filename;
                if (oldFilename.indexOf(root) === 0) {
                    frame.filename = oldFilename.replace(root, prefix);
                }
            }
        } else {
            if (isWindowsFrame || startsWithSlash) {
                const filename = isWindowsFrame ? frame.filename.replace(/^[a-zA-Z]:/, '') // remove Windows-style prefix
                .replace(/\\/g, '/') // replace all `\\` instances with `/`
                 : frame.filename;
                const base = root ? path.relative(root, filename) : path.basename(filename);
                frame.filename = `${prefix}${base}`;
            }
        }
        return frame;
    };
}
exports.generateIteratee = generateIteratee;
exports.rewriteFramesIntegration = rewriteFramesIntegration; //# sourceMappingURL=rewriteframes.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/integrations/sessiontiming.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const integration = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integration.js [app-ssr] (ecmascript)");
const time = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)");
const INTEGRATION_NAME = 'SessionTiming';
const _sessionTimingIntegration = ()=>{
    const startTime = time.timestampInSeconds() * 1000;
    return {
        name: INTEGRATION_NAME,
        processEvent (event) {
            const now = time.timestampInSeconds() * 1000;
            return {
                ...event,
                extra: {
                    ...event.extra,
                    ['session:start']: startTime,
                    ['session:duration']: now - startTime,
                    ['session:end']: now
                }
            };
        }
    };
};
/**
 * This function adds duration since the sessionTimingIntegration was initialized
 * till the time event was sent.
 *
 * @deprecated This integration is deprecated and will be removed in the next major version of the SDK.
 * To capture session durations alongside events, use [Context](https://docs.sentry.io/platforms/javascript/enriching-events/context/) (`Sentry.setContext()`).
 */ const sessionTimingIntegration = integration.defineIntegration(_sessionTimingIntegration);
exports.sessionTimingIntegration = sessionTimingIntegration; //# sourceMappingURL=sessiontiming.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/integrations/zoderrors.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const integration = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integration.js [app-ssr] (ecmascript)");
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
const string = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/string.js [app-ssr] (ecmascript)");
const DEFAULT_LIMIT = 10;
const INTEGRATION_NAME = 'ZodErrors';
// Simplified ZodIssue type definition
function originalExceptionIsZodError(originalException) {
    return is.isError(originalException) && originalException.name === 'ZodError' && Array.isArray(originalException.errors);
}
/**
 * Formats child objects or arrays to a string
 * That is preserved when sent to Sentry
 */ function formatIssueTitle(issue) {
    return {
        ...issue,
        path: 'path' in issue && Array.isArray(issue.path) ? issue.path.join('.') : undefined,
        keys: 'keys' in issue ? JSON.stringify(issue.keys) : undefined,
        unionErrors: 'unionErrors' in issue ? JSON.stringify(issue.unionErrors) : undefined
    };
}
/**
 * Zod error message is a stringified version of ZodError.issues
 * This doesn't display well in the Sentry UI. Replace it with something shorter.
 */ function formatIssueMessage(zodError) {
    const errorKeyMap = new Set();
    for (const iss of zodError.issues){
        if (iss.path && iss.path[0]) {
            errorKeyMap.add(iss.path[0]);
        }
    }
    const errorKeys = Array.from(errorKeyMap);
    return `Failed to validate keys: ${string.truncate(errorKeys.join(', '), 100)}`;
}
/**
 * Applies ZodError issues to an event extras and replaces the error message
 */ function applyZodErrorsToEvent(limit, event, hint) {
    if (!event.exception || !event.exception.values || !hint || !hint.originalException || !originalExceptionIsZodError(hint.originalException) || hint.originalException.issues.length === 0) {
        return event;
    }
    return {
        ...event,
        exception: {
            ...event.exception,
            values: [
                {
                    ...event.exception.values[0],
                    value: formatIssueMessage(hint.originalException)
                },
                ...event.exception.values.slice(1)
            ]
        },
        extra: {
            ...event.extra,
            'zoderror.issues': hint.originalException.errors.slice(0, limit).map(formatIssueTitle)
        }
    };
}
const _zodErrorsIntegration = (options = {})=>{
    const limit = options.limit || DEFAULT_LIMIT;
    return {
        name: INTEGRATION_NAME,
        processEvent (originalEvent, hint) {
            const processedEvent = applyZodErrorsToEvent(limit, originalEvent, hint);
            return processedEvent;
        }
    };
};
const zodErrorsIntegration = integration.defineIntegration(_zodErrorsIntegration);
exports.applyZodErrorsToEvent = applyZodErrorsToEvent;
exports.zodErrorsIntegration = zodErrorsIntegration; //# sourceMappingURL=zoderrors.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/integrations/third-party-errors-filter.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const integration = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integration.js [app-ssr] (ecmascript)");
const metadata = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metadata.js [app-ssr] (ecmascript)");
const envelope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js [app-ssr] (ecmascript)");
const stacktrace = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js [app-ssr] (ecmascript)");
/**
 * This integration allows you to filter out, or tag error events that do not come from user code marked with a bundle key via the Sentry bundler plugins.
 */ const thirdPartyErrorFilterIntegration = integration.defineIntegration((options)=>{
    return {
        name: 'ThirdPartyErrorsFilter',
        setup (client) {
            // We need to strip metadata from stack frames before sending them to Sentry since these are client side only.
            // TODO(lforst): Move this cleanup logic into a more central place in the SDK.
            client.on('beforeEnvelope', (envelope$1)=>{
                envelope.forEachEnvelopeItem(envelope$1, (item, type)=>{
                    if (type === 'event') {
                        const event = Array.isArray(item) ? item[1] : undefined;
                        if (event) {
                            metadata.stripMetadataFromStackFrames(event);
                            item[1] = event;
                        }
                    }
                });
            });
            client.on('applyFrameMetadata', (event)=>{
                // Only apply stack frame metadata to error events
                if (event.type) {
                    return;
                }
                const stackParser = client.getOptions().stackParser;
                metadata.addMetadataToStackFrames(stackParser, event);
            });
        },
        processEvent (event) {
            const frameKeys = getBundleKeysForAllFramesWithFilenames(event);
            if (frameKeys) {
                const arrayMethod = options.behaviour === 'drop-error-if-contains-third-party-frames' || options.behaviour === 'apply-tag-if-contains-third-party-frames' ? 'some' : 'every';
                const behaviourApplies = frameKeys[arrayMethod]((keys)=>!keys.some((key)=>options.filterKeys.includes(key)));
                if (behaviourApplies) {
                    const shouldDrop = options.behaviour === 'drop-error-if-contains-third-party-frames' || options.behaviour === 'drop-error-if-exclusively-contains-third-party-frames';
                    if (shouldDrop) {
                        return null;
                    } else {
                        event.tags = {
                            ...event.tags,
                            third_party_code: true
                        };
                    }
                }
            }
            return event;
        }
    };
});
function getBundleKeysForAllFramesWithFilenames(event) {
    const frames = stacktrace.getFramesFromEvent(event);
    if (!frames) {
        return undefined;
    }
    return frames// Exclude frames without a filename since these are likely native code or built-ins
    .filter((frame)=>!!frame.filename).map((frame)=>{
        if (frame.module_metadata) {
            return Object.keys(frame.module_metadata).filter((key)=>key.startsWith(BUNDLER_PLUGIN_APP_KEY_PREFIX)).map((key)=>key.slice(BUNDLER_PLUGIN_APP_KEY_PREFIX.length));
        }
        return [];
    });
}
const BUNDLER_PLUGIN_APP_KEY_PREFIX = '_sentryBundlerPluginAppKey:';
exports.thirdPartyErrorFilterIntegration = thirdPartyErrorFilterIntegration; //# sourceMappingURL=third-party-errors-filter.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/metrics/constants.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const COUNTER_METRIC_TYPE = 'c';
const GAUGE_METRIC_TYPE = 'g';
const SET_METRIC_TYPE = 's';
const DISTRIBUTION_METRIC_TYPE = 'd';
/**
 * This does not match spec in https://develop.sentry.dev/sdk/metrics
 * but was chosen to optimize for the most common case in browser environments.
 */ const DEFAULT_BROWSER_FLUSH_INTERVAL = 5000;
/**
 * SDKs are required to bucket into 10 second intervals (rollup in seconds)
 * which is the current lower bound of metric accuracy.
 */ const DEFAULT_FLUSH_INTERVAL = 10000;
/**
 * The maximum number of metrics that should be stored in memory.
 */ const MAX_WEIGHT = 10000;
exports.COUNTER_METRIC_TYPE = COUNTER_METRIC_TYPE;
exports.DEFAULT_BROWSER_FLUSH_INTERVAL = DEFAULT_BROWSER_FLUSH_INTERVAL;
exports.DEFAULT_FLUSH_INTERVAL = DEFAULT_FLUSH_INTERVAL;
exports.DISTRIBUTION_METRIC_TYPE = DISTRIBUTION_METRIC_TYPE;
exports.GAUGE_METRIC_TYPE = GAUGE_METRIC_TYPE;
exports.MAX_WEIGHT = MAX_WEIGHT;
exports.SET_METRIC_TYPE = SET_METRIC_TYPE; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/metrics/exports.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/errors.js [app-ssr] (ecmascript)");
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const time = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)");
const spanUtils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanUtils.js [app-ssr] (ecmascript)");
const trace = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/trace.js [app-ssr] (ecmascript)");
const handleCallbackErrors = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js [app-ssr] (ecmascript)");
const constants = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/constants.js [app-ssr] (ecmascript)");
/**
 * Gets the metrics aggregator for a given client.
 * @param client The client for which to get the metrics aggregator.
 * @param Aggregator Optional metrics aggregator class to use to create an aggregator if one does not exist.
 */ function getMetricsAggregatorForClient(client, Aggregator) {
    const globalMetricsAggregators = worldwide.getGlobalSingleton('globalMetricsAggregators', ()=>new WeakMap());
    const aggregator = globalMetricsAggregators.get(client);
    if (aggregator) {
        return aggregator;
    }
    const newAggregator = new Aggregator(client);
    client.on('flush', ()=>newAggregator.flush());
    client.on('close', ()=>newAggregator.close());
    globalMetricsAggregators.set(client, newAggregator);
    return newAggregator;
}
function addToMetricsAggregator(Aggregator, metricType, name, value, data = {}) {
    const client = data.client || currentScopes.getClient();
    if (!client) {
        return;
    }
    const span = spanUtils.getActiveSpan();
    const rootSpan = span ? spanUtils.getRootSpan(span) : undefined;
    const transactionName = rootSpan && spanUtils.spanToJSON(rootSpan).description;
    const { unit, tags, timestamp } = data;
    const { release, environment } = client.getOptions();
    const metricTags = {};
    if (release) {
        metricTags.release = release;
    }
    if (environment) {
        metricTags.environment = environment;
    }
    if (transactionName) {
        metricTags.transaction = transactionName;
    }
    debugBuild.DEBUG_BUILD && logger.logger.log(`Adding value of ${value} to ${metricType} metric ${name}`);
    const aggregator = getMetricsAggregatorForClient(client, Aggregator);
    aggregator.add(metricType, name, value, unit, {
        ...metricTags,
        ...tags
    }, timestamp);
}
/**
 * Adds a value to a counter metric
 *
 * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.
 */ function increment(aggregator, name, value = 1, data) {
    addToMetricsAggregator(aggregator, constants.COUNTER_METRIC_TYPE, name, ensureNumber(value), data);
}
/**
 * Adds a value to a distribution metric
 *
 * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.
 */ function distribution(aggregator, name, value, data) {
    addToMetricsAggregator(aggregator, constants.DISTRIBUTION_METRIC_TYPE, name, ensureNumber(value), data);
}
/**
 * Adds a timing metric.
 * The metric is added as a distribution metric.
 *
 * You can either directly capture a numeric `value`, or wrap a callback function in `timing`.
 * In the latter case, the duration of the callback execution will be captured as a span & a metric.
 *
 * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.
 */ function timing(aggregator, name, value, unit = 'second', data) {
    // callback form
    if (typeof value === 'function') {
        const startTime = time.timestampInSeconds();
        return trace.startSpanManual({
            op: 'metrics.timing',
            name,
            startTime,
            onlyIfParent: true
        }, (span)=>{
            return handleCallbackErrors.handleCallbackErrors(()=>value(), ()=>{
            // no special error handling necessary
            }, ()=>{
                const endTime = time.timestampInSeconds();
                const timeDiff = endTime - startTime;
                // eslint-disable-next-line deprecation/deprecation
                distribution(aggregator, name, timeDiff, {
                    ...data,
                    unit: 'second'
                });
                span.end(endTime);
            });
        });
    }
    // value form
    // eslint-disable-next-line deprecation/deprecation
    distribution(aggregator, name, value, {
        ...data,
        unit
    });
}
/**
 * Adds a value to a set metric. Value must be a string or integer.
 *
 * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.
 */ function set(aggregator, name, value, data) {
    addToMetricsAggregator(aggregator, constants.SET_METRIC_TYPE, name, value, data);
}
/**
 * Adds a value to a gauge metric
 *
 * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.
 */ function gauge(aggregator, name, value, data) {
    addToMetricsAggregator(aggregator, constants.GAUGE_METRIC_TYPE, name, ensureNumber(value), data);
}
/**
 * The metrics API is used to capture custom metrics in Sentry.
 *
 * @deprecated The Sentry metrics beta has ended. This export will be removed in a future release.
 */ const metrics = {
    increment,
    distribution,
    set,
    gauge,
    timing,
    /**
   * @ignore This is for internal use only.
   */ getMetricsAggregatorForClient
};
// Although this is typed to be a number, we try to handle strings as well here
function ensureNumber(number) {
    return typeof number === 'string' ? parseInt(number) : number;
}
exports.metrics = metrics; //# sourceMappingURL=exports.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/profiling.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
function isProfilingIntegrationWithProfiler(integration) {
    return !!integration && typeof integration['_profiler'] !== 'undefined' && typeof integration['_profiler']['start'] === 'function' && typeof integration['_profiler']['stop'] === 'function';
}
/**
 * Starts the Sentry continuous profiler.
 * This mode is exclusive with the transaction profiler and will only work if the profilesSampleRate is set to a falsy value.
 * In continuous profiling mode, the profiler will keep reporting profile chunks to Sentry until it is stopped, which allows for continuous profiling of the application.
 */ function startProfiler() {
    const client = currentScopes.getClient();
    if (!client) {
        debugBuild.DEBUG_BUILD && logger.logger.warn('No Sentry client available, profiling is not started');
        return;
    }
    const integration = client.getIntegrationByName('ProfilingIntegration');
    if (!integration) {
        debugBuild.DEBUG_BUILD && logger.logger.warn('ProfilingIntegration is not available');
        return;
    }
    if (!isProfilingIntegrationWithProfiler(integration)) {
        debugBuild.DEBUG_BUILD && logger.logger.warn('Profiler is not available on profiling integration.');
        return;
    }
    integration._profiler.start();
}
/**
 * Stops the Sentry continuous profiler.
 * Calls to stop will stop the profiler and flush the currently collected profile data to Sentry.
 */ function stopProfiler() {
    const client = currentScopes.getClient();
    if (!client) {
        debugBuild.DEBUG_BUILD && logger.logger.warn('No Sentry client available, profiling is not started');
        return;
    }
    const integration = client.getIntegrationByName('ProfilingIntegration');
    if (!integration) {
        debugBuild.DEBUG_BUILD && logger.logger.warn('ProfilingIntegration is not available');
        return;
    }
    if (!isProfilingIntegrationWithProfiler(integration)) {
        debugBuild.DEBUG_BUILD && logger.logger.warn('Profiler is not available on profiling integration.');
        return;
    }
    integration._profiler.stop();
}
const profiler = {
    startProfiler,
    stopProfiler
};
exports.profiler = profiler; //# sourceMappingURL=profiling.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/metrics/utils.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
/**
 * Generate bucket key from metric properties.
 */ function getBucketKey(metricType, name, unit, tags) {
    const stringifiedTags = Object.entries(object.dropUndefinedKeys(tags)).sort((a, b)=>a[0].localeCompare(b[0]));
    return `${metricType}${name}${unit}${stringifiedTags}`;
}
/* eslint-disable no-bitwise */ /**
 * Simple hash function for strings.
 */ function simpleHash(s) {
    let rv = 0;
    for(let i = 0; i < s.length; i++){
        const c = s.charCodeAt(i);
        rv = (rv << 5) - rv + c;
        rv &= rv;
    }
    return rv >>> 0;
}
/* eslint-enable no-bitwise */ /**
 * Serialize metrics buckets into a string based on statsd format.
 *
 * Example of format:
 * metric.name@second:1:1.2|d|#a:value,b:anothervalue|T12345677
 * Segments:
 * name: metric.name
 * unit: second
 * value: [1, 1.2]
 * type of metric: d (distribution)
 * tags: { a: value, b: anothervalue }
 * timestamp: 12345677
 */ function serializeMetricBuckets(metricBucketItems) {
    let out = '';
    for (const item of metricBucketItems){
        const tagEntries = Object.entries(item.tags);
        const maybeTags = tagEntries.length > 0 ? `|#${tagEntries.map(([key, value])=>`${key}:${value}`).join(',')}` : '';
        out += `${item.name}@${item.unit}:${item.metric}|${item.metricType}${maybeTags}|T${item.timestamp}\n`;
    }
    return out;
}
/**
 * Sanitizes units
 *
 * These Regex's are straight from the normalisation docs:
 * https://develop.sentry.dev/sdk/metrics/#normalization
 */ function sanitizeUnit(unit) {
    return unit.replace(/[^\w]+/gi, '_');
}
/**
 * Sanitizes metric keys
 *
 * These Regex's are straight from the normalisation docs:
 * https://develop.sentry.dev/sdk/metrics/#normalization
 */ function sanitizeMetricKey(key) {
    return key.replace(/[^\w\-.]+/gi, '_');
}
/**
 * Sanitizes metric keys
 *
 * These Regex's are straight from the normalisation docs:
 * https://develop.sentry.dev/sdk/metrics/#normalization
 */ function sanitizeTagKey(key) {
    return key.replace(/[^\w\-./]+/gi, '');
}
/**
 * These Regex's are straight from the normalisation docs:
 * https://develop.sentry.dev/sdk/metrics/#normalization
 */ const tagValueReplacements = [
    [
        '\n',
        '\\n'
    ],
    [
        '\r',
        '\\r'
    ],
    [
        '\t',
        '\\t'
    ],
    [
        '\\',
        '\\\\'
    ],
    [
        '|',
        '\\u{7c}'
    ],
    [
        ',',
        '\\u{2c}'
    ]
];
function getCharOrReplacement(input) {
    for (const [search, replacement] of tagValueReplacements){
        if (input === search) {
            return replacement;
        }
    }
    return input;
}
function sanitizeTagValue(value) {
    return [
        ...value
    ].reduce((acc, char)=>acc + getCharOrReplacement(char), '');
}
/**
 * Sanitizes tags.
 */ function sanitizeTags(unsanitizedTags) {
    const tags = {};
    for(const key in unsanitizedTags){
        if (Object.prototype.hasOwnProperty.call(unsanitizedTags, key)) {
            const sanitizedKey = sanitizeTagKey(key);
            tags[sanitizedKey] = sanitizeTagValue(String(unsanitizedTags[key]));
        }
    }
    return tags;
}
exports.getBucketKey = getBucketKey;
exports.sanitizeMetricKey = sanitizeMetricKey;
exports.sanitizeTags = sanitizeTags;
exports.sanitizeUnit = sanitizeUnit;
exports.serializeMetricBuckets = serializeMetricBuckets;
exports.simpleHash = simpleHash; //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/metrics/envelope.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const dsn = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js [app-ssr] (ecmascript)");
const envelope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const utils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/utils.js [app-ssr] (ecmascript)");
/**
 * Captures aggregated metrics to the supplied client.
 */ function captureAggregateMetrics(client, metricBucketItems) {
    logger.logger.log(`Flushing aggregated metrics, number of metrics: ${metricBucketItems.length}`);
    const dsn = client.getDsn();
    const metadata = client.getSdkMetadata();
    const tunnel = client.getOptions().tunnel;
    const metricsEnvelope = createMetricEnvelope(metricBucketItems, dsn, metadata, tunnel);
    // sendEnvelope should not throw
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    client.sendEnvelope(metricsEnvelope);
}
/**
 * Create envelope from a metric aggregate.
 */ function createMetricEnvelope(metricBucketItems, dsn$1, metadata, tunnel) {
    const headers = {
        sent_at: new Date().toISOString()
    };
    if (metadata && metadata.sdk) {
        headers.sdk = {
            name: metadata.sdk.name,
            version: metadata.sdk.version
        };
    }
    if (!!tunnel && dsn$1) {
        headers.dsn = dsn.dsnToString(dsn$1);
    }
    const item = createMetricEnvelopeItem(metricBucketItems);
    return envelope.createEnvelope(headers, [
        item
    ]);
}
function createMetricEnvelopeItem(metricBucketItems) {
    const payload = utils.serializeMetricBuckets(metricBucketItems);
    const metricHeaders = {
        type: 'statsd',
        length: payload.length
    };
    return [
        metricHeaders,
        payload
    ];
}
exports.captureAggregateMetrics = captureAggregateMetrics;
exports.createMetricEnvelope = createMetricEnvelope; //# sourceMappingURL=envelope.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/metrics/instance.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const constants = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/constants.js [app-ssr] (ecmascript)");
const utils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/utils.js [app-ssr] (ecmascript)");
/**
 * A metric instance representing a counter.
 */ class CounterMetric {
    constructor(_value){
        this._value = _value;
    }
    /** @inheritDoc */ get weight() {
        return 1;
    }
    /** @inheritdoc */ add(value) {
        this._value += value;
    }
    /** @inheritdoc */ toString() {
        return `${this._value}`;
    }
}
/**
 * A metric instance representing a gauge.
 */ class GaugeMetric {
    constructor(value){
        this._last = value;
        this._min = value;
        this._max = value;
        this._sum = value;
        this._count = 1;
    }
    /** @inheritDoc */ get weight() {
        return 5;
    }
    /** @inheritdoc */ add(value) {
        this._last = value;
        if (value < this._min) {
            this._min = value;
        }
        if (value > this._max) {
            this._max = value;
        }
        this._sum += value;
        this._count++;
    }
    /** @inheritdoc */ toString() {
        return `${this._last}:${this._min}:${this._max}:${this._sum}:${this._count}`;
    }
}
/**
 * A metric instance representing a distribution.
 */ class DistributionMetric {
    constructor(first){
        this._value = [
            first
        ];
    }
    /** @inheritDoc */ get weight() {
        return this._value.length;
    }
    /** @inheritdoc */ add(value) {
        this._value.push(value);
    }
    /** @inheritdoc */ toString() {
        return this._value.join(':');
    }
}
/**
 * A metric instance representing a set.
 */ class SetMetric {
    constructor(first){
        this.first = first;
        this._value = new Set([
            first
        ]);
    }
    /** @inheritDoc */ get weight() {
        return this._value.size;
    }
    /** @inheritdoc */ add(value) {
        this._value.add(value);
    }
    /** @inheritdoc */ toString() {
        return Array.from(this._value).map((val)=>typeof val === 'string' ? utils.simpleHash(val) : val).join(':');
    }
}
const METRIC_MAP = {
    [constants.COUNTER_METRIC_TYPE]: CounterMetric,
    [constants.GAUGE_METRIC_TYPE]: GaugeMetric,
    [constants.DISTRIBUTION_METRIC_TYPE]: DistributionMetric,
    [constants.SET_METRIC_TYPE]: SetMetric
};
exports.CounterMetric = CounterMetric;
exports.DistributionMetric = DistributionMetric;
exports.GaugeMetric = GaugeMetric;
exports.METRIC_MAP = METRIC_MAP;
exports.SetMetric = SetMetric; //# sourceMappingURL=instance.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/metrics/aggregator.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const time = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)");
const spanUtils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanUtils.js [app-ssr] (ecmascript)");
const constants = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/constants.js [app-ssr] (ecmascript)");
const envelope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/envelope.js [app-ssr] (ecmascript)");
const instance = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/instance.js [app-ssr] (ecmascript)");
const utils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/utils.js [app-ssr] (ecmascript)");
/**
 * A metrics aggregator that aggregates metrics in memory and flushes them periodically.
 */ class MetricsAggregator {
    // TODO(@anonrig): Use FinalizationRegistry to have a proper way of flushing the buckets
    // when the aggregator is garbage collected.
    // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry
    // Different metrics have different weights. We use this to limit the number of metrics
    // that we store in memory.
    // We adjust the type here to add the `unref()` part, as setInterval can technically return a number or a NodeJS.Timer
    // SDKs are required to shift the flush interval by random() * rollup_in_seconds.
    // That shift is determined once per startup to create jittering.
    // An SDK is required to perform force flushing ahead of scheduled time if the memory
    // pressure is too high. There is no rule for this other than that SDKs should be tracking
    // abstract aggregation complexity (eg: a counter only carries a single float, whereas a
    // distribution is a float per emission).
    //
    // Force flush is used on either shutdown, flush() or when we exceed the max weight.
    constructor(_client){
        this._client = _client;
        this._buckets = new Map();
        this._bucketsTotalWeight = 0;
        this._interval = setInterval(()=>this._flush(), constants.DEFAULT_FLUSH_INTERVAL);
        if (this._interval.unref) {
            this._interval.unref();
        }
        this._flushShift = Math.floor(Math.random() * constants.DEFAULT_FLUSH_INTERVAL / 1000);
        this._forceFlush = false;
    }
    /**
   * @inheritDoc
   */ add(metricType, unsanitizedName, value, unsanitizedUnit = 'none', unsanitizedTags = {}, maybeFloatTimestamp = time.timestampInSeconds()) {
        const timestamp = Math.floor(maybeFloatTimestamp);
        const name = utils.sanitizeMetricKey(unsanitizedName);
        const tags = utils.sanitizeTags(unsanitizedTags);
        const unit = utils.sanitizeUnit(unsanitizedUnit);
        const bucketKey = utils.getBucketKey(metricType, name, unit, tags);
        let bucketItem = this._buckets.get(bucketKey);
        // If this is a set metric, we need to calculate the delta from the previous weight.
        const previousWeight = bucketItem && metricType === constants.SET_METRIC_TYPE ? bucketItem.metric.weight : 0;
        if (bucketItem) {
            bucketItem.metric.add(value);
            // TODO(abhi): Do we need this check?
            if (bucketItem.timestamp < timestamp) {
                bucketItem.timestamp = timestamp;
            }
        } else {
            bucketItem = {
                // @ts-expect-error we don't need to narrow down the type of value here, saves bundle size.
                metric: new instance.METRIC_MAP[metricType](value),
                timestamp,
                metricType,
                name,
                unit,
                tags
            };
            this._buckets.set(bucketKey, bucketItem);
        }
        // If value is a string, it's a set metric so calculate the delta from the previous weight.
        const val = typeof value === 'string' ? bucketItem.metric.weight - previousWeight : value;
        spanUtils.updateMetricSummaryOnActiveSpan(metricType, name, val, unit, unsanitizedTags, bucketKey);
        // We need to keep track of the total weight of the buckets so that we can
        // flush them when we exceed the max weight.
        this._bucketsTotalWeight += bucketItem.metric.weight;
        if (this._bucketsTotalWeight >= constants.MAX_WEIGHT) {
            this.flush();
        }
    }
    /**
   * Flushes the current metrics to the transport via the transport.
   */ flush() {
        this._forceFlush = true;
        this._flush();
    }
    /**
   * Shuts down metrics aggregator and clears all metrics.
   */ close() {
        this._forceFlush = true;
        clearInterval(this._interval);
        this._flush();
    }
    /**
   * Flushes the buckets according to the internal state of the aggregator.
   * If it is a force flush, which happens on shutdown, it will flush all buckets.
   * Otherwise, it will only flush buckets that are older than the flush interval,
   * and according to the flush shift.
   *
   * This function mutates `_forceFlush` and `_bucketsTotalWeight` properties.
   */ _flush() {
        // TODO(@anonrig): Add Atomics for locking to avoid having force flush and regular flush
        // running at the same time.
        // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics
        // This path eliminates the need for checking for timestamps since we're forcing a flush.
        // Remember to reset the flag, or it will always flush all metrics.
        if (this._forceFlush) {
            this._forceFlush = false;
            this._bucketsTotalWeight = 0;
            this._captureMetrics(this._buckets);
            this._buckets.clear();
            return;
        }
        const cutoffSeconds = Math.floor(time.timestampInSeconds()) - constants.DEFAULT_FLUSH_INTERVAL / 1000 - this._flushShift;
        // TODO(@anonrig): Optimization opportunity.
        // Convert this map to an array and store key in the bucketItem.
        const flushedBuckets = new Map();
        for (const [key, bucket] of this._buckets){
            if (bucket.timestamp <= cutoffSeconds) {
                flushedBuckets.set(key, bucket);
                this._bucketsTotalWeight -= bucket.metric.weight;
            }
        }
        for (const [key] of flushedBuckets){
            this._buckets.delete(key);
        }
        this._captureMetrics(flushedBuckets);
    }
    /**
   * Only captures a subset of the buckets passed to this function.
   * @param flushedBuckets
   */ _captureMetrics(flushedBuckets) {
        if (flushedBuckets.size > 0) {
            // TODO(@anonrig): Optimization opportunity.
            // This copy operation can be avoided if we store the key in the bucketItem.
            const buckets = Array.from(flushedBuckets).map(([, bucketItem])=>bucketItem);
            envelope.captureAggregateMetrics(this._client, buckets);
        }
    }
}
exports.MetricsAggregator = MetricsAggregator; //# sourceMappingURL=aggregator.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/metrics/exports-default.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const aggregator = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/aggregator.js [app-ssr] (ecmascript)");
const exports$1 = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/exports.js [app-ssr] (ecmascript)");
/**
 * Adds a value to a counter metric
 *
 * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.
 */ function increment(name, value = 1, data) {
    // eslint-disable-next-line deprecation/deprecation
    exports$1.metrics.increment(aggregator.MetricsAggregator, name, value, data);
}
/**
 * Adds a value to a distribution metric
 *
 * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.
 */ function distribution(name, value, data) {
    // eslint-disable-next-line deprecation/deprecation
    exports$1.metrics.distribution(aggregator.MetricsAggregator, name, value, data);
}
/**
 * Adds a value to a set metric. Value must be a string or integer.
 *
 * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.
 */ function set(name, value, data) {
    // eslint-disable-next-line deprecation/deprecation
    exports$1.metrics.set(aggregator.MetricsAggregator, name, value, data);
}
/**
 * Adds a value to a gauge metric
 *
 * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.
 */ function gauge(name, value, data) {
    // eslint-disable-next-line deprecation/deprecation
    exports$1.metrics.gauge(aggregator.MetricsAggregator, name, value, data);
}
/**
 * Adds a timing metric.
 * The metric is added as a distribution metric.
 *
 * You can either directly capture a numeric `value`, or wrap a callback function in `timing`.
 * In the latter case, the duration of the callback execution will be captured as a span & a metric.
 *
 * @deprecated The Sentry metrics beta has ended. This method will be removed in a future release.
 */ function timing(name, value, unit = 'second', data) {
    // eslint-disable-next-line deprecation/deprecation
    return exports$1.metrics.timing(aggregator.MetricsAggregator, name, value, unit, data);
}
/**
 * Returns the metrics aggregator for a given client.
 */ function getMetricsAggregatorForClient(client) {
    // eslint-disable-next-line deprecation/deprecation
    return exports$1.metrics.getMetricsAggregatorForClient(client, aggregator.MetricsAggregator);
}
/**
 * The metrics API is used to capture custom metrics in Sentry.
 *
 * @deprecated The Sentry metrics beta has ended. This export will be removed in a future release.
 */ const metricsDefault = {
    increment,
    distribution,
    set,
    gauge,
    timing,
    /**
   * @ignore This is for internal use only.
   */ getMetricsAggregatorForClient
};
exports.metricsDefault = metricsDefault; //# sourceMappingURL=exports-default.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/metrics/browser-aggregator.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const time = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)");
const spanUtils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanUtils.js [app-ssr] (ecmascript)");
const constants = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/constants.js [app-ssr] (ecmascript)");
const envelope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/envelope.js [app-ssr] (ecmascript)");
const instance = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/instance.js [app-ssr] (ecmascript)");
const utils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/utils.js [app-ssr] (ecmascript)");
/**
 * A simple metrics aggregator that aggregates metrics in memory and flushes them periodically.
 * Default flush interval is 5 seconds.
 *
 * @experimental This API is experimental and might change in the future.
 */ class BrowserMetricsAggregator {
    // TODO(@anonrig): Use FinalizationRegistry to have a proper way of flushing the buckets
    // when the aggregator is garbage collected.
    // Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry
    constructor(_client){
        this._client = _client;
        this._buckets = new Map();
        this._interval = setInterval(()=>this.flush(), constants.DEFAULT_BROWSER_FLUSH_INTERVAL);
    }
    /**
   * @inheritDoc
   */ add(metricType, unsanitizedName, value, unsanitizedUnit = 'none', unsanitizedTags = {}, maybeFloatTimestamp = time.timestampInSeconds()) {
        const timestamp = Math.floor(maybeFloatTimestamp);
        const name = utils.sanitizeMetricKey(unsanitizedName);
        const tags = utils.sanitizeTags(unsanitizedTags);
        const unit = utils.sanitizeUnit(unsanitizedUnit);
        const bucketKey = utils.getBucketKey(metricType, name, unit, tags);
        let bucketItem = this._buckets.get(bucketKey);
        // If this is a set metric, we need to calculate the delta from the previous weight.
        const previousWeight = bucketItem && metricType === constants.SET_METRIC_TYPE ? bucketItem.metric.weight : 0;
        if (bucketItem) {
            bucketItem.metric.add(value);
            // TODO(abhi): Do we need this check?
            if (bucketItem.timestamp < timestamp) {
                bucketItem.timestamp = timestamp;
            }
        } else {
            bucketItem = {
                // @ts-expect-error we don't need to narrow down the type of value here, saves bundle size.
                metric: new instance.METRIC_MAP[metricType](value),
                timestamp,
                metricType,
                name,
                unit,
                tags
            };
            this._buckets.set(bucketKey, bucketItem);
        }
        // If value is a string, it's a set metric so calculate the delta from the previous weight.
        const val = typeof value === 'string' ? bucketItem.metric.weight - previousWeight : value;
        spanUtils.updateMetricSummaryOnActiveSpan(metricType, name, val, unit, unsanitizedTags, bucketKey);
    }
    /**
   * @inheritDoc
   */ flush() {
        // short circuit if buckets are empty.
        if (this._buckets.size === 0) {
            return;
        }
        const metricBuckets = Array.from(this._buckets.values());
        envelope.captureAggregateMetrics(this._client, metricBuckets);
        this._buckets.clear();
    }
    /**
   * @inheritDoc
   */ close() {
        clearInterval(this._interval);
        this.flush();
    }
}
exports.BrowserMetricsAggregator = BrowserMetricsAggregator; //# sourceMappingURL=browser-aggregator.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/fetch.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const semanticAttributes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/semanticAttributes.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/errors.js [app-ssr] (ecmascript)");
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/version.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js [app-ssr] (ecmascript)");
const url = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/url.js [app-ssr] (ecmascript)");
const baggage = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
const hasTracingEnabled = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js [app-ssr] (ecmascript)");
const spanUtils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanUtils.js [app-ssr] (ecmascript)");
const sentryNonRecordingSpan = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js [app-ssr] (ecmascript)");
const spanstatus = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/spanstatus.js [app-ssr] (ecmascript)");
const trace = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/trace.js [app-ssr] (ecmascript)");
const traceData = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/traceData.js [app-ssr] (ecmascript)");
/**
 * Create and track fetch request spans for usage in combination with `addFetchInstrumentationHandler`.
 *
 * @returns Span if a span was created, otherwise void.
 */ function instrumentFetchRequest(handlerData, shouldCreateSpan, shouldAttachHeaders, spans, spanOrigin = 'auto.http.browser') {
    if (!handlerData.fetchData) {
        return undefined;
    }
    const shouldCreateSpanResult = hasTracingEnabled.hasTracingEnabled() && shouldCreateSpan(handlerData.fetchData.url);
    if (handlerData.endTimestamp && shouldCreateSpanResult) {
        const spanId = handlerData.fetchData.__span;
        if (!spanId) return;
        const span = spans[spanId];
        if (span) {
            endSpan(span, handlerData);
            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
            delete spans[spanId];
        }
        return undefined;
    }
    const { method, url: url$1 } = handlerData.fetchData;
    const fullUrl = getFullURL(url$1);
    const host = fullUrl ? url.parseUrl(fullUrl).host : undefined;
    const hasParent = !!spanUtils.getActiveSpan();
    const span = shouldCreateSpanResult && hasParent ? trace.startInactiveSpan({
        name: `${method} ${url$1}`,
        attributes: {
            url: url$1,
            type: 'fetch',
            'http.method': method,
            'http.url': fullUrl,
            'server.address': host,
            [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin,
            [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'http.client'
        }
    }) : new sentryNonRecordingSpan.SentryNonRecordingSpan();
    handlerData.fetchData.__span = span.spanContext().spanId;
    spans[span.spanContext().spanId] = span;
    if (shouldAttachHeaders(handlerData.fetchData.url)) {
        const request = handlerData.args[0];
        const options = handlerData.args[1] || {};
        const headers = _addTracingHeadersToFetchRequest(request, options, // If performance is disabled (TWP) or there's no active root span (pageload/navigation/interaction),
        // we do not want to use the span as base for the trace headers,
        // which means that the headers will be generated from the scope and the sampling decision is deferred
        hasTracingEnabled.hasTracingEnabled() && hasParent ? span : undefined);
        if (headers) {
            // Ensure this is actually set, if no options have been passed previously
            handlerData.args[1] = options;
            options.headers = headers;
        }
    }
    return span;
}
/**
 * Adds sentry-trace and baggage headers to the various forms of fetch headers.
 */ function _addTracingHeadersToFetchRequest(request, fetchOptionsObj, span) {
    const traceHeaders = traceData.getTraceData({
        span
    });
    const sentryTrace = traceHeaders['sentry-trace'];
    const baggage = traceHeaders.baggage;
    // Nothing to do, when we return undefined here, the original headers will be used
    if (!sentryTrace) {
        return undefined;
    }
    const headers = fetchOptionsObj.headers || (isRequest(request) ? request.headers : undefined);
    if (!headers) {
        return {
            ...traceHeaders
        };
    } else if (isHeaders(headers)) {
        const newHeaders = new Headers(headers);
        newHeaders.set('sentry-trace', sentryTrace);
        if (baggage) {
            const prevBaggageHeader = newHeaders.get('baggage');
            if (prevBaggageHeader) {
                const prevHeaderStrippedFromSentryBaggage = stripBaggageHeaderOfSentryBaggageValues(prevBaggageHeader);
                newHeaders.set('baggage', // If there are non-sentry entries (i.e. if the stripped string is non-empty/truthy) combine the stripped header and sentry baggage header
                // otherwise just set the sentry baggage header
                prevHeaderStrippedFromSentryBaggage ? `${prevHeaderStrippedFromSentryBaggage},${baggage}` : baggage);
            } else {
                newHeaders.set('baggage', baggage);
            }
        }
        return newHeaders;
    } else if (Array.isArray(headers)) {
        const newHeaders = [
            ...headers// Remove any existing sentry-trace headers
            .filter((header)=>{
                return !(Array.isArray(header) && header[0] === 'sentry-trace');
            })// Get rid of previous sentry baggage values in baggage header
            .map((header)=>{
                if (Array.isArray(header) && header[0] === 'baggage' && typeof header[1] === 'string') {
                    const [headerName, headerValue, ...rest] = header;
                    return [
                        headerName,
                        stripBaggageHeaderOfSentryBaggageValues(headerValue),
                        ...rest
                    ];
                } else {
                    return header;
                }
            }),
            // Attach the new sentry-trace header
            [
                'sentry-trace',
                sentryTrace
            ]
        ];
        if (baggage) {
            // If there are multiple entries with the same key, the browser will merge the values into a single request header.
            // Its therefore safe to simply push a "baggage" entry, even though there might already be another baggage header.
            newHeaders.push([
                'baggage',
                baggage
            ]);
        }
        return newHeaders;
    } else {
        const existingBaggageHeader = 'baggage' in headers ? headers.baggage : undefined;
        let newBaggageHeaders = [];
        if (Array.isArray(existingBaggageHeader)) {
            newBaggageHeaders = existingBaggageHeader.map((headerItem)=>typeof headerItem === 'string' ? stripBaggageHeaderOfSentryBaggageValues(headerItem) : headerItem).filter((headerItem)=>headerItem === '');
        } else if (existingBaggageHeader) {
            newBaggageHeaders.push(stripBaggageHeaderOfSentryBaggageValues(existingBaggageHeader));
        }
        if (baggage) {
            newBaggageHeaders.push(baggage);
        }
        return {
            ...headers,
            'sentry-trace': sentryTrace,
            baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined
        };
    }
}
/**
 * Adds sentry-trace and baggage headers to the various forms of fetch headers.
 *
 * @deprecated This function will not be exported anymore in v9.
 */ function addTracingHeadersToFetchRequest(request, _client, _scope, fetchOptionsObj, span) {
    return _addTracingHeadersToFetchRequest(request, fetchOptionsObj, span);
}
function getFullURL(url) {
    try {
        const parsed = new URL(url);
        return parsed.href;
    } catch (e) {
        return undefined;
    }
}
function endSpan(span, handlerData) {
    if (handlerData.response) {
        spanstatus.setHttpStatus(span, handlerData.response.status);
        const contentLength = handlerData.response && handlerData.response.headers && handlerData.response.headers.get('content-length');
        if (contentLength) {
            const contentLengthNum = parseInt(contentLength);
            if (contentLengthNum > 0) {
                span.setAttribute('http.response_content_length', contentLengthNum);
            }
        }
    } else if (handlerData.error) {
        span.setStatus({
            code: spanstatus.SPAN_STATUS_ERROR,
            message: 'internal_error'
        });
    }
    span.end();
}
function stripBaggageHeaderOfSentryBaggageValues(baggageHeader) {
    return baggageHeader.split(',')// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    .filter((baggageEntry)=>!baggageEntry.split('=')[0].startsWith(baggage.SENTRY_BAGGAGE_KEY_PREFIX)).join(',');
}
function isRequest(request) {
    return typeof Request !== 'undefined' && is.isInstanceOf(request, Request);
}
function isHeaders(headers) {
    return typeof Headers !== 'undefined' && is.isInstanceOf(headers, Headers);
}
exports.addTracingHeadersToFetchRequest = addTracingHeadersToFetchRequest;
exports.instrumentFetchRequest = instrumentFetchRequest; //# sourceMappingURL=fetch.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/trpc.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const exports$1 = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/exports.js [app-ssr] (ecmascript)");
const semanticAttributes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/semanticAttributes.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/errors.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/version.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/debug-build.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)");
const normalize = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js [app-ssr] (ecmascript)");
__turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js [app-ssr] (ecmascript)");
const trace = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/trace.js [app-ssr] (ecmascript)");
const trpcCaptureContext = {
    mechanism: {
        handled: false,
        data: {
            function: 'trpcMiddleware'
        }
    }
};
function captureIfError(nextResult) {
    // TODO: Set span status based on what TRPCError was encountered
    if (typeof nextResult === 'object' && nextResult !== null && 'ok' in nextResult && !nextResult.ok && 'error' in nextResult) {
        exports$1.captureException(nextResult.error, trpcCaptureContext);
    }
}
/**
 * Sentry tRPC middleware that captures errors and creates spans for tRPC procedures.
 */ function trpcMiddleware(options = {}) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    return async function(opts) {
        const { path, type, next, rawInput, getRawInput } = opts;
        const client = currentScopes.getClient();
        const clientOptions = client && client.getOptions();
        const trpcContext = {
            procedure_path: path,
            procedure_type: type
        };
        if (options.attachRpcInput !== undefined ? options.attachRpcInput : clientOptions && clientOptions.sendDefaultPii) {
            if (rawInput !== undefined) {
                trpcContext.input = normalize.normalize(rawInput);
            }
            if (getRawInput !== undefined && typeof getRawInput === 'function') {
                try {
                    const rawRes = await getRawInput();
                    trpcContext.input = normalize.normalize(rawRes);
                } catch (err) {
                // noop
                }
            }
        }
        return currentScopes.withScope((scope)=>{
            scope.setContext('trpc', trpcContext);
            return trace.startSpanManual({
                name: `trpc/${path}`,
                op: 'rpc.server',
                attributes: {
                    [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'route',
                    [semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.rpc.trpc'
                }
            }, async (span)=>{
                try {
                    const nextResult = await next();
                    captureIfError(nextResult);
                    span.end();
                    return nextResult;
                } catch (e) {
                    exports$1.captureException(e, trpcCaptureContext);
                    span.end();
                    throw e;
                }
            });
        });
    };
}
exports.trpcMiddleware = trpcMiddleware; //# sourceMappingURL=trpc.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/feedback.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
/**
 * Send user feedback to Sentry.
 */ function captureFeedback(params, hint = {}, scope = currentScopes.getCurrentScope()) {
    const { message, name, email, url, source, associatedEventId, tags } = params;
    const feedbackEvent = {
        contexts: {
            feedback: object.dropUndefinedKeys({
                contact_email: email,
                name,
                message,
                url,
                source,
                associated_event_id: associatedEventId
            })
        },
        type: 'feedback',
        level: 'info',
        tags
    };
    const client = scope && scope.getClient() || currentScopes.getClient();
    if (client) {
        client.emit('beforeSendFeedback', feedbackEvent, hint);
    }
    const eventId = scope.captureEvent(feedbackEvent, hint);
    return eventId;
}
exports.captureFeedback = captureFeedback; //# sourceMappingURL=feedback.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/getCurrentHubShim.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const breadcrumbs = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/breadcrumbs.js [app-ssr] (ecmascript)");
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const exports$1 = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/exports.js [app-ssr] (ecmascript)");
/**
 * This is for legacy reasons, and returns a proxy object instead of a hub to be used.
 *
 * @deprecated Use the methods directly from the top level Sentry API (e.g. `Sentry.withScope`)
 * For more information see our migration guide for
 * [replacing `getCurrentHub` and `Hub`](https://github.com/getsentry/sentry-javascript/blob/develop/MIGRATION.md#deprecate-hub)
 * usage
 */ // eslint-disable-next-line deprecation/deprecation
function getCurrentHubShim() {
    return {
        bindClient (client) {
            const scope = currentScopes.getCurrentScope();
            scope.setClient(client);
        },
        withScope: currentScopes.withScope,
        getClient: ()=>currentScopes.getClient(),
        getScope: currentScopes.getCurrentScope,
        getIsolationScope: currentScopes.getIsolationScope,
        captureException: (exception, hint)=>{
            return currentScopes.getCurrentScope().captureException(exception, hint);
        },
        captureMessage: (message, level, hint)=>{
            return currentScopes.getCurrentScope().captureMessage(message, level, hint);
        },
        captureEvent: exports$1.captureEvent,
        addBreadcrumb: breadcrumbs.addBreadcrumb,
        setUser: exports$1.setUser,
        setTags: exports$1.setTags,
        setTag: exports$1.setTag,
        setExtra: exports$1.setExtra,
        setExtras: exports$1.setExtras,
        setContext: exports$1.setContext,
        getIntegration (integration) {
            const client = currentScopes.getClient();
            return client && client.getIntegrationByName(integration.id) || null;
        },
        startSession: exports$1.startSession,
        endSession: exports$1.endSession,
        captureSession (end) {
            // both send the update and pull the session from the scope
            if (end) {
                return exports$1.endSession();
            }
            // only send the update
            _sendSessionUpdate();
        }
    };
}
/**
 * Returns the default hub instance.
 *
 * If a hub is already registered in the global carrier but this module
 * contains a more recent version, it replaces the registered version.
 * Otherwise, the currently registered hub will be returned.
 *
 * @deprecated Use the respective replacement method directly instead.
 */ // eslint-disable-next-line deprecation/deprecation
const getCurrentHub = getCurrentHubShim;
/**
 * Sends the current Session on the scope
 */ function _sendSessionUpdate() {
    const scope = currentScopes.getCurrentScope();
    const client = currentScopes.getClient();
    const session = scope.getSession();
    if (client && session) {
        client.captureSession(session);
    }
}
exports.getCurrentHub = getCurrentHub;
exports.getCurrentHubShim = getCurrentHubShim; //# sourceMappingURL=getCurrentHubShim.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/array.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
/** Flattens a multi-dimensional array
 *
 * @deprecated This function is deprecated and will be removed in the next major version.
 */ function flatten(input) {
    const result = [];
    const flattenHelper = (input)=>{
        input.forEach((el)=>{
            if (Array.isArray(el)) {
                flattenHelper(el);
            } else {
                result.push(el);
            }
        });
    };
    flattenHelper(input);
    return result;
}
exports.flatten = flatten; //# sourceMappingURL=array.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/breadcrumb-log-level.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
/**
 * Determine a breadcrumb's log level (only `warning` or `error`) based on an HTTP status code.
 */ function getBreadcrumbLogLevelFromHttpStatusCode(statusCode) {
    // NOTE: undefined defaults to 'info' in Sentry
    if (statusCode === undefined) {
        return undefined;
    } else if (statusCode >= 400 && statusCode < 500) {
        return 'warning';
    } else if (statusCode >= 500) {
        return 'error';
    } else {
        return undefined;
    }
}
exports.getBreadcrumbLogLevelFromHttpStatusCode = getBreadcrumbLogLevelFromHttpStatusCode; //# sourceMappingURL=breadcrumb-log-level.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/supports.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const debugBuild = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/debug-build.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
const WINDOW = worldwide.GLOBAL_OBJ;
/**
 * Tells whether current environment supports ErrorEvent objects
 * {@link supportsErrorEvent}.
 *
 * @returns Answer to the given question.
 */ function supportsErrorEvent() {
    try {
        new ErrorEvent('');
        return true;
    } catch (e) {
        return false;
    }
}
/**
 * Tells whether current environment supports DOMError objects
 * {@link supportsDOMError}.
 *
 * @returns Answer to the given question.
 */ function supportsDOMError() {
    try {
        // Chrome: VM89:1 Uncaught TypeError: Failed to construct 'DOMError':
        // 1 argument required, but only 0 present.
        // @ts-expect-error It really needs 1 argument, not 0.
        new DOMError('');
        return true;
    } catch (e) {
        return false;
    }
}
/**
 * Tells whether current environment supports DOMException objects
 * {@link supportsDOMException}.
 *
 * @returns Answer to the given question.
 */ function supportsDOMException() {
    try {
        new DOMException('');
        return true;
    } catch (e) {
        return false;
    }
}
/**
 * Tells whether current environment supports Fetch API
 * {@link supportsFetch}.
 *
 * @returns Answer to the given question.
 */ function supportsFetch() {
    if (!('fetch' in WINDOW)) {
        return false;
    }
    try {
        new Headers();
        new Request('http://www.example.com');
        new Response();
        return true;
    } catch (e) {
        return false;
    }
}
/**
 * isNative checks if the given function is a native implementation
 */ // eslint-disable-next-line @typescript-eslint/ban-types
function isNativeFunction(func) {
    return func && /^function\s+\w+\(\)\s+\{\s+\[native code\]\s+\}$/.test(func.toString());
}
/**
 * Tells whether current environment supports Fetch API natively
 * {@link supportsNativeFetch}.
 *
 * @returns true if `window.fetch` is natively implemented, false otherwise
 */ function supportsNativeFetch() {
    if (typeof EdgeRuntime === 'string') {
        return true;
    }
    if (!supportsFetch()) {
        return false;
    }
    // Fast path to avoid DOM I/O
    // eslint-disable-next-line @typescript-eslint/unbound-method
    if (isNativeFunction(WINDOW.fetch)) {
        return true;
    }
    // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)
    // so create a "pure" iframe to see if that has native fetch
    let result = false;
    const doc = WINDOW.document;
    // eslint-disable-next-line deprecation/deprecation
    if (doc && typeof doc.createElement === 'function') {
        try {
            const sandbox = doc.createElement('iframe');
            sandbox.hidden = true;
            doc.head.appendChild(sandbox);
            if (sandbox.contentWindow && sandbox.contentWindow.fetch) {
                // eslint-disable-next-line @typescript-eslint/unbound-method
                result = isNativeFunction(sandbox.contentWindow.fetch);
            }
            doc.head.removeChild(sandbox);
        } catch (err) {
            debugBuild.DEBUG_BUILD && logger.logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);
        }
    }
    return result;
}
/**
 * Tells whether current environment supports ReportingObserver API
 * {@link supportsReportingObserver}.
 *
 * @returns Answer to the given question.
 */ function supportsReportingObserver() {
    return 'ReportingObserver' in WINDOW;
}
/**
 * Tells whether current environment supports Referrer Policy API
 * {@link supportsReferrerPolicy}.
 *
 * @returns Answer to the given question.
 */ function supportsReferrerPolicy() {
    // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'
    // (see https://caniuse.com/#feat=referrer-policy),
    // it doesn't. And it throws an exception instead of ignoring this parameter...
    // REF: https://github.com/getsentry/raven-js/issues/1233
    if (!supportsFetch()) {
        return false;
    }
    try {
        new Request('_', {
            referrerPolicy: 'origin'
        });
        return true;
    } catch (e) {
        return false;
    }
}
exports.isNativeFunction = isNativeFunction;
exports.supportsDOMError = supportsDOMError;
exports.supportsDOMException = supportsDOMException;
exports.supportsErrorEvent = supportsErrorEvent;
exports.supportsFetch = supportsFetch;
exports.supportsNativeFetch = supportsNativeFetch;
exports.supportsReferrerPolicy = supportsReferrerPolicy;
exports.supportsReportingObserver = supportsReportingObserver; //# sourceMappingURL=supports.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/instrument/fetch.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
const supports = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/supports.js [app-ssr] (ecmascript)");
const time = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)");
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
const handlers = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js [app-ssr] (ecmascript)");
/**
 * Add an instrumentation handler for when a fetch request happens.
 * The handler function is called once when the request starts and once when it ends,
 * which can be identified by checking if it has an `endTimestamp`.
 *
 * Use at your own risk, this might break without changelog notice, only used internally.
 * @hidden
 */ function addFetchInstrumentationHandler(handler, skipNativeFetchCheck) {
    const type = 'fetch';
    handlers.addHandler(type, handler);
    handlers.maybeInstrument(type, ()=>instrumentFetch(undefined, skipNativeFetchCheck));
}
/**
 * Add an instrumentation handler for long-lived fetch requests, like consuming server-sent events (SSE) via fetch.
 * The handler will resolve the request body and emit the actual `endTimestamp`, so that the
 * span can be updated accordingly.
 *
 * Only used internally
 * @hidden
 */ function addFetchEndInstrumentationHandler(handler) {
    const type = 'fetch-body-resolved';
    handlers.addHandler(type, handler);
    handlers.maybeInstrument(type, ()=>instrumentFetch(streamHandler));
}
function instrumentFetch(onFetchResolved, skipNativeFetchCheck = false) {
    if (skipNativeFetchCheck && !supports.supportsNativeFetch()) {
        return;
    }
    object.fill(worldwide.GLOBAL_OBJ, 'fetch', function(originalFetch) {
        return function(...args) {
            // We capture the error right here and not in the Promise error callback because Safari (and probably other
            // browsers too) will wipe the stack trace up to this point, only leaving us with this file which is useless.
            // NOTE: If you are a Sentry user, and you are seeing this stack frame,
            //       it means the error, that was caused by your fetch call did not
            //       have a stack trace, so the SDK backfilled the stack trace so
            //       you can see which fetch call failed.
            const virtualError = new Error();
            const { method, url } = parseFetchArgs(args);
            const handlerData = {
                args,
                fetchData: {
                    method,
                    url
                },
                startTimestamp: time.timestampInSeconds() * 1000,
                // // Adding the error to be able to fingerprint the failed fetch event in HttpClient instrumentation
                virtualError
            };
            // if there is no callback, fetch is instrumented directly
            if (!onFetchResolved) {
                handlers.triggerHandlers('fetch', {
                    ...handlerData
                });
            }
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            return originalFetch.apply(worldwide.GLOBAL_OBJ, args).then(async (response)=>{
                if (onFetchResolved) {
                    onFetchResolved(response);
                } else {
                    handlers.triggerHandlers('fetch', {
                        ...handlerData,
                        endTimestamp: time.timestampInSeconds() * 1000,
                        response
                    });
                }
                return response;
            }, (error)=>{
                handlers.triggerHandlers('fetch', {
                    ...handlerData,
                    endTimestamp: time.timestampInSeconds() * 1000,
                    error
                });
                if (is.isError(error) && error.stack === undefined) {
                    // NOTE: If you are a Sentry user, and you are seeing this stack frame,
                    //       it means the error, that was caused by your fetch call did not
                    //       have a stack trace, so the SDK backfilled the stack trace so
                    //       you can see which fetch call failed.
                    error.stack = virtualError.stack;
                    object.addNonEnumerableProperty(error, 'framesToPop', 1);
                }
                // NOTE: If you are a Sentry user, and you are seeing this stack frame,
                //       it means the sentry.javascript SDK caught an error invoking your application code.
                //       This is expected behavior and NOT indicative of a bug with sentry.javascript.
                throw error;
            });
        };
    });
}
async function resolveResponse(res, onFinishedResolving) {
    if (res && res.body) {
        const body = res.body;
        const responseReader = body.getReader();
        // Define a maximum duration after which we just cancel
        const maxFetchDurationTimeout = setTimeout(()=>{
            body.cancel().then(null, ()=>{
            // noop
            });
        }, 90 * 1000);
        let readingActive = true;
        while(readingActive){
            let chunkTimeout;
            try {
                // abort reading if read op takes more than 5s
                chunkTimeout = setTimeout(()=>{
                    body.cancel().then(null, ()=>{
                    // noop on error
                    });
                }, 5000);
                // This .read() call will reject/throw when we abort due to timeouts through `body.cancel()`
                const { done } = await responseReader.read();
                clearTimeout(chunkTimeout);
                if (done) {
                    onFinishedResolving();
                    readingActive = false;
                }
            } catch (error) {
                readingActive = false;
            } finally{
                clearTimeout(chunkTimeout);
            }
        }
        clearTimeout(maxFetchDurationTimeout);
        responseReader.releaseLock();
        body.cancel().then(null, ()=>{
        // noop on error
        });
    }
}
function streamHandler(response) {
    // clone response for awaiting stream
    let clonedResponseForResolving;
    try {
        clonedResponseForResolving = response.clone();
    } catch (e) {
        return;
    }
    // eslint-disable-next-line @typescript-eslint/no-floating-promises
    resolveResponse(clonedResponseForResolving, ()=>{
        handlers.triggerHandlers('fetch-body-resolved', {
            endTimestamp: time.timestampInSeconds() * 1000,
            response
        });
    });
}
function hasProp(obj, prop) {
    return !!obj && typeof obj === 'object' && !!obj[prop];
}
function getUrlFromResource(resource) {
    if (typeof resource === 'string') {
        return resource;
    }
    if (!resource) {
        return '';
    }
    if (hasProp(resource, 'url')) {
        return resource.url;
    }
    if (resource.toString) {
        return resource.toString();
    }
    return '';
}
/**
 * Parses the fetch arguments to find the used Http method and the url of the request.
 * Exported for tests only.
 */ function parseFetchArgs(fetchArgs) {
    if (fetchArgs.length === 0) {
        return {
            method: 'GET',
            url: ''
        };
    }
    if (fetchArgs.length === 2) {
        const [url, options] = fetchArgs;
        return {
            url: getUrlFromResource(url),
            method: hasProp(options, 'method') ? String(options.method).toUpperCase() : 'GET'
        };
    }
    const arg = fetchArgs[0];
    return {
        url: getUrlFromResource(arg),
        method: hasProp(arg, 'method') ? String(arg.method).toUpperCase() : 'GET'
    };
}
exports.addFetchEndInstrumentationHandler = addFetchEndInstrumentationHandler;
exports.addFetchInstrumentationHandler = addFetchInstrumentationHandler;
exports.parseFetchArgs = parseFetchArgs; //# sourceMappingURL=fetch.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/env.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
/*
 * This module exists for optimizations in the build process through rollup and terser.  We define some global
 * constants, which can be overridden during build. By guarding certain pieces of code with functions that return these
 * constants, we can control whether or not they appear in the final bundle. (Any code guarded by a false condition will
 * never run, and will hence be dropped during treeshaking.) The two primary uses for this are stripping out calls to
 * `logger` and preventing node-related code from appearing in browser bundles.
 *
 * Attention:
 * This file should not be used to define constants/flags that are intended to be used for tree-shaking conducted by
 * users. These flags should live in their respective packages, as we identified user tooling (specifically webpack)
 * having issues tree-shaking these constants across package boundaries.
 * An example for this is the __SENTRY_DEBUG__ constant. It is declared in each package individually because we want
 * users to be able to shake away expressions that it guards.
 */ /**
 * Figures out if we're building a browser bundle.
 *
 * @returns true if this is a browser bundle build.
 */ function isBrowserBundle() {
    return typeof __SENTRY_BROWSER_BUNDLE__ !== 'undefined' && !!__SENTRY_BROWSER_BUNDLE__;
}
/**
 * Get source of SDK.
 */ function getSDKSource() {
    // This comment is used to identify this line in the CDN bundle build step and replace this with "return 'cdn';"
    /* __SENTRY_SDK_SOURCE__ */ return 'npm';
}
exports.getSDKSource = getSDKSource;
exports.isBrowserBundle = isBrowserBundle; //# sourceMappingURL=env.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/node.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const env = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/env.js [app-ssr] (ecmascript)");
/**
 * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,
 * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.
 */ /**
 * Checks whether we're in the Node.js or Browser environment
 *
 * @returns Answer to given question
 */ function isNodeEnv() {
    // explicitly check for browser bundles as those can be optimized statically
    // by terser/rollup.
    return !env.isBrowserBundle() && Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';
}
/**
 * Requires a module which is protected against bundler minification.
 *
 * @param request The module path to resolve
 * @deprecated This function will be removed in the next major version.
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any
function dynamicRequire(mod, request) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    return mod.require(request);
}
/**
 * Helper for dynamically loading module that should work with linked dependencies.
 * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`
 * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during
 * build time. `require.resolve` is also not available in any other way, so we cannot create,
 * a fake helper like we do with `dynamicRequire`.
 *
 * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.
 * That is to mimic the behavior of `require.resolve` exactly.
 *
 * @param moduleName module name to require
 * @returns possibly required module
 */ function loadModule(moduleName) {
    let mod;
    try {
        // eslint-disable-next-line deprecation/deprecation
        mod = dynamicRequire(module, moduleName);
    } catch (e) {
    // no-empty
    }
    if (!mod) {
        try {
            // eslint-disable-next-line deprecation/deprecation
            const { cwd } = dynamicRequire(module, 'process');
            // eslint-disable-next-line deprecation/deprecation
            mod = dynamicRequire(module, `${cwd()}/node_modules/${moduleName}`);
        } catch (e) {
        // no-empty
        }
    }
    return mod;
}
exports.dynamicRequire = dynamicRequire;
exports.isNodeEnv = isNodeEnv;
exports.loadModule = loadModule; //# sourceMappingURL=node.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/isBrowser.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const node = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/node.js [app-ssr] (ecmascript)");
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
/**
 * Returns true if we are in the browser.
 */ function isBrowser() {
    // eslint-disable-next-line no-restricted-globals
    return typeof window !== 'undefined' && (!node.isNodeEnv() || isElectronNodeRenderer());
}
// Electron renderers with nodeIntegration enabled are detected as Node.js so we specifically test for them
function isElectronNodeRenderer() {
    const process = worldwide.GLOBAL_OBJ.process;
    return !!process && process.type === 'renderer';
}
exports.isBrowser = isBrowser; //# sourceMappingURL=isBrowser.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/node-stack-trace.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const stacktrace = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js [app-ssr] (ecmascript)");
/**
 * Does this filename look like it's part of the app code?
 */ function filenameIsInApp(filename, isNative = false) {
    const isInternal = isNative || filename && // It's not internal if it's an absolute linux path
    !filename.startsWith('/') && // It's not internal if it's an absolute windows path
    !filename.match(/^[A-Z]:/) && // It's not internal if the path is starting with a dot
    !filename.startsWith('.') && // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack
    !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\-+])*:\/\//); // Schema from: https://stackoverflow.com/a/3641782
    // in_app is all that's not an internal Node function or a module within node_modules
    // note that isNative appears to return true even for node core libraries
    // see https://github.com/getsentry/raven-node/issues/176
    return !isInternal && filename !== undefined && !filename.includes('node_modules/');
}
/** Node Stack line parser */ function node(getModule) {
    const FILENAME_MATCH = /^\s*[-]{4,}$/;
    const FULL_MATCH = /at (?:async )?(?:(.+?)\s+\()?(?:(.+):(\d+):(\d+)?|([^)]+))\)?/;
    // eslint-disable-next-line complexity
    return (line)=>{
        const lineMatch = line.match(FULL_MATCH);
        if (lineMatch) {
            let object;
            let method;
            let functionName;
            let typeName;
            let methodName;
            if (lineMatch[1]) {
                functionName = lineMatch[1];
                let methodStart = functionName.lastIndexOf('.');
                if (functionName[methodStart - 1] === '.') {
                    methodStart--;
                }
                if (methodStart > 0) {
                    object = functionName.slice(0, methodStart);
                    method = functionName.slice(methodStart + 1);
                    const objectEnd = object.indexOf('.Module');
                    if (objectEnd > 0) {
                        functionName = functionName.slice(objectEnd + 1);
                        object = object.slice(0, objectEnd);
                    }
                }
                typeName = undefined;
            }
            if (method) {
                typeName = object;
                methodName = method;
            }
            if (method === '<anonymous>') {
                methodName = undefined;
                functionName = undefined;
            }
            if (functionName === undefined) {
                methodName = methodName || stacktrace.UNKNOWN_FUNCTION;
                functionName = typeName ? `${typeName}.${methodName}` : methodName;
            }
            let filename = lineMatch[2] && lineMatch[2].startsWith('file://') ? lineMatch[2].slice(7) : lineMatch[2];
            const isNative = lineMatch[5] === 'native';
            // If it's a Windows path, trim the leading slash so that `/C:/foo` becomes `C:/foo`
            if (filename && filename.match(/\/[A-Z]:/)) {
                filename = filename.slice(1);
            }
            if (!filename && lineMatch[5] && !isNative) {
                filename = lineMatch[5];
            }
            return {
                filename: filename ? decodeURI(filename) : undefined,
                module: getModule ? getModule(filename) : undefined,
                function: functionName,
                lineno: _parseIntOrUndefined(lineMatch[3]),
                colno: _parseIntOrUndefined(lineMatch[4]),
                in_app: filenameIsInApp(filename || '', isNative)
            };
        }
        if (line.match(FILENAME_MATCH)) {
            return {
                filename: line
            };
        }
        return undefined;
    };
}
/**
 * Node.js stack line parser
 *
 * This is in @sentry/core so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.
 * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain
 */ function nodeStackLineParser(getModule) {
    return [
        90,
        node(getModule)
    ];
}
function _parseIntOrUndefined(input) {
    return parseInt(input || '', 10) || undefined;
}
exports.filenameIsInApp = filenameIsInApp;
exports.node = node;
exports.nodeStackLineParser = nodeStackLineParser; //# sourceMappingURL=node-stack-trace.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/cache.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
/**
 * Creates a cache that evicts keys in fifo order
 * @param size {Number}
 *
 * @deprecated This function is deprecated and will be removed in the next major version.
 */ function makeFifoCache(size) {
    // Maintain a fifo queue of keys, we cannot rely on Object.keys as the browser may not support it.
    let evictionOrder = [];
    let cache = {};
    return {
        add (key, value) {
            while(evictionOrder.length >= size){
                // shift is O(n) but this is small size and only happens if we are
                // exceeding the cache size so it should be fine.
                const evictCandidate = evictionOrder.shift();
                if (evictCandidate !== undefined) {
                    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
                    delete cache[evictCandidate];
                }
            }
            // in case we have a collision, delete the old key.
            if (cache[key]) {
                this.delete(key);
            }
            evictionOrder.push(key);
            cache[key] = value;
        },
        clear () {
            cache = {};
            evictionOrder = [];
        },
        get (key) {
            return cache[key];
        },
        size () {
            return evictionOrder.length;
        },
        // Delete cache key and return true if it existed, false otherwise.
        delete (key) {
            if (!cache[key]) {
                return false;
            }
            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
            delete cache[key];
            for(let i = 0; i < evictionOrder.length; i++){
                if (evictionOrder[i] === key) {
                    evictionOrder.splice(i, 1);
                    break;
                }
            }
            return true;
        }
    };
}
exports.makeFifoCache = makeFifoCache; //# sourceMappingURL=cache.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/anr.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const nodeStackTrace = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/node-stack-trace.js [app-ssr] (ecmascript)");
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
const stacktrace = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js [app-ssr] (ecmascript)");
/**
 * A node.js watchdog timer
 * @param pollInterval The interval that we expect to get polled at
 * @param anrThreshold The threshold for when we consider ANR
 * @param callback The callback to call for ANR
 * @returns An object with `poll` and `enabled` functions {@link WatchdogReturn}
 */ function watchdogTimer(createTimer, pollInterval, anrThreshold, callback) {
    const timer = createTimer();
    let triggered = false;
    let enabled = true;
    setInterval(()=>{
        const diffMs = timer.getTimeMs();
        if (triggered === false && diffMs > pollInterval + anrThreshold) {
            triggered = true;
            if (enabled) {
                callback();
            }
        }
        if (diffMs < pollInterval + anrThreshold) {
            triggered = false;
        }
    }, 20);
    return {
        poll: ()=>{
            timer.reset();
        },
        enabled: (state)=>{
            enabled = state;
        }
    };
}
// types copied from inspector.d.ts
/**
 * Converts Debugger.CallFrame to Sentry StackFrame
 */ function callFrameToStackFrame(frame, url, getModuleFromFilename) {
    const filename = url ? url.replace(/^file:\/\//, '') : undefined;
    // CallFrame row/col are 0 based, whereas StackFrame are 1 based
    const colno = frame.location.columnNumber ? frame.location.columnNumber + 1 : undefined;
    const lineno = frame.location.lineNumber ? frame.location.lineNumber + 1 : undefined;
    return object.dropUndefinedKeys({
        filename,
        module: getModuleFromFilename(filename),
        function: frame.functionName || stacktrace.UNKNOWN_FUNCTION,
        colno,
        lineno,
        in_app: filename ? nodeStackTrace.filenameIsInApp(filename) : undefined
    });
}
exports.callFrameToStackFrame = callFrameToStackFrame;
exports.watchdogTimer = watchdogTimer; //# sourceMappingURL=anr.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/lru.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
/** A simple Least Recently Used map */ class LRUMap {
    constructor(_maxSize){
        this._maxSize = _maxSize;
        this._cache = new Map();
    }
    /** Get the current size of the cache */ get size() {
        return this._cache.size;
    }
    /** Get an entry or undefined if it was not in the cache. Re-inserts to update the recently used order */ get(key) {
        const value = this._cache.get(key);
        if (value === undefined) {
            return undefined;
        }
        // Remove and re-insert to update the order
        this._cache.delete(key);
        this._cache.set(key, value);
        return value;
    }
    /** Insert an entry and evict an older entry if we've reached maxSize */ set(key, value) {
        if (this._cache.size >= this._maxSize) {
            // keys() returns an iterator in insertion order so keys().next() gives us the oldest key
            this._cache.delete(this._cache.keys().next().value);
        }
        this._cache.set(key, value);
    }
    /** Remove an entry and return the entry if it was in the cache */ remove(key) {
        const value = this._cache.get(key);
        if (value) {
            this._cache.delete(key);
        }
        return value;
    }
    /** Clear all entries */ clear() {
        this._cache.clear();
    }
    /** Get all the keys */ keys() {
        return Array.from(this._cache.keys());
    }
    /** Get all the values */ values() {
        const values = [];
        this._cache.forEach((value)=>values.push(value));
        return values;
    }
}
exports.LRUMap = LRUMap; //# sourceMappingURL=lru.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/vercelWaitUntil.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
/**
 * Function that delays closing of a Vercel lambda until the provided promise is resolved.
 *
 * Vendored from https://www.npmjs.com/package/@vercel/functions
 */ function vercelWaitUntil(task) {
    const vercelRequestContextGlobal = // @ts-expect-error This is not typed
    worldwide.GLOBAL_OBJ[Symbol.for('@vercel/request-context')];
    const ctx = vercelRequestContextGlobal && vercelRequestContextGlobal.get && vercelRequestContextGlobal.get() ? vercelRequestContextGlobal.get() : {};
    if (ctx && ctx.waitUntil) {
        ctx.waitUntil(task);
    }
}
exports.vercelWaitUntil = vercelWaitUntil; //# sourceMappingURL=vercelWaitUntil.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/vendor/escapeStringForRegex.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
// Based on https://github.com/sindresorhus/escape-string-regexp but with modifications to:
//   a) reduce the size by skipping the runtime type - checking
//   b) ensure it gets down - compiled for old versions of Node(the published package only supports Node 14+).
//
// MIT License
//
// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
// documentation files(the "Software"), to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and
// to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of
// the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
/**
 * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to
 * `new RegExp()`.
 *
 * @param regexString The string to escape
 * @returns An version of the string with all special regex characters escaped
 */ function escapeStringForRegex(regexString) {
    // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems
    // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.
    return regexString.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&').replace(/-/g, '\\x2d');
}
exports.escapeStringForRegex = escapeStringForRegex; //# sourceMappingURL=escapeStringForRegex.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/vendor/supportsHistory.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
// Based on https://github.com/angular/angular.js/pull/13945/files
// The MIT License
const WINDOW = worldwide.GLOBAL_OBJ;
/**
 * Tells whether current environment supports History API
 * {@link supportsHistory}.
 *
 * @returns Answer to the given question.
 */ function supportsHistory() {
    // NOTE: in Chrome App environment, touching history.pushState, *even inside
    //       a try/catch block*, will cause Chrome to output an error to console.error
    // borrowed from: https://github.com/angular/angular.js/pull/13945/files
    // TODO(v9): Remove this custom check, it is pretty old and likely not needed anymore
    const chromeVar = WINDOW.chrome;
    const isChromePackagedApp = chromeVar && chromeVar.app && chromeVar.app.runtime;
    const hasHistoryApi = 'history' in WINDOW && !!WINDOW.history.pushState && !!WINDOW.history.replaceState;
    return !isChromePackagedApp && hasHistoryApi;
}
exports.supportsHistory = supportsHistory; //# sourceMappingURL=supportsHistory.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_nullishCoalesce.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f
//
// The MIT License (MIT)
//
// Copyright (c) 2012-2018 various contributors (see AUTHORS)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
/**
 * Polyfill for the nullish coalescing operator (`??`).
 *
 * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the
 * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.
 *
 * Adapted from Sucrase (https://github.com/alangpierce/sucrase)
 *
 * @param lhs The value of the expression to the left of the `??`
 * @param rhsFn A function returning the value of the expression to the right of the `??`
 * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value
 */ function _nullishCoalesce(lhs, rhsFn) {
    // by checking for loose equality to `null`, we catch both `null` and `undefined`
    return lhs != null ? lhs : rhsFn();
}
// Sucrase version:
// function _nullishCoalesce(lhs, rhsFn) {
//   if (lhs != null) {
//     return lhs;
//   } else {
//     return rhsFn();
//   }
// }
exports._nullishCoalesce = _nullishCoalesce; //# sourceMappingURL=_nullishCoalesce.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncNullishCoalesce.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const _nullishCoalesce = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_nullishCoalesce.js [app-ssr] (ecmascript)");
// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f
//
// The MIT License (MIT)
//
// Copyright (c) 2012-2018 various contributors (see AUTHORS)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
/**
 * Polyfill for the nullish coalescing operator (`??`), when used in situations where at least one of the values is the
 * result of an async operation.
 *
 * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the
 * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.
 *
 * Adapted from Sucrase (https://github.com/alangpierce/sucrase)
 *
 * @param lhs The value of the expression to the left of the `??`
 * @param rhsFn A function returning the value of the expression to the right of the `??`
 * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value
 */ async function _asyncNullishCoalesce(lhs, rhsFn) {
    return _nullishCoalesce._nullishCoalesce(lhs, rhsFn);
}
// Sucrase version:
// async function _asyncNullishCoalesce(lhs, rhsFn) {
//   if (lhs != null) {
//     return lhs;
//   } else {
//     return await rhsFn();
//   }
// }
exports._asyncNullishCoalesce = _asyncNullishCoalesce; //# sourceMappingURL=_asyncNullishCoalesce.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChain.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
/**
 * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,
 * descriptors, and functions, for situations in which at least one part of the expression is async.
 *
 * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See
 * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15
 *
 * @param ops Array result of expression conversion
 * @returns The value of the expression
 */ async function _asyncOptionalChain(ops) {
    let lastAccessLHS = undefined;
    let value = ops[0];
    let i = 1;
    while(i < ops.length){
        const op = ops[i];
        const fn = ops[i + 1];
        i += 2;
        // by checking for loose equality to `null`, we catch both `null` and `undefined`
        if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {
            // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it
            return;
        }
        if (op === 'access' || op === 'optionalAccess') {
            lastAccessLHS = value;
            value = await fn(value);
        } else if (op === 'call' || op === 'optionalCall') {
            value = await fn((...args)=>value.call(lastAccessLHS, ...args));
            lastAccessLHS = undefined;
        }
    }
    return value;
}
// Sucrase version:
// async function _asyncOptionalChain(ops) {
//   let lastAccessLHS = undefined;
//   let value = ops[0];
//   let i = 1;
//   while (i < ops.length) {
//     const op = ops[i];
//     const fn = ops[i + 1];
//     i += 2;
//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {
//       return undefined;
//     }
//     if (op === 'access' || op === 'optionalAccess') {
//       lastAccessLHS = value;
//       value = await fn(value);
//     } else if (op === 'call' || op === 'optionalCall') {
//       value = await fn((...args) => value.call(lastAccessLHS, ...args));
//       lastAccessLHS = undefined;
//     }
//   }
//   return value;
// }
exports._asyncOptionalChain = _asyncOptionalChain; //# sourceMappingURL=_asyncOptionalChain.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChainDelete.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const _asyncOptionalChain = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChain.js [app-ssr] (ecmascript)");
// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f
//
// The MIT License (MIT)
//
// Copyright (c) 2012-2018 various contributors (see AUTHORS)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
/**
 * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,
 * descriptors, and functions, in cases where the value of the expression is to be deleted.
 *
 * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See
 * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15
 *
 * @param ops Array result of expression conversion
 * @returns The return value of the `delete` operator: `true`, unless the deletion target is an own, non-configurable
 * property (one which can't be deleted or turned into an accessor, and whose enumerability can't be changed), in which
 * case `false`.
 */ async function _asyncOptionalChainDelete(ops) {
    const result = await _asyncOptionalChain._asyncOptionalChain(ops);
    // If `result` is `null`, it means we didn't get to the end of the chain and so nothing was deleted (in which case,
    // return `true` since that's what `delete` does when it no-ops). If it's non-null, we know the delete happened, in
    // which case we return whatever the `delete` returned, which will be a boolean.
    return result == null ? true : result;
}
// Sucrase version:
// async function asyncOptionalChainDelete(ops) {
//   const result = await ASYNC_OPTIONAL_CHAIN_NAME(ops);
//   return result == null ? true : result;
// }
exports._asyncOptionalChainDelete = _asyncOptionalChainDelete; //# sourceMappingURL=_asyncOptionalChainDelete.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChain.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
/**
 * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,
 * descriptors, and functions.
 *
 * Adapted from Sucrase (https://github.com/alangpierce/sucrase)
 * See https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15
 *
 * @param ops Array result of expression conversion
 * @returns The value of the expression
 */ function _optionalChain(ops) {
    let lastAccessLHS = undefined;
    let value = ops[0];
    let i = 1;
    while(i < ops.length){
        const op = ops[i];
        const fn = ops[i + 1];
        i += 2;
        // by checking for loose equality to `null`, we catch both `null` and `undefined`
        if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {
            // really we're meaning to return `undefined` as an actual value here, but it saves bytes not to write it
            return;
        }
        if (op === 'access' || op === 'optionalAccess') {
            lastAccessLHS = value;
            value = fn(value);
        } else if (op === 'call' || op === 'optionalCall') {
            value = fn((...args)=>value.call(lastAccessLHS, ...args));
            lastAccessLHS = undefined;
        }
    }
    return value;
}
// Sucrase version
// function _optionalChain(ops) {
//   let lastAccessLHS = undefined;
//   let value = ops[0];
//   let i = 1;
//   while (i < ops.length) {
//     const op = ops[i];
//     const fn = ops[i + 1];
//     i += 2;
//     if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {
//       return undefined;
//     }
//     if (op === 'access' || op === 'optionalAccess') {
//       lastAccessLHS = value;
//       value = fn(value);
//     } else if (op === 'call' || op === 'optionalCall') {
//       value = fn((...args) => value.call(lastAccessLHS, ...args));
//       lastAccessLHS = undefined;
//     }
//   }
//   return value;
// }
exports._optionalChain = _optionalChain; //# sourceMappingURL=_optionalChain.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChainDelete.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const _optionalChain = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChain.js [app-ssr] (ecmascript)");
// https://github.com/alangpierce/sucrase/tree/265887868966917f3b924ce38dfad01fbab1329f
//
// The MIT License (MIT)
//
// Copyright (c) 2012-2018 various contributors (see AUTHORS)
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
/**
 * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,
 * descriptors, and functions, in cases where the value of the expression is to be deleted.
 *
 * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See
 * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15
 *
 * @param ops Array result of expression conversion
 * @returns The return value of the `delete` operator: `true`, unless the deletion target is an own, non-configurable
 * property (one which can't be deleted or turned into an accessor, and whose enumerability can't be changed), in which
 * case `false`.
 */ function _optionalChainDelete(ops) {
    const result = _optionalChain._optionalChain(ops);
    // If `result` is `null`, it means we didn't get to the end of the chain and so nothing was deleted (in which case,
    // return `true` since that's what `delete` does when it no-ops). If it's non-null, we know the delete happened, in
    // which case we return whatever the `delete` returned, which will be a boolean.
    return result == null ? true : result;
}
// Sucrase version:
// function _optionalChainDelete(ops) {
//   const result = _optionalChain(ops);
//   // by checking for loose equality to `null`, we catch both `null` and `undefined`
//   return result == null ? true : result;
// }
exports._optionalChainDelete = _optionalChainDelete; //# sourceMappingURL=_optionalChainDelete.js.map
}}),
"[project]/node_modules/@sentry/core/build/cjs/index.js [app-ssr] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
Object.defineProperty(exports, '__esModule', {
    value: true
});
const errors = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/errors.js [app-ssr] (ecmascript)");
const utils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/utils.js [app-ssr] (ecmascript)");
const hubextensions = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/hubextensions.js [app-ssr] (ecmascript)");
const idleSpan = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/idleSpan.js [app-ssr] (ecmascript)");
const sentrySpan = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/sentrySpan.js [app-ssr] (ecmascript)");
const sentryNonRecordingSpan = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/sentryNonRecordingSpan.js [app-ssr] (ecmascript)");
const spanstatus = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/spanstatus.js [app-ssr] (ecmascript)");
const trace = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/trace.js [app-ssr] (ecmascript)");
const dynamicSamplingContext = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/dynamicSamplingContext.js [app-ssr] (ecmascript)");
const measurement = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/measurement.js [app-ssr] (ecmascript)");
const sampling = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/sampling.js [app-ssr] (ecmascript)");
const logSpans = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/tracing/logSpans.js [app-ssr] (ecmascript)");
const semanticAttributes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/semanticAttributes.js [app-ssr] (ecmascript)");
const envelope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/envelope.js [app-ssr] (ecmascript)");
const exports$1 = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/exports.js [app-ssr] (ecmascript)");
const currentScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/currentScopes.js [app-ssr] (ecmascript)");
const defaultScopes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/defaultScopes.js [app-ssr] (ecmascript)");
const index = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/asyncContext/index.js [app-ssr] (ecmascript)");
const carrier = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/carrier.js [app-ssr] (ecmascript)");
const session = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/session.js [app-ssr] (ecmascript)");
const sessionflusher = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/sessionflusher.js [app-ssr] (ecmascript)");
const scope = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/scope.js [app-ssr] (ecmascript)");
const eventProcessors = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/eventProcessors.js [app-ssr] (ecmascript)");
const api = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/api.js [app-ssr] (ecmascript)");
const baseclient = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/baseclient.js [app-ssr] (ecmascript)");
const serverRuntimeClient = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/server-runtime-client.js [app-ssr] (ecmascript)");
const sdk = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/sdk.js [app-ssr] (ecmascript)");
const base = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/transports/base.js [app-ssr] (ecmascript)");
const offline = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/transports/offline.js [app-ssr] (ecmascript)");
const multiplexed = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/transports/multiplexed.js [app-ssr] (ecmascript)");
const integration = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integration.js [app-ssr] (ecmascript)");
const applyScopeDataToEvent = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/applyScopeDataToEvent.js [app-ssr] (ecmascript)");
const prepareEvent = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/prepareEvent.js [app-ssr] (ecmascript)");
const checkin = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/checkin.js [app-ssr] (ecmascript)");
const hasTracingEnabled = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/hasTracingEnabled.js [app-ssr] (ecmascript)");
const isSentryRequestUrl = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/isSentryRequestUrl.js [app-ssr] (ecmascript)");
const handleCallbackErrors = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/handleCallbackErrors.js [app-ssr] (ecmascript)");
const parameterize = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/parameterize.js [app-ssr] (ecmascript)");
const spanUtils = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/spanUtils.js [app-ssr] (ecmascript)");
const parseSampleRate = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/parseSampleRate.js [app-ssr] (ecmascript)");
const sdkMetadata = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/sdkMetadata.js [app-ssr] (ecmascript)");
const traceData = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/traceData.js [app-ssr] (ecmascript)");
const meta = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils/meta.js [app-ssr] (ecmascript)");
const constants = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/constants.js [app-ssr] (ecmascript)");
const breadcrumbs = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/breadcrumbs.js [app-ssr] (ecmascript)");
const functiontostring = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integrations/functiontostring.js [app-ssr] (ecmascript)");
const inboundfilters = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integrations/inboundfilters.js [app-ssr] (ecmascript)");
const linkederrors = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integrations/linkederrors.js [app-ssr] (ecmascript)");
const metadata = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integrations/metadata.js [app-ssr] (ecmascript)");
const requestdata = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integrations/requestdata.js [app-ssr] (ecmascript)");
const captureconsole = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integrations/captureconsole.js [app-ssr] (ecmascript)");
const debug = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integrations/debug.js [app-ssr] (ecmascript)");
const dedupe = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integrations/dedupe.js [app-ssr] (ecmascript)");
const extraerrordata = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integrations/extraerrordata.js [app-ssr] (ecmascript)");
const rewriteframes = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integrations/rewriteframes.js [app-ssr] (ecmascript)");
const sessiontiming = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integrations/sessiontiming.js [app-ssr] (ecmascript)");
const zoderrors = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integrations/zoderrors.js [app-ssr] (ecmascript)");
const thirdPartyErrorsFilter = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/integrations/third-party-errors-filter.js [app-ssr] (ecmascript)");
const exports$2 = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/exports.js [app-ssr] (ecmascript)");
const profiling = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/profiling.js [app-ssr] (ecmascript)");
const exportsDefault = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/exports-default.js [app-ssr] (ecmascript)");
const browserAggregator = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/browser-aggregator.js [app-ssr] (ecmascript)");
const metricSummary = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/metrics/metric-summary.js [app-ssr] (ecmascript)");
const fetch = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/fetch.js [app-ssr] (ecmascript)");
const trpc = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/trpc.js [app-ssr] (ecmascript)");
const feedback = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/feedback.js [app-ssr] (ecmascript)");
const getCurrentHubShim = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/getCurrentHubShim.js [app-ssr] (ecmascript)");
const aggregateErrors = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/aggregate-errors.js [app-ssr] (ecmascript)");
const array = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/array.js [app-ssr] (ecmascript)");
const breadcrumbLogLevel = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/breadcrumb-log-level.js [app-ssr] (ecmascript)");
const browser = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/browser.js [app-ssr] (ecmascript)");
const dsn = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/dsn.js [app-ssr] (ecmascript)");
const error = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/error.js [app-ssr] (ecmascript)");
const worldwide = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/worldwide.js [app-ssr] (ecmascript)");
const console = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/instrument/console.js [app-ssr] (ecmascript)");
const fetch$1 = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/instrument/fetch.js [app-ssr] (ecmascript)");
const globalError = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalError.js [app-ssr] (ecmascript)");
const globalUnhandledRejection = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/instrument/globalUnhandledRejection.js [app-ssr] (ecmascript)");
const handlers = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/instrument/handlers.js [app-ssr] (ecmascript)");
const is = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/is.js [app-ssr] (ecmascript)");
const isBrowser = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/isBrowser.js [app-ssr] (ecmascript)");
const logger = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/logger.js [app-ssr] (ecmascript)");
const memo = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/memo.js [app-ssr] (ecmascript)");
const misc = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/misc.js [app-ssr] (ecmascript)");
const node = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/node.js [app-ssr] (ecmascript)");
const normalize = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/normalize.js [app-ssr] (ecmascript)");
const object = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/object.js [app-ssr] (ecmascript)");
const path = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/path.js [app-ssr] (ecmascript)");
const promisebuffer = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/promisebuffer.js [app-ssr] (ecmascript)");
const requestdata$1 = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/requestdata.js [app-ssr] (ecmascript)");
const severity = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/severity.js [app-ssr] (ecmascript)");
const stacktrace = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/stacktrace.js [app-ssr] (ecmascript)");
const nodeStackTrace = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/node-stack-trace.js [app-ssr] (ecmascript)");
const string = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/string.js [app-ssr] (ecmascript)");
const supports = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/supports.js [app-ssr] (ecmascript)");
const syncpromise = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/syncpromise.js [app-ssr] (ecmascript)");
const time = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/time.js [app-ssr] (ecmascript)");
const tracing = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/tracing.js [app-ssr] (ecmascript)");
const env = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/env.js [app-ssr] (ecmascript)");
const envelope$1 = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/envelope.js [app-ssr] (ecmascript)");
const clientreport = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/clientreport.js [app-ssr] (ecmascript)");
const ratelimit = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/ratelimit.js [app-ssr] (ecmascript)");
const baggage = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/baggage.js [app-ssr] (ecmascript)");
const url = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/url.js [app-ssr] (ecmascript)");
const cache = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/cache.js [app-ssr] (ecmascript)");
const eventbuilder = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/eventbuilder.js [app-ssr] (ecmascript)");
const anr = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/anr.js [app-ssr] (ecmascript)");
const lru = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/lru.js [app-ssr] (ecmascript)");
const propagationContext = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/propagationContext.js [app-ssr] (ecmascript)");
const vercelWaitUntil = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/vercelWaitUntil.js [app-ssr] (ecmascript)");
const version = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/version.js [app-ssr] (ecmascript)");
const debugIds = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/debug-ids.js [app-ssr] (ecmascript)");
const escapeStringForRegex = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/vendor/escapeStringForRegex.js [app-ssr] (ecmascript)");
const supportsHistory = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/vendor/supportsHistory.js [app-ssr] (ecmascript)");
const _asyncNullishCoalesce = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncNullishCoalesce.js [app-ssr] (ecmascript)");
const _asyncOptionalChain = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChain.js [app-ssr] (ecmascript)");
const _asyncOptionalChainDelete = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_asyncOptionalChainDelete.js [app-ssr] (ecmascript)");
const _nullishCoalesce = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_nullishCoalesce.js [app-ssr] (ecmascript)");
const _optionalChain = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChain.js [app-ssr] (ecmascript)");
const _optionalChainDelete = __turbopack_require__("[project]/node_modules/@sentry/core/build/cjs/utils-hoist/buildPolyfills/_optionalChainDelete.js [app-ssr] (ecmascript)");
exports.registerSpanErrorInstrumentation = errors.registerSpanErrorInstrumentation;
exports.getCapturedScopesOnSpan = utils.getCapturedScopesOnSpan;
exports.setCapturedScopesOnSpan = utils.setCapturedScopesOnSpan;
exports.addTracingExtensions = hubextensions.addTracingExtensions;
exports.TRACING_DEFAULTS = idleSpan.TRACING_DEFAULTS;
exports.startIdleSpan = idleSpan.startIdleSpan;
exports.SentrySpan = sentrySpan.SentrySpan;
exports.SentryNonRecordingSpan = sentryNonRecordingSpan.SentryNonRecordingSpan;
exports.SPAN_STATUS_ERROR = spanstatus.SPAN_STATUS_ERROR;
exports.SPAN_STATUS_OK = spanstatus.SPAN_STATUS_OK;
exports.SPAN_STATUS_UNSET = spanstatus.SPAN_STATUS_UNSET;
exports.getSpanStatusFromHttpCode = spanstatus.getSpanStatusFromHttpCode;
exports.setHttpStatus = spanstatus.setHttpStatus;
exports.continueTrace = trace.continueTrace;
exports.startInactiveSpan = trace.startInactiveSpan;
exports.startNewTrace = trace.startNewTrace;
exports.startSpan = trace.startSpan;
exports.startSpanManual = trace.startSpanManual;
exports.suppressTracing = trace.suppressTracing;
exports.withActiveSpan = trace.withActiveSpan;
exports.getDynamicSamplingContextFromClient = dynamicSamplingContext.getDynamicSamplingContextFromClient;
exports.getDynamicSamplingContextFromScope = dynamicSamplingContext.getDynamicSamplingContextFromScope;
exports.getDynamicSamplingContextFromSpan = dynamicSamplingContext.getDynamicSamplingContextFromSpan;
exports.spanToBaggageHeader = dynamicSamplingContext.spanToBaggageHeader;
exports.setMeasurement = measurement.setMeasurement;
exports.timedEventsToMeasurements = measurement.timedEventsToMeasurements;
exports.sampleSpan = sampling.sampleSpan;
exports.logSpanEnd = logSpans.logSpanEnd;
exports.logSpanStart = logSpans.logSpanStart;
exports.SEMANTIC_ATTRIBUTE_CACHE_HIT = semanticAttributes.SEMANTIC_ATTRIBUTE_CACHE_HIT;
exports.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = semanticAttributes.SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE;
exports.SEMANTIC_ATTRIBUTE_CACHE_KEY = semanticAttributes.SEMANTIC_ATTRIBUTE_CACHE_KEY;
exports.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = semanticAttributes.SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME;
exports.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = semanticAttributes.SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD;
exports.SEMANTIC_ATTRIBUTE_PROFILE_ID = semanticAttributes.SEMANTIC_ATTRIBUTE_PROFILE_ID;
exports.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME;
exports.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON;
exports.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT;
exports.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE;
exports.SEMANTIC_ATTRIBUTE_SENTRY_OP = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_OP;
exports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;
exports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;
exports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = semanticAttributes.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;
exports.SEMANTIC_ATTRIBUTE_URL_FULL = semanticAttributes.SEMANTIC_ATTRIBUTE_URL_FULL;
exports.createEventEnvelope = envelope.createEventEnvelope;
exports.createSessionEnvelope = envelope.createSessionEnvelope;
exports.createSpanEnvelope = envelope.createSpanEnvelope;
exports.addEventProcessor = exports$1.addEventProcessor;
exports.captureCheckIn = exports$1.captureCheckIn;
exports.captureEvent = exports$1.captureEvent;
exports.captureException = exports$1.captureException;
exports.captureMessage = exports$1.captureMessage;
exports.captureSession = exports$1.captureSession;
exports.close = exports$1.close;
exports.endSession = exports$1.endSession;
exports.flush = exports$1.flush;
exports.isEnabled = exports$1.isEnabled;
exports.isInitialized = exports$1.isInitialized;
exports.lastEventId = exports$1.lastEventId;
exports.setContext = exports$1.setContext;
exports.setExtra = exports$1.setExtra;
exports.setExtras = exports$1.setExtras;
exports.setTag = exports$1.setTag;
exports.setTags = exports$1.setTags;
exports.setUser = exports$1.setUser;
exports.startSession = exports$1.startSession;
exports.withMonitor = exports$1.withMonitor;
exports.getClient = currentScopes.getClient;
exports.getCurrentScope = currentScopes.getCurrentScope;
exports.getGlobalScope = currentScopes.getGlobalScope;
exports.getIsolationScope = currentScopes.getIsolationScope;
exports.getTraceContextFromScope = currentScopes.getTraceContextFromScope;
exports.withIsolationScope = currentScopes.withIsolationScope;
exports.withScope = currentScopes.withScope;
exports.getDefaultCurrentScope = defaultScopes.getDefaultCurrentScope;
exports.getDefaultIsolationScope = defaultScopes.getDefaultIsolationScope;
exports.setAsyncContextStrategy = index.setAsyncContextStrategy;
exports.getMainCarrier = carrier.getMainCarrier;
exports.closeSession = session.closeSession;
exports.makeSession = session.makeSession;
exports.updateSession = session.updateSession;
exports.SessionFlusher = sessionflusher.SessionFlusher;
exports.Scope = scope.Scope;
exports.notifyEventProcessors = eventProcessors.notifyEventProcessors;
exports.getEnvelopeEndpointWithUrlEncodedAuth = api.getEnvelopeEndpointWithUrlEncodedAuth;
exports.getReportDialogEndpoint = api.getReportDialogEndpoint;
exports.BaseClient = baseclient.BaseClient;
exports.ServerRuntimeClient = serverRuntimeClient.ServerRuntimeClient;
exports.initAndBind = sdk.initAndBind;
exports.setCurrentClient = sdk.setCurrentClient;
exports.createTransport = base.createTransport;
exports.makeOfflineTransport = offline.makeOfflineTransport;
exports.makeMultiplexedTransport = multiplexed.makeMultiplexedTransport;
exports.addIntegration = integration.addIntegration;
exports.defineIntegration = integration.defineIntegration;
exports.getIntegrationsToSetup = integration.getIntegrationsToSetup;
exports.applyScopeDataToEvent = applyScopeDataToEvent.applyScopeDataToEvent;
exports.mergeScopeData = applyScopeDataToEvent.mergeScopeData;
exports.prepareEvent = prepareEvent.prepareEvent;
exports.createCheckInEnvelope = checkin.createCheckInEnvelope;
exports.hasTracingEnabled = hasTracingEnabled.hasTracingEnabled;
exports.isSentryRequestUrl = isSentryRequestUrl.isSentryRequestUrl;
exports.handleCallbackErrors = handleCallbackErrors.handleCallbackErrors;
exports.parameterize = parameterize.parameterize;
exports.addChildSpanToSpan = spanUtils.addChildSpanToSpan;
exports.getActiveSpan = spanUtils.getActiveSpan;
exports.getRootSpan = spanUtils.getRootSpan;
exports.getSpanDescendants = spanUtils.getSpanDescendants;
exports.getStatusMessage = spanUtils.getStatusMessage;
exports.spanIsSampled = spanUtils.spanIsSampled;
exports.spanTimeInputToSeconds = spanUtils.spanTimeInputToSeconds;
exports.spanToJSON = spanUtils.spanToJSON;
exports.spanToTraceContext = spanUtils.spanToTraceContext;
exports.spanToTraceHeader = spanUtils.spanToTraceHeader;
exports.updateSpanName = spanUtils.updateSpanName;
exports.parseSampleRate = parseSampleRate.parseSampleRate;
exports.applySdkMetadata = sdkMetadata.applySdkMetadata;
exports.getTraceData = traceData.getTraceData;
exports.getTraceMetaTags = meta.getTraceMetaTags;
exports.DEFAULT_ENVIRONMENT = constants.DEFAULT_ENVIRONMENT;
exports.addBreadcrumb = breadcrumbs.addBreadcrumb;
exports.functionToStringIntegration = functiontostring.functionToStringIntegration;
exports.inboundFiltersIntegration = inboundfilters.inboundFiltersIntegration;
exports.linkedErrorsIntegration = linkederrors.linkedErrorsIntegration;
exports.moduleMetadataIntegration = metadata.moduleMetadataIntegration;
exports.requestDataIntegration = requestdata.requestDataIntegration;
exports.captureConsoleIntegration = captureconsole.captureConsoleIntegration;
exports.debugIntegration = debug.debugIntegration;
exports.dedupeIntegration = dedupe.dedupeIntegration;
exports.extraErrorDataIntegration = extraerrordata.extraErrorDataIntegration;
exports.rewriteFramesIntegration = rewriteframes.rewriteFramesIntegration;
exports.sessionTimingIntegration = sessiontiming.sessionTimingIntegration;
exports.zodErrorsIntegration = zoderrors.zodErrorsIntegration;
exports.thirdPartyErrorFilterIntegration = thirdPartyErrorsFilter.thirdPartyErrorFilterIntegration;
exports.metrics = exports$2.metrics;
exports.profiler = profiling.profiler;
exports.metricsDefault = exportsDefault.metricsDefault;
exports.BrowserMetricsAggregator = browserAggregator.BrowserMetricsAggregator;
exports.getMetricSummaryJsonForSpan = metricSummary.getMetricSummaryJsonForSpan;
exports.addTracingHeadersToFetchRequest = fetch.addTracingHeadersToFetchRequest;
exports.instrumentFetchRequest = fetch.instrumentFetchRequest;
exports.trpcMiddleware = trpc.trpcMiddleware;
exports.captureFeedback = feedback.captureFeedback;
exports.getCurrentHub = getCurrentHubShim.getCurrentHub;
exports.getCurrentHubShim = getCurrentHubShim.getCurrentHubShim;
exports.applyAggregateErrorsToEvent = aggregateErrors.applyAggregateErrorsToEvent;
exports.flatten = array.flatten;
exports.getBreadcrumbLogLevelFromHttpStatusCode = breadcrumbLogLevel.getBreadcrumbLogLevelFromHttpStatusCode;
exports.getComponentName = browser.getComponentName;
exports.getDomElement = browser.getDomElement;
exports.getLocationHref = browser.getLocationHref;
exports.htmlTreeAsString = browser.htmlTreeAsString;
exports.dsnFromString = dsn.dsnFromString;
exports.dsnToString = dsn.dsnToString;
exports.makeDsn = dsn.makeDsn;
exports.SentryError = error.SentryError;
exports.GLOBAL_OBJ = worldwide.GLOBAL_OBJ;
exports.getGlobalSingleton = worldwide.getGlobalSingleton;
exports.addConsoleInstrumentationHandler = console.addConsoleInstrumentationHandler;
exports.addFetchEndInstrumentationHandler = fetch$1.addFetchEndInstrumentationHandler;
exports.addFetchInstrumentationHandler = fetch$1.addFetchInstrumentationHandler;
exports.addGlobalErrorInstrumentationHandler = globalError.addGlobalErrorInstrumentationHandler;
exports.addGlobalUnhandledRejectionInstrumentationHandler = globalUnhandledRejection.addGlobalUnhandledRejectionInstrumentationHandler;
exports.addHandler = handlers.addHandler;
exports.maybeInstrument = handlers.maybeInstrument;
exports.resetInstrumentationHandlers = handlers.resetInstrumentationHandlers;
exports.triggerHandlers = handlers.triggerHandlers;
exports.isDOMError = is.isDOMError;
exports.isDOMException = is.isDOMException;
exports.isElement = is.isElement;
exports.isError = is.isError;
exports.isErrorEvent = is.isErrorEvent;
exports.isEvent = is.isEvent;
exports.isInstanceOf = is.isInstanceOf;
exports.isParameterizedString = is.isParameterizedString;
exports.isPlainObject = is.isPlainObject;
exports.isPrimitive = is.isPrimitive;
exports.isRegExp = is.isRegExp;
exports.isString = is.isString;
exports.isSyntheticEvent = is.isSyntheticEvent;
exports.isThenable = is.isThenable;
exports.isVueViewModel = is.isVueViewModel;
exports.isBrowser = isBrowser.isBrowser;
exports.CONSOLE_LEVELS = logger.CONSOLE_LEVELS;
exports.consoleSandbox = logger.consoleSandbox;
exports.logger = logger.logger;
exports.originalConsoleMethods = logger.originalConsoleMethods;
exports.memoBuilder = memo.memoBuilder;
exports.addContextToFrame = misc.addContextToFrame;
exports.addExceptionMechanism = misc.addExceptionMechanism;
exports.addExceptionTypeValue = misc.addExceptionTypeValue;
exports.arrayify = misc.arrayify;
exports.checkOrSetAlreadyCaught = misc.checkOrSetAlreadyCaught;
exports.getEventDescription = misc.getEventDescription;
exports.parseSemver = misc.parseSemver;
exports.uuid4 = misc.uuid4;
exports.dynamicRequire = node.dynamicRequire;
exports.isNodeEnv = node.isNodeEnv;
exports.loadModule = node.loadModule;
exports.normalize = normalize.normalize;
exports.normalizeToSize = normalize.normalizeToSize;
exports.normalizeUrlToBase = normalize.normalizeUrlToBase;
exports.addNonEnumerableProperty = object.addNonEnumerableProperty;
exports.convertToPlainObject = object.convertToPlainObject;
exports.dropUndefinedKeys = object.dropUndefinedKeys;
exports.extractExceptionKeysForMessage = object.extractExceptionKeysForMessage;
exports.fill = object.fill;
exports.getOriginalFunction = object.getOriginalFunction;
exports.markFunctionWrapped = object.markFunctionWrapped;
exports.objectify = object.objectify;
exports.urlEncode = object.urlEncode;
exports.basename = path.basename;
exports.dirname = path.dirname;
exports.isAbsolute = path.isAbsolute;
exports.join = path.join;
exports.normalizePath = path.normalizePath;
exports.relative = path.relative;
exports.resolve = path.resolve;
exports.makePromiseBuffer = promisebuffer.makePromiseBuffer;
exports.DEFAULT_USER_INCLUDES = requestdata$1.DEFAULT_USER_INCLUDES;
exports.addNormalizedRequestDataToEvent = requestdata$1.addNormalizedRequestDataToEvent;
exports.addRequestDataToEvent = requestdata$1.addRequestDataToEvent;
exports.extractPathForTransaction = requestdata$1.extractPathForTransaction;
exports.extractQueryParamsFromUrl = requestdata$1.extractQueryParamsFromUrl;
exports.extractRequestData = requestdata$1.extractRequestData;
exports.headersToDict = requestdata$1.headersToDict;
exports.httpRequestToRequestData = requestdata$1.httpRequestToRequestData;
exports.winterCGHeadersToDict = requestdata$1.winterCGHeadersToDict;
exports.winterCGRequestToRequestData = requestdata$1.winterCGRequestToRequestData;
exports.severityLevelFromString = severity.severityLevelFromString;
exports.validSeverityLevels = severity.validSeverityLevels;
exports.UNKNOWN_FUNCTION = stacktrace.UNKNOWN_FUNCTION;
exports.createStackParser = stacktrace.createStackParser;
exports.getFramesFromEvent = stacktrace.getFramesFromEvent;
exports.getFunctionName = stacktrace.getFunctionName;
exports.stackParserFromStackParserOptions = stacktrace.stackParserFromStackParserOptions;
exports.stripSentryFramesAndReverse = stacktrace.stripSentryFramesAndReverse;
exports.filenameIsInApp = nodeStackTrace.filenameIsInApp;
exports.node = nodeStackTrace.node;
exports.nodeStackLineParser = nodeStackTrace.nodeStackLineParser;
exports.isMatchingPattern = string.isMatchingPattern;
exports.safeJoin = string.safeJoin;
exports.snipLine = string.snipLine;
exports.stringMatchesSomePattern = string.stringMatchesSomePattern;
exports.truncate = string.truncate;
exports.isNativeFunction = supports.isNativeFunction;
exports.supportsDOMError = supports.supportsDOMError;
exports.supportsDOMException = supports.supportsDOMException;
exports.supportsErrorEvent = supports.supportsErrorEvent;
exports.supportsFetch = supports.supportsFetch;
exports.supportsNativeFetch = supports.supportsNativeFetch;
exports.supportsReferrerPolicy = supports.supportsReferrerPolicy;
exports.supportsReportingObserver = supports.supportsReportingObserver;
exports.SyncPromise = syncpromise.SyncPromise;
exports.rejectedSyncPromise = syncpromise.rejectedSyncPromise;
exports.resolvedSyncPromise = syncpromise.resolvedSyncPromise;
Object.defineProperty(exports, "_browserPerformanceTimeOriginMode", {
    enumerable: true,
    get: ()=>time._browserPerformanceTimeOriginMode
});
exports.browserPerformanceTimeOrigin = time.browserPerformanceTimeOrigin;
exports.dateTimestampInSeconds = time.dateTimestampInSeconds;
exports.timestampInSeconds = time.timestampInSeconds;
exports.TRACEPARENT_REGEXP = tracing.TRACEPARENT_REGEXP;
exports.extractTraceparentData = tracing.extractTraceparentData;
exports.generateSentryTraceHeader = tracing.generateSentryTraceHeader;
exports.propagationContextFromHeaders = tracing.propagationContextFromHeaders;
exports.getSDKSource = env.getSDKSource;
exports.isBrowserBundle = env.isBrowserBundle;
exports.addItemToEnvelope = envelope$1.addItemToEnvelope;
exports.createAttachmentEnvelopeItem = envelope$1.createAttachmentEnvelopeItem;
exports.createEnvelope = envelope$1.createEnvelope;
exports.createEventEnvelopeHeaders = envelope$1.createEventEnvelopeHeaders;
exports.createSpanEnvelopeItem = envelope$1.createSpanEnvelopeItem;
exports.envelopeContainsItemType = envelope$1.envelopeContainsItemType;
exports.envelopeItemTypeToDataCategory = envelope$1.envelopeItemTypeToDataCategory;
exports.forEachEnvelopeItem = envelope$1.forEachEnvelopeItem;
exports.getSdkMetadataForEnvelopeHeader = envelope$1.getSdkMetadataForEnvelopeHeader;
exports.parseEnvelope = envelope$1.parseEnvelope;
exports.serializeEnvelope = envelope$1.serializeEnvelope;
exports.createClientReportEnvelope = clientreport.createClientReportEnvelope;
exports.DEFAULT_RETRY_AFTER = ratelimit.DEFAULT_RETRY_AFTER;
exports.disabledUntil = ratelimit.disabledUntil;
exports.isRateLimited = ratelimit.isRateLimited;
exports.parseRetryAfterHeader = ratelimit.parseRetryAfterHeader;
exports.updateRateLimits = ratelimit.updateRateLimits;
exports.BAGGAGE_HEADER_NAME = baggage.BAGGAGE_HEADER_NAME;
exports.MAX_BAGGAGE_STRING_LENGTH = baggage.MAX_BAGGAGE_STRING_LENGTH;
exports.SENTRY_BAGGAGE_KEY_PREFIX = baggage.SENTRY_BAGGAGE_KEY_PREFIX;
exports.SENTRY_BAGGAGE_KEY_PREFIX_REGEX = baggage.SENTRY_BAGGAGE_KEY_PREFIX_REGEX;
exports.baggageHeaderToDynamicSamplingContext = baggage.baggageHeaderToDynamicSamplingContext;
exports.dynamicSamplingContextToSentryBaggageHeader = baggage.dynamicSamplingContextToSentryBaggageHeader;
exports.parseBaggageHeader = baggage.parseBaggageHeader;
exports.getNumberOfUrlSegments = url.getNumberOfUrlSegments;
exports.getSanitizedUrlString = url.getSanitizedUrlString;
exports.parseUrl = url.parseUrl;
exports.stripUrlQueryAndFragment = url.stripUrlQueryAndFragment;
exports.makeFifoCache = cache.makeFifoCache;
exports.eventFromMessage = eventbuilder.eventFromMessage;
exports.eventFromUnknownInput = eventbuilder.eventFromUnknownInput;
exports.exceptionFromError = eventbuilder.exceptionFromError;
exports.parseStackFrames = eventbuilder.parseStackFrames;
exports.callFrameToStackFrame = anr.callFrameToStackFrame;
exports.watchdogTimer = anr.watchdogTimer;
exports.LRUMap = lru.LRUMap;
exports.generatePropagationContext = propagationContext.generatePropagationContext;
exports.generateSpanId = propagationContext.generateSpanId;
exports.generateTraceId = propagationContext.generateTraceId;
exports.vercelWaitUntil = vercelWaitUntil.vercelWaitUntil;
exports.SDK_VERSION = version.SDK_VERSION;
exports.getDebugImagesForResources = debugIds.getDebugImagesForResources;
exports.getFilenameToDebugIdMap = debugIds.getFilenameToDebugIdMap;
exports.escapeStringForRegex = escapeStringForRegex.escapeStringForRegex;
exports.supportsHistory = supportsHistory.supportsHistory;
exports._asyncNullishCoalesce = _asyncNullishCoalesce._asyncNullishCoalesce;
exports._asyncOptionalChain = _asyncOptionalChain._asyncOptionalChain;
exports._asyncOptionalChainDelete = _asyncOptionalChainDelete._asyncOptionalChainDelete;
exports._nullishCoalesce = _nullishCoalesce._nullishCoalesce;
exports._optionalChain = _optionalChain._optionalChain;
exports._optionalChainDelete = _optionalChainDelete._optionalChainDelete; //# sourceMappingURL=index.js.map
}}),

};

//# sourceMappingURL=node_modules_%40sentry_core_build_cjs_707ebc._.js.map